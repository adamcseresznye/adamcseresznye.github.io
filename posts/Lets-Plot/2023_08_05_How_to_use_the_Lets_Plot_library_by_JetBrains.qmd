---
title: How to use the Lets-Plot library by JetBrains
author: Adam Cseresznye
date: '2023-08-05'
categories:
  - Lets-Plot
  - ggplot2
jupyter: python3
toc: true
format:
  html:
    code-fold: true
    code-tools: true
---

#| label: JetBrains logo
#| fig-cap: "fig1"

![](https://upload.wikimedia.org/wikipedia/en/thumb/0/08/JetBrains_beam_logo.svg/1200px-JetBrains_beam_logo.svg.png){fig-align="center" width=50%}

When I embarked on my data science journey,  due to my academics background I quickly gravitated towards the [R programming language](https://www.r-project.org/). Like many R novices, I began with Hadley Wickham's [R for Data Science](https://r4ds.hadley.nz/) book which introduced me to the wonderful [ggplot2](https://ggplot2.tidyverse.org/) library. As my interest in machine learning grew, I made the switch to Python. Nowadays, for most of my data plotting needs, I rely mainly on [matplotlib](https://matplotlib.org/) or [seaborn](https://seaborn.pydata.org/). Though I love these libraries, their multiple ways of accomplishing the same tasks can be a bit cumbersome and challenging to learn at first.

That's why in this article, I'm excited to introduce you to the [Lets-Plot](https://lets-plot.org/index.html#) library by JetBrains. It is the closest you can get to ggplot's syntax while using Python. While some traditional Python users might find the syntax a bit unfamiliar initially, I'm here to make a case for this fantastic library and hopefully inspire you to incorporate it into your day-to-day data science activities.

To showcase (some of) the key features of Lets-Plot, we will be utilizing the [penguins dataset](https://gist.githubusercontent.com/slopp/ce3b90b9168f2f921784de84fa445651/raw/4ecf3041f0ed4913e7c230758733948bc561f434/penguins.csv) üêß from Github. 

Without further ado, let's dive right in and discover the power and beauty of Lets-Plot! üêçüìä

```{python}
# Installation
# pip install lets-plot 
```

```{python}
#| tags: []
# Import libraries
import numpy as np
import pandas as pd
from lets_plot import *
from lets_plot.mapping import as_discrete
LetsPlot.setup_html()
```

```{python}
#| column: page
address='https://gist.githubusercontent.com/slopp/ce3b90b9168f2f921784de84fa445651/raw/4ecf3041f0ed4913e7c230758733948bc561f434/penguins.csv'
df=pd.read_csv(address)
df.head()
```


# Syntax Similarities: <code>Lets-Plot</code> and <code>ggplot2</code>

For our first exercise, I thought it would be beneficial to replicate a basic plot inspired by Hadley's book. When comparing my code here with [the one presented by him](https://r4ds.hadley.nz/data-visualize#sec-adding-aesthetics-layers), you'll notice that there is very little difference between the two. The syntax is nearly identical, making it a smooth transition from ggplot to Lets-Plot.

Now, let's take a closer look at the code. In the <code>ggplot</code> function, we define the <code>DataFrame</code> we'll be working with, and the aesthetic mappings are set at the *global level*. We assign the values for the x and y axes, as well as the <code>color</code> argument, which groups the data based on the categorical variable representing the three different penguin species: Adelie, Gentoo, and Chinstrap. This color parameter is quite similar to seaborn's <code>hue</code>, making it easy for those familiar with seaborn to adapt to Lets-Plot seamlessly. 

After the <code>ggplot()</code> function sets the global aesthetic mappings, the <code>geom_point()</code> function comes into play and draws the points defined by the x and y parameters, effectively creating a scatter plot. These points represent the data points from the penguins dataset, with x and y coordinates corresponding to the specified variables.

Additionally, we enhance the plot by using <code>geom_smooth(method='lm')</code>, which adds a smoothed conditional mean. The <code>lm</code> method stands for 'linear model,' indicating that the smoothing is based on a linear regression. This smoothed line helps reveal trends and patterns in the data, making it easier to observe any overall relationships between the variables.

Let's continue exploring more of what Lets-Plot has in store for us! üìäüêßüåà

```{python}
(ggplot(df,
        aes(x='flipper_length_mm',
            y = 'body_mass_g',
            color='species'
           )
       )
 + geom_point() # Draw points defined by an x and y coordinate, as for a scatter plot.
 + geom_smooth(method='lm') # Add a smoothed conditional mean. ‚Äòlm‚Äô stands for 'linear model' as Smoothing method
) 
```

In the previous example, we highlighted the importance of placing the <code>color</code> parameter at the *global level*, which grouped the data by the three penguin species and showed separate regression lines for each group. However, if we prefer to depict the regression line for the entire dataset, regardless of the group association, we can do so just as easily. All we need to do is remove the <code>color</code> parameter from the aesthetics of the <code>ggplot</code> function and place it solely in the <code>geom_point</code>.

Additionally, to enhance the plot further, we can properly label the x and y axes, add a title and subtitle. With these simple adjustments, we can achieve the same output as [Hadley's original code](https://r4ds.hadley.nz/data-visualize#sec-adding-aesthetics-layers), with little to no modification.

```{python}
(ggplot(df, 
        aes(x='flipper_length_mm',
            y = 'body_mass_g',
           )
       )
 + geom_point(aes(color='species', shape='species'))
 + geom_smooth(method='lm')
 + labs(
    title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)", y = "Body mass (g)",
  ) 
 + scale_color_viridis() # lets-plots equivalent of the scale_color_colorblind()
) 
```


# Visualizing Data Based on Categorical Variables

Lets-Plot provides numerous options to showcase our data using categorical variables. From bar plots, box plots, and violin plots to pie charts, the possibilities are diverse. You can check out their [API](https://lets-plot.org/pages/api.html) for reference. Let's explore some examples to demonstrate the versatility of Lets-Plot in visualizing categorical data.

```{python}
#| fig-column: page
 
penguin_bar = (ggplot(df,aes(x='species'))
               + geom_bar()
              )

penguin_box = (ggplot(df,aes(x = 'species', y = 'body_mass_g'))
               + geom_boxplot()
              )

penguin_density = (ggplot(df,aes('body_mass_g', color='species', fill='species'))
                   + geom_density(alpha=0.5)
                  )

penguin_rel_frequency = (ggplot(df,aes(x = 'island', fill = 'species'))
                         + geom_bar(position='fill')
                        )
gggrid([penguin_bar, penguin_box, penguin_density, penguin_rel_frequency], ncol=2)
```

# Incorporate Multiple Variables with facet_wrap

So far we've discovered how easy it is to plot data based on a single categorical variable. However, what if we want to depict relationships involving two or more categorical variables? That's where <code>facet_wrap</code> comes in handy. This versatile function bears resemblance to similar functions found in <code>seaborn</code> or <code>ggplot2</code> libraries.

To unlock the potential of <code>facet_wrap</code>, we simply need to define aesthetics, which can either be global or local to the mapping function. Then, we can use <code>facet_wrap</code> with the relevant categorical variable we want to visualize. It's as simple as that! 

```{python}
(ggplot(df, aes(x = 'flipper_length_mm', y = 'body_mass_g'))  
 + geom_point(aes(color = 'species', shape = 'species'), size = 4) 
 + facet_wrap('island', nrow=1)
 + labs(title = "Body mass and flipper length based on island",
        subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
        x = "Flipper length (mm)", y = "Body mass (g)",
       )
 + theme(plot_title=element_text(size=20,face='bold'))
 + ggsize(1000,500)
)
```

<div id='id-section4'/>

# Reordering Categorical Variables Based On Statistics

When visualizing data, a task I frequently encounter is ordering categorical variables in either ascending or descending order, based on statistics like median or mean. In my previous point on "Visualizing Data Based on Categorical Variables," you noticed that the boxplot displayed categories in an unordered manner. However, consider how we can present them in an ascending order, determined by the median. This not only enhances the aesthetics of the plot but also provides valuable insights into the relationships among the categories.

```{python}
(ggplot(df,aes(as_discrete('species', order=1, order_by='..middle..'), 
               y = 'body_mass_g'))
 + geom_boxplot()
)
```

By incorporating the <code>as_discrete</code> function, specifying the column, the ordering direction (1 for ascending, -1 for descending), and setting the <code>order_by</code> variable to *middle* (representing the median), the plot has become significantly more informative. This simple addition has allowed us to organize the categorical variables in a meaningful manner, improving the visualization's clarity and aiding in the interpretation of relationships among the categories.

# Chaining Pandas Code with Lets Plot Visualization

One of the best features of the <code>pandas</code> library is its remarkable customizability. With the help of the <code>pd.pipe</code> function, we can seamlessly integrate any of our own functions into method chains, as long as they return a <code>DataFrame</code> or <code>Series</code>. This opens up exciting possibilities to fully incorporate <code>Lets-Plot</code> into our code, just like <code>pandas</code>' own built-in plotting functionality.

While <code>Lets-Plot</code> may be slightly more verbose than <code>pandas</code> plotting, it offers significantly more flexibility and freedom for customization. Not to mention that some may consider it visually more appealing. With <code>Lets-Plot</code> integrated into our <code>pandas</code> code, we can effortlessly create stunning and informative plots, making data analysis an even more enjoyable experience.

```{python}
(df
 .groupby('species')
 [['body_mass_g', 'flipper_length_mm']]
 .mean()
 .reset_index()
 .pipe(lambda df: (ggplot(df)
                   + geom_pie(aes(slice='body_mass_g', fill='species'), 
                              stat='identity',size=30, hole=0.2, stroke=1.0,
                              labels=layer_labels().line('@body_mass_g').format('@body_mass_g', '{.0f}').size(20)
                             )
                   + labs(title = "Body mass based on species",
                          subtitle = "Representing how Lets-Plot can be used with pd. pipe",
                          x = "", y = "",
                         )
                   + theme(axis='blank',
                          plot_title=element_text(size=20,face='bold'))
                   + ggsize(500,400)
                  )
 )
)
```

That's a wrap on the Lets-Plot library! There's so much more to explore and learn about this powerful tool. I hope you found this introduction helpful and consider integrating Lets-Plot into your daily data analysis routine.

Happy coding üêçüñ•Ô∏èüîçüöÄ

