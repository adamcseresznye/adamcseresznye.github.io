{
  "hash": "e3fa95158ffc95481375a4465ace6234",
  "result": {
    "markdown": "---\ntitle: 'Tidy Tuesday: Hot Ones Episodes'\nauthor: Adam Cseresznye\ndate: '2023-08-09'\ncategories:\n  - Tidy Tuesday\ntoc: true\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n---\n\n\n![](Hot_Ones_by_First_We_Feast_logo.svg.png){fig-align=\"center\" width=50%}\n\nI've decided to get more involved in the Tidy Tuesday movement. I think it's a really enjoyable way to improve my skills in working with data, like analyzing, organizing, and visualizing it. The cool datasets they provide make it even more interesting. More information on Tidy Tuesday and their past datasets can be found [here](https://github.com/rfordatascience/tidytuesday).\n\nThis week we have a dataset related to the show Hot Ones. [Hot Ones](https://www.youtube.com/playlist?list=PLAzrgbu8gEMIIK3r4Se1dOZWSZzUSadfZ) is a unique web series that combines spicy food challenges with celebrity interviews. Hosted by Sean Evans, guests tackle increasingly hot chicken wings while answering questions, leading to candid and entertaining conversations. The show's blend of heat and honesty has turned it into a global sensation, offering a fresh take on interviews and captivating audiences worldwide.\n\nLet's see what we can learn from the data üî¨üïµÔ∏è‚Äç‚ôÇÔ∏è.\n\n# Import data\n\n::: {.cell tags='[]' execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt \nfrom scipy import stats\nfrom lets_plot import *\nfrom lets_plot.mapping import as_discrete\nLetsPlot.setup_html()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n            <div id=\"7B4Ib4\"></div>\n            <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n                if(!window.letsPlotCallQueue) {\n                    window.letsPlotCallQueue = [];\n                }; \n                window.letsPlotCall = function(f) {\n                    window.letsPlotCallQueue.push(f);\n                };\n                (function() {\n                    var script = document.createElement(\"script\");\n                    script.type = \"text/javascript\";\n                    script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v3.2.0/js-package/distr/lets-plot.min.js\";\n                    script.onload = function() {\n                        window.letsPlotCall = function(f) {f();};\n                        window.letsPlotCallQueue.forEach(function(f) {f();});\n                        window.letsPlotCallQueue = [];\n                        \n                    };\n                    script.onerror = function(event) {\n                        window.letsPlotCall = function(f) {};    // noop\n                        window.letsPlotCallQueue = [];\n                        var div = document.createElement(\"div\");\n                        div.style.color = 'darkred';\n                        div.textContent = 'Error loading Lets-Plot JS';\n                        document.getElementById(\"7B4Ib4\").appendChild(div);\n                    };\n                    var e = document.getElementById(\"7B4Ib4\");\n                    e.appendChild(script);\n                })()\n            </script>\n            \n```\n:::\n:::\n\n\nWe have three dataframes: `sauces`, `season` and `episodes`. For more information about the data dictionary see the [GitHub repo](https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-08-08/readme.md).\n\n::: {.cell tags='[]' execution_count=2}\n``` {.python .cell-code}\nsauces=pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-08-08/sauces.csv')\nseason=pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-08-08/seasons.csv')\nepisodes=pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-08-08/episodes.csv')\n\nsauces.sample(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>sauce_number</th>\n      <th>sauce_name</th>\n      <th>scoville</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>96</th>\n      <td>10</td>\n      <td>7</td>\n      <td>Bravado Spice Company ‚Äì Aka Miso Ghost Reaper</td>\n      <td>116000</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>2</td>\n      <td>2</td>\n      <td>Tapat√≠o</td>\n      <td>3000</td>\n    </tr>\n    <tr>\n      <th>85</th>\n      <td>9</td>\n      <td>6</td>\n      <td>Hell Fire Detroit Habanero</td>\n      <td>66000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell tags='[]' execution_count=3}\n``` {.python .cell-code}\nseason.sample(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episodes</th>\n      <th>note</th>\n      <th>original_release</th>\n      <th>last_release</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>12.0</td>\n      <td>NaN</td>\n      <td>2018-10-04</td>\n      <td>2018-12-20</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>24.0</td>\n      <td>NaN</td>\n      <td>2017-01-19</td>\n      <td>2017-06-29</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>15</td>\n      <td>12.0</td>\n      <td>NaN</td>\n      <td>2021-05-27</td>\n      <td>2021-08-12</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell tags='[]' execution_count=4}\n``` {.python .cell-code}\nepisodes.sample(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>episode_overall</th>\n      <th>episode_season</th>\n      <th>title</th>\n      <th>original_release</th>\n      <th>guest</th>\n      <th>guest_appearance_number</th>\n      <th>finished</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>250</th>\n      <td>17</td>\n      <td>251</td>\n      <td>9</td>\n      <td>Jacob Elordi Feels Euphoric While Eating Spicy...</td>\n      <td>2022-03-17</td>\n      <td>Jacob Elordi</td>\n      <td>1</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>181</th>\n      <td>11</td>\n      <td>182</td>\n      <td>8</td>\n      <td>Zac Efron Ups the Ante While Eating Spicy Wings</td>\n      <td>2020-04-02</td>\n      <td>Zac Efron</td>\n      <td>1</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>2</td>\n      <td>12</td>\n      <td>4</td>\n      <td>T.J. Miller Talks Deadpool, Hecklers, and Rela...</td>\n      <td>2016-02-12</td>\n      <td>T.J. Miller</td>\n      <td>1</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.callout-note}\nAfter taking a look at all three datasets, I think I will continue working with the `sauces` and `episodes` ones.\n:::\n\n# Questions\n\n**My main questions are:** \n\n*  What differences can be observed in the spiciness of sauces as we look across the various seasons?\n*  Has every individual successfully completed all the episodes?\n*  What is the average completion rate per season?\n*  Is there a correlation between Scoville Units and completion rate?\n*  Are there any returning guests?\n    \n\n# Data Analysis\n\n## What differences can be observed in the spiciness of sauces as we look across the various seasons?\n\n::: {.cell tags='[]' execution_count=5}\n``` {.python .cell-code}\n(sauces\n .groupby('season')\n .agg(AVG_scoville=('scoville', 'mean'),\n      median_scoville=('scoville', 'median'),\n     )\n .reset_index()\n .melt(id_vars='season',\n       var_name='statistics',\n      )\n .pipe(lambda df: (ggplot(df, aes('season', 'value',fill='statistics'))\n                   + geom_bar(stat='identity', show_legend= False)\n                   + facet_wrap('statistics',nrow=1,scales='free_y')\n                   + labs(x='Seasons',\n                          y='Scoville Units'\n                         )\n                   + theme(plot_title=element_text(size=20,face='bold'))\n                  + ggsize(1000,600)\n                  )\n      )\n \n)\n```\n\n::: {#fig-fig1 .cell-output .cell-output-display execution_count=5}\n```{=html}\n   <div id=\"dd19UC\"></div>\n   <script type=\"text/javascript\" data-lets-plot-script=\"plot\">\n       (function() {\n           var plotSpec={\n\"data\":{\n\"season\":[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,21.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,21.0],\n\"statistics\":[\"AVG_scoville\",\"AVG_scoville\",\"AVG_scoville\",\"AVG_scoville\",\"AVG_scoville\",\"AVG_scoville\",\"AVG_scoville\",\"AVG_scoville\",\"AVG_scoville\",\"AVG_scoville\",\"AVG_scoville\",\"AVG_scoville\",\"AVG_scoville\",\"AVG_scoville\",\"AVG_scoville\",\"AVG_scoville\",\"AVG_scoville\",\"AVG_scoville\",\"AVG_scoville\",\"AVG_scoville\",\"AVG_scoville\",\"median_scoville\",\"median_scoville\",\"median_scoville\",\"median_scoville\",\"median_scoville\",\"median_scoville\",\"median_scoville\",\"median_scoville\",\"median_scoville\",\"median_scoville\",\"median_scoville\",\"median_scoville\",\"median_scoville\",\"median_scoville\",\"median_scoville\",\"median_scoville\",\"median_scoville\",\"median_scoville\",\"median_scoville\",\"median_scoville\",\"median_scoville\"],\n\"value\":[67973.7,115679.0,121219.0,284130.0,332770.0,292770.0,299790.0,306580.0,307580.0,310240.0,311590.0,309930.0,307200.0,309180.0,306940.0,313500.0,313010.0,308950.0,304970.0,304040.0,305920.0,16800.0,24800.0,21800.0,18300.0,44000.0,53500.0,45500.0,48500.0,51000.0,64500.0,61500.0,60500.0,57500.0,59000.0,63500.0,62000.0,60000.0,64500.0,57500.0,53500.0,60000.0]\n},\n\"mapping\":{\n\"x\":\"season\",\n\"y\":\"value\",\n\"fill\":\"statistics\"\n},\n\"data_meta\":{\n},\n\"facet\":{\n\"name\":\"wrap\",\n\"facets\":\"statistics\",\n\"nrow\":1.0,\n\"scales\":\"free_y\",\n\"order\":1.0,\n\"dir\":\"h\"\n},\n\"theme\":{\n\"plot_title\":{\n\"face\":\"bold\",\n\"size\":20.0,\n\"blank\":false\n}\n},\n\"ggsize\":{\n\"width\":1000.0,\n\"height\":600.0\n},\n\"kind\":\"plot\",\n\"scales\":[{\n\"name\":\"Seasons\",\n\"aesthetic\":\"x\"\n},{\n\"name\":\"Scoville Units\",\n\"aesthetic\":\"y\"\n}],\n\"layers\":[{\n\"geom\":\"bar\",\n\"stat\":\"identity\",\n\"mapping\":{\n},\n\"show_legend\":false,\n\"data_meta\":{\n},\n\"data\":{\n}\n}],\n\"metainfo_list\":[]\n};\n           var plotContainer = document.getElementById(\"dd19UC\");\n           window.letsPlotCall(function() {{\n               LetsPlot.buildPlotFromProcessedSpecs(plotSpec, -1, -1, plotContainer);\n           }});\n       })();    \n   </script>\n```\n\nAverage and median Scoville Units across the Hot Ones' seasons\n:::\n:::\n\n\nThere seems to be a shift during the season 3-5 period as can be seen in @fig-fig1. Both indicators ‚Äì *mean* and *median* Scoville Units ‚Äì show a consistent upward trend over this time frame and later on they stabilize.\n\nWhat about the overall spread of the data? ü§î\n\n::: {.cell tags='[]' execution_count=6}\n``` {.python .cell-code}\n(sauces\n .loc[:, ['season', 'scoville']]\n .pipe(lambda df: (ggplot(df, aes('season', 'scoville'))\n                   + geom_boxplot()\n                   + scale_y_log10()\n                   + labs(x='Seasons',\n                          y='log(Scoville Units)'\n                         )\n                   + theme(plot_title=element_text(size=20,face='bold'))\n                   + ggsize(1000,600)\n                  )\n      )\n)\n```\n\n::: {#fig-fig2 .cell-output .cell-output-display execution_count=6}\n```{=html}\n   <div id=\"HZGvhm\"></div>\n   <script type=\"text/javascript\" data-lets-plot-script=\"plot\">\n       (function() {\n           var plotSpec={\n\"data\":{\n},\n\"mapping\":{\n\"x\":\"season\",\n\"y\":\"scoville\"\n},\n\"data_meta\":{\n},\n\"theme\":{\n\"plot_title\":{\n\"face\":\"bold\",\n\"size\":20.0,\n\"blank\":false\n}\n},\n\"ggsize\":{\n\"width\":1000.0,\n\"height\":600.0\n},\n\"kind\":\"plot\",\n\"scales\":[{\n\"aesthetic\":\"y\",\n\"trans\":\"log10\"\n},{\n\"name\":\"Seasons\",\n\"aesthetic\":\"x\"\n},{\n\"name\":\"log(Scoville Units)\",\n\"aesthetic\":\"y\"\n}],\n\"layers\":[{\n\"geom\":\"boxplot\",\n\"mapping\":{\n},\n\"data_meta\":{\n},\n\"data\":{\n\"..middle..\":[NaN,16364.595931461334,23030.414672775627,20899.76076418103,18099.72375479805,42332.02097703347,50556.898639058134,44497.190922574,46861.49805543996,48744.23042781571,NaN,63277.16807822556,NaN,60216.27686929843,NaN,59396.969619670046,NaN,NaN,56868.268832451795,NaN,NaN,58146.36704042653,NaN,NaN,62928.530890209135,NaN,NaN,61798.058221921565,NaN,NaN,58983.04841223448,NaN,NaN,64265.07605223855,NaN,NaN,56338.26408401317,NaN,NaN,51497.572758334994,NaN,NaN,58983.04841223448],\n\"..lower..\":[NaN,8335.466393669883,8675.82849069758,9003.3327162779,6708.203932499375,9262.828941527518,13416.40786499875,13332.291625973387,14921.125962875583,17348.77517290485,NaN,20957.099035887593,NaN,23002.173810316286,NaN,21990.9072118455,NaN,NaN,24677.92535850613,NaN,NaN,25514.701644346154,NaN,NaN,24372.115213907917,NaN,NaN,22847.319317591726,NaN,NaN,24744.69640145141,NaN,NaN,24445.858544955998,NaN,NaN,22616.365755797244,NaN,NaN,23237.900077244507,NaN,NaN,23785.49978453262],\n\"..upper..\":[NaN,41352.1462562707,74198.11318355738,116447.413024077,116447.413024077,105447.61732727774,115863.71304252256,123236.35827141276,125417.70209982333,118753.52626343344,NaN,125417.70209982333,NaN,126494.2686448677,NaN,128092.15432648467,NaN,NaN,109856.26973459436,NaN,NaN,115863.71304252256,NaN,NaN,117028.20172932674,NaN,NaN,126494.2686448677,NaN,NaN,121574.66841410693,NaN,NaN,115863.71304252256,NaN,NaN,118181.21678168661,NaN,NaN,117028.20172932674,NaN,NaN,118181.21678168661],\n\"..ymin..\":[NaN,3600.000000000001,2199.9999999999995,2199.9999999999995,2100.0,449.99999999999955,599.9999999999994,1800.0000000000005,1800.0000000000005,1800.0000000000005,NaN,1800.0000000000005,NaN,1800.0000000000005,NaN,1700.0000000000002,NaN,NaN,4200.0,NaN,NaN,3899.9999999999977,NaN,NaN,4000.0,NaN,NaN,6200.000000000001,NaN,NaN,6999.999999999998,NaN,NaN,5499.999999999996,NaN,NaN,4000.0,NaN,NaN,6200.000000000001,NaN,NaN,5999.999999999999],\n\"..ymax..\":[NaN,357000.00000000023,549999.9999999999,549999.9999999999,1999999.9999999998,1999999.9999999998,1999999.9999999998,1999999.9999999998,1999999.9999999998,1999999.9999999998,NaN,669000.0000000007,NaN,681999.9999999994,NaN,664999.9999999994,NaN,NaN,669000.0000000007,NaN,NaN,675999.9999999995,NaN,NaN,648999.9999999993,NaN,NaN,698999.9999999997,NaN,NaN,701999.9999999992,NaN,NaN,666000.0000000005,NaN,NaN,641999.9999999998,NaN,NaN,638000.0000000007,NaN,NaN,641000.0000000009],\n\"season\":[1.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,10.0,11.0,11.0,12.0,12.0,13.0,13.0,13.0,14.0,14.0,14.0,15.0,15.0,15.0,16.0,16.0,16.0,17.0,17.0,17.0,18.0,18.0,18.0,19.0,19.0,19.0,20.0,20.0,20.0,21.0,21.0,21.0],\n\"scoville\":[747.0000000000002,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,1999999.9999999998,NaN,1999999.9999999998,NaN,1999999.9999999998,NaN,1700.0000000000002,1999999.9999999998,NaN,1800.0000000000005,1999999.9999999998,NaN,1800.0000000000005,1999999.9999999998,NaN,1700.0000000000002,1999999.9999999998,NaN,1800.0000000000005,1999999.9999999998,NaN,1800.0000000000005,1999999.9999999998,NaN,1599.9999999999986,1999999.9999999998,NaN,1599.9999999999986,1999999.9999999998,NaN,1599.9999999999986,1999999.9999999998,NaN]\n}\n}],\n\"metainfo_list\":[]\n};\n           var plotContainer = document.getElementById(\"HZGvhm\");\n           window.letsPlotCall(function() {{\n               LetsPlot.buildPlotFromProcessedSpecs(plotSpec, -1, -1, plotContainer);\n           }});\n       })();    \n   </script>\n```\n\nSpread of Scoville Units across the Hot Ones' seasons\n:::\n:::\n\n\nHere are some observations: Season 5 exhibits the widest range, featuring sauces with Scoville Units spanning from 450 to 2,000,000. In addition, starting from season 6 onwards, the *averages*, *medians*, and *ranges* of Scoville Units appear to even out.\n\n## Has every individual successfully completed all the episodes?\n\nTo answer this question we will use the `episodes` dataframe. Keep in mind there are 300 episodes in this dataframe. The `finished` column can be useful here. Just by looking for entries where `finished == False` we will have our answer.\n\n::: {.cell tags='[]' execution_count=7}\n``` {.python .cell-code}\n(episodes\n .query(\"finished==False\")\n [['season', 'guest', 'guest_appearance_number']]\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>guest</th>\n      <th>guest_appearance_number</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Tony Yayo</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>1</td>\n      <td>DJ Khaled</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>2</td>\n      <td>Mike Epps</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>2</td>\n      <td>Jim Gaffigan</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>2</td>\n      <td>Rob Corddry</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>3</td>\n      <td>Ricky Gervais</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>90</th>\n      <td>4</td>\n      <td>Mario Batali</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>5</td>\n      <td>Taraji P. Henson</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>129</th>\n      <td>7</td>\n      <td>Lil Yachty</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>130</th>\n      <td>7</td>\n      <td>E-40</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>144</th>\n      <td>8</td>\n      <td>Shaq</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>171</th>\n      <td>10</td>\n      <td>Chance the Rapper</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>185</th>\n      <td>12</td>\n      <td>Eric Andr√©</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>218</th>\n      <td>15</td>\n      <td>Quavo</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>251</th>\n      <td>17</td>\n      <td>Pusha T</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nTaking a closer look, it seems that around 15 participants didn't make it through the entire Hot Ones interview challenge.Not bad out of 300 shows. And guess what? Eric Andr√© popped up on the show not just once, but twice! Now, the big question: did he conquer the hot seat in at least one of those interviews? Let's plot the data to make it more visual...\n\n::: {.cell tags='[]' execution_count=8}\n``` {.python .cell-code}\n(episodes\n .query(\"finished==False\")\n .groupby('season')\n .finished\n .count()\n .to_frame()\n .reset_index()\n .pipe(lambda df: (ggplot(df, aes('season', 'finished'))\n                   + geom_bar(stat='identity')\n                   + labs(x='Seasons',\n                          y='Number of incomplete interviews'\n                         )\n                   + theme(plot_title=element_text(size=20,face='bold'))\n                   + ggsize(600,400)\n                  )\n      )\n\n)\n```\n\n::: {#fig-fig3 .cell-output .cell-output-display execution_count=8}\n```{=html}\n   <div id=\"JWott3\"></div>\n   <script type=\"text/javascript\" data-lets-plot-script=\"plot\">\n       (function() {\n           var plotSpec={\n\"data\":{\n\"season\":[1.0,2.0,3.0,4.0,5.0,7.0,8.0,10.0,12.0,15.0,17.0],\n\"finished\":[2.0,3.0,1.0,1.0,1.0,2.0,1.0,1.0,1.0,1.0,1.0]\n},\n\"mapping\":{\n\"x\":\"season\",\n\"y\":\"finished\"\n},\n\"data_meta\":{\n},\n\"theme\":{\n\"plot_title\":{\n\"face\":\"bold\",\n\"size\":20.0,\n\"blank\":false\n}\n},\n\"ggsize\":{\n\"width\":600.0,\n\"height\":400.0\n},\n\"kind\":\"plot\",\n\"scales\":[{\n\"name\":\"Seasons\",\n\"aesthetic\":\"x\"\n},{\n\"name\":\"Number of incomplete interviews\",\n\"aesthetic\":\"y\"\n}],\n\"layers\":[{\n\"geom\":\"bar\",\n\"stat\":\"identity\",\n\"mapping\":{\n},\n\"data_meta\":{\n},\n\"data\":{\n}\n}],\n\"metainfo_list\":[]\n};\n           var plotContainer = document.getElementById(\"JWott3\");\n           window.letsPlotCall(function() {{\n               LetsPlot.buildPlotFromProcessedSpecs(plotSpec, -1, -1, plotContainer);\n           }});\n       })();    \n   </script>\n```\n\nNumber of incomplete interviews per season\n:::\n:::\n\n\nInterestingly, a majority of these incomplete interviews belong to season 2 (@fig-fig3). This fact is quite surprising, especially when you consider that the maximum Scoville value for that season was only 550,000 ‚Äì nearly a quarter of the following year's value, where only one person faced difficulty finishing the challenge.\n\n![](https://thumbs.gfycat.com/DishonestPoorBluebreastedkookaburra-max-1mb.gif){fig-align=\"center\"}\n\n## What is the completion rate per season?\n\nTo get to the bottom of this question, let's start by figuring out how many episodes were in each season. We can grab this info from the season dataset. Just a heads-up, in season 9 they seem to threw in an extra episode. So, keep this in mind! Otherwise, you might end up with percentages that go beyond 100%. \n\n::: {.cell tags='[]' execution_count=9}\n``` {.python .cell-code}\n# First we need to find out the total number of episodes per season\n\nepisodes_per_season = (season\n                       [['season', 'episodes', 'note']]\n                       .set_index('season')\n                       # we need to extract the one extra episode in season 9\n                       .assign(note=lambda df: df.note\n                               .str.extract(r'([0-9.]+)')\n                               .astype(float),\n                        # add the two column together\n                               episodes=lambda df: df.episodes\n                               .add(df.note, fill_value=0)\n                              )\n                       .drop(columns='note')\n                       .squeeze()\n                      )\n```\n:::\n\n\n::: {.cell tags='[]' execution_count=10}\n``` {.python .cell-code}\ncompletion_rate = (episodes\n                   .query(\"finished==True\")\n                   .groupby('season')\n                   .finished\n                   .sum()\n                   .div(episodes_per_season)\n                   .mul(100)\n                   .to_frame().reset_index()\n                   .rename(columns={0:'completion_rate'})\n                  )\n                   \n(completion_rate                  \n .pipe(lambda df: (ggplot(df, aes('season', 'completion_rate'))\n                   + geom_line(stat='identity')\n                   + labs(x='Seasons',\n                          y='% successful participants'\n                         )\n                   + theme(plot_title=element_text(size=20,face='bold'))\n                   + ggsize(600,400)\n                  )\n      )\n)\n```\n\n::: {#fig-fig4 .cell-output .cell-output-display execution_count=10}\n```{=html}\n   <div id=\"DrdaIZ\"></div>\n   <script type=\"text/javascript\" data-lets-plot-script=\"plot\">\n       (function() {\n           var plotSpec={\n\"data\":{\n\"season\":[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,21.0],\n\"completion_rate\":[75.0,92.5,95.83333333333334,95.83333333333334,93.75,100.0,83.33333333333334,91.66666666666666,100.0,91.66666666666666,100.0,90.0,100.0,100.0,91.66666666666666,100.0,91.66666666666666,100.0,100.0,100.0,null]\n},\n\"mapping\":{\n\"x\":\"season\",\n\"y\":\"completion_rate\"\n},\n\"data_meta\":{\n},\n\"theme\":{\n\"plot_title\":{\n\"face\":\"bold\",\n\"size\":20.0,\n\"blank\":false\n}\n},\n\"ggsize\":{\n\"width\":600.0,\n\"height\":400.0\n},\n\"kind\":\"plot\",\n\"scales\":[{\n\"name\":\"Seasons\",\n\"aesthetic\":\"x\"\n},{\n\"name\":\"% successful participants\",\n\"aesthetic\":\"y\"\n}],\n\"layers\":[{\n\"geom\":\"line\",\n\"stat\":\"identity\",\n\"mapping\":{\n},\n\"data_meta\":{\n},\n\"data\":{\n}\n}],\n\"metainfo_list\":[]\n};\n           var plotContainer = document.getElementById(\"DrdaIZ\");\n           window.letsPlotCall(function() {{\n               LetsPlot.buildPlotFromProcessedSpecs(plotSpec, -1, -1, plotContainer);\n           }});\n       })();    \n   </script>\n```\n\nCompletion rate per season\n:::\n:::\n\n\nTaking a peek at @fig-fig4, it seems like the normalized completion rate hits its lowest point in season 1, closely followed by season 7. However, even in those seasons, the rate remains surprisingly high.\n\n## Is there a correlation between Scoville Units and completion rate?\n\n\nHere's a curious thought: could there be a link between Scoville Units and the completion rate? I'm just wondering if the spiciness level affects how well participants handle the challenge. Exploring this connection might add a spicy twist to the Hot Ones experience ‚Äì let's see where the data takes us!\n\n::: {.cell tags='[]' execution_count=11}\n``` {.python .cell-code}\n# AVG_scoville code comes from a code snippet \n# 'What differences can be observed in the spiciness \n# of sauces as we look across the various seasons?'\n\nAVG_scoville = (sauces\n                .groupby('season')\n                .agg(AVG_scoville=('scoville', 'mean'))\n                .squeeze()\n               )\n\n# Let's calculate the Pearson correlation coefficient. We have to discard the last value\n# as the completion rate is not defined for that\n\nstats.pearsonr(AVG_scoville.values[:-1],completion_rate.completion_rate.values[:-1])\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nPearsonRResult(statistic=0.5039021286250108, pvalue=0.02349225734224539)\n```\n:::\n:::\n\n\nThe Pearson correlation coefficient has its say: there's actually a moderate positive correlation(0.5, *p*<0.05) between Scoville Units and completion rate. Quite intriguing, isn't it? Honestly, I was expecting the opposite outcome myself! It seems like the higher the average spiciness, the more determined the guests become. Take a look at @fig-fig5.\n\n::: {.cell tags='[]' execution_count=12}\n``` {.python .cell-code}\n(pd.concat([AVG_scoville,completion_rate],axis=1)\n .rename(columns={0:'success_rate'})\n .pipe(lambda df: (ggplot(df, aes('AVG_scoville', 'completion_rate'))\n                   + geom_point(size=5, alpha=0.5)\n                   + geom_smooth()\n                   + labs(x='Average Scoville units',\n                          y='% successful participants'\n                         )\n                   + theme(plot_title=element_text(size=20,face='bold'))\n                   + ggsize(600,400)\n                  )\n      )\n)\n```\n\n::: {#fig-fig5 .cell-output .cell-output-display execution_count=12}\n```{=html}\n   <div id=\"dJqn8i\"></div>\n   <script type=\"text/javascript\" data-lets-plot-script=\"plot\">\n       (function() {\n           var plotSpec={\n\"data\":{\n\"AVG_scoville\":[67973.7,115679.0,121219.0,284130.0,332770.0,292770.0,299790.0,306580.0,307580.0,310240.0,311590.0,309930.0,307200.0,309180.0,306940.0,313500.0,313010.0,308950.0,304970.0,304040.0,305920.0,null],\n\"completion_rate\":[92.5,95.83333333333334,95.83333333333334,93.75,100.0,83.33333333333334,91.66666666666666,100.0,91.66666666666666,100.0,90.0,100.0,100.0,91.66666666666666,100.0,91.66666666666666,100.0,100.0,100.0,null,null,75.0]\n},\n\"mapping\":{\n\"x\":\"AVG_scoville\",\n\"y\":\"completion_rate\"\n},\n\"data_meta\":{\n},\n\"theme\":{\n\"plot_title\":{\n\"face\":\"bold\",\n\"size\":20.0,\n\"blank\":false\n}\n},\n\"ggsize\":{\n\"width\":600.0,\n\"height\":400.0\n},\n\"kind\":\"plot\",\n\"scales\":[{\n\"name\":\"Average Scoville units\",\n\"aesthetic\":\"x\"\n},{\n\"name\":\"% successful participants\",\n\"aesthetic\":\"y\"\n}],\n\"layers\":[{\n\"geom\":\"point\",\n\"mapping\":{\n},\n\"data_meta\":{\n},\n\"size\":5.0,\n\"alpha\":0.5,\n\"data\":{\n}\n},{\n\"geom\":\"smooth\",\n\"mapping\":{\n},\n\"data_meta\":{\n},\n\"data\":{\n\"..ymin..\":[86.7373249898261,86.86857178493213,86.99961789777208,87.13045438640329,87.26107179029484,87.39146009386177,87.52160868704539,87.65150632267674,87.78114107033548,87.91050026639047,88.03957045987897,88.16833735385138,88.29678574177373,88.42489943854598,88.55266120565433,88.68005266993691,88.8070542353986,88.93364498746759,89.05980258904071,89.1855031676192,89.31072119279223,89.43542934328349,89.55959836273847,89.68319690339999,89.80619135679997,89.92854567059224,90.0502211506682,90.17117624774461,90.29136632769797,90.41074342505539,90.52925597925338,90.64684855355858,90.76346153693271,90.87903082964057,90.99348751407736,91.10675751316042,91.21876123973294,91.32941324179953,91.43862185010127,91.54628883657662,91.65230909467809,91.75657035533483,91.85895295556185,91.95932968026176,92.05756570153943,92.15351864366612,92.24703880540082,92.3379695742991,92.42614806937436,92.5114060483581,92.5935711130597,92.67246824014286,92.74792165425961,92.81975704538414,92.88780411224556,92.95189938947809,93.01188928880583,93.06763325648281,93.11900692338263,93.165905104205,93.20824449191541,93.24596589580594,93.27903588814114,93.3074477549744,93.33122168894397,93.35040421127071,93.36506686109666,93.37530423675992,93.38123151044158,93.38298156136239,93.38070188200318,93.37455140744963,93.36469740236618,93.35131251674642,93.33457209419333,93.31465178845086,93.29172551790255,93.2659637655388,93.23753221436283,93.20659069552303],\n\"..ymax..\":[100.68157932806156,100.61415121746487,100.54692378913427,100.4799059850124,100.41310726563017,100.34653764657257,100.28020773789828,100.21412878677629,100.14831272362687,100.08277221208121,100.01752070310204,99.95257249363898,99.88794279022596,99.82364777796305,99.75970469536402,99.69613191559077,99.63294903463844,99.57017696707878,99.50783805001498,99.44595615594582,99.38455681528215,99.32366734930022,99.26331701435457,99.20353715820238,99.14436138931173,99.08582576002881,99.02796896446219,98.9708325518951,98.91446115645107,98.85890274360301,98.80420887391435,98.75043498411847,98.69764068525367,98.64589007705514,98.59525207712771,98.54580076255398,98.49761572049078,98.45078240293353,98.40539247914114,98.36154417717512,98.31934260358298,98.27890002743557,98.24033611171788,98.20377807152732,98.16936073475898,98.13722647714162,98.10752499991625,98.08041291552733,98.05605310496139,98.03461381048699,98.01626743029472,98.00118898772091,97.98955425811349,97.98153755149829,97.9773091691462,97.977032576423,97.98086136160461,97.98893607843696,98.00138109604647,98.01830159973343,98.03978089653238,98.06587817715118,98.0966268693253,98.13203368700137,98.17207843754113,98.21671459972374,98.26587063440712,98.3194519432532,98.37734335408086,98.43941198766942,98.50551035153795,98.57547951060083,98.64915220019361,98.7263557703227,98.80691487738514,98.89065386763694,98.97739882269458,99.06697925956766,99.15922949525299,99.25398969860211],\n\"AVG_scoville\":[67973.7,71325.55189873418,74677.40379746835,78029.25569620253,81381.10759493671,84732.95949367087,88084.81139240506,91436.66329113924,94788.51518987342,98140.3670886076,101492.21898734177,104844.07088607595,108195.92278481013,111547.7746835443,114899.62658227848,118251.47848101266,121603.33037974683,124955.182278481,128307.03417721519,131658.88607594935,135010.73797468352,138362.58987341772,141714.4417721519,145066.29367088608,148418.14556962025,151769.9974683544,155121.8493670886,158473.70126582278,161825.55316455697,165177.40506329114,168529.2569620253,171881.10886075947,175232.96075949367,178584.81265822786,181936.66455696203,185288.5164556962,188640.36835443036,191992.22025316456,195344.07215189873,198695.92405063292,202047.7759493671,205399.62784810126,208751.47974683542,212103.3316455696,215455.1835443038,218807.03544303798,222158.88734177215,225510.73924050631,228862.59113924048,232214.4430379747,235566.29493670887,238918.14683544304,242269.9987341772,245621.85063291137,248973.70253164554,252325.55443037977,255677.40632911393,259029.2582278481,262381.11012658227,265732.96202531643,269084.81392405066,272436.6658227848,275788.517721519,279140.36962025316,282492.2215189873,285844.0734177215,289195.9253164557,292547.7772151899,295899.62911392405,299251.4810126582,302603.3329113924,305955.1848101266,309307.0367088608,312658.88860759494,316010.7405063291,319362.5924050633,322714.44430379744,326066.29620253167,329418.14810126583,332770.0],\n\"completion_rate\":[93.70945215894383,93.7413615011985,93.77327084345318,93.80518018570784,93.8370895279625,93.86899887021717,93.90090821247183,93.93281755472651,93.96472689698118,93.99663623923584,94.0285455814905,94.06045492374518,94.09236426599985,94.12427360825451,94.15618295050918,94.18809229276384,94.22000163501852,94.25191097727318,94.28382031952785,94.31572966178251,94.34763900403719,94.37954834629186,94.41145768854652,94.44336703080118,94.47527637305585,94.50718571531053,94.53909505756519,94.57100439981986,94.60291374207452,94.6348230843292,94.66673242658386,94.69864176883853,94.73055111109319,94.76246045334786,94.79436979560253,94.8262791378572,94.85818848011186,94.89009782236653,94.9220071646212,94.95391650687587,94.98582584913053,95.0177351913852,95.04964453363986,95.08155387589454,95.1134632181492,95.14537256040387,95.17728190265854,95.20919124491321,95.24110058716788,95.27300992942254,95.3049192716772,95.33682861393189,95.36873795618655,95.40064729844121,95.43255664069588,95.46446598295054,95.49637532520522,95.52828466745989,95.56019400971455,95.59210335196921,95.6240126942239,95.65592203647856,95.68783137873322,95.71974072098789,95.75165006324255,95.78355940549723,95.8154687477519,95.84737809000656,95.87928743226122,95.9111967745159,95.94310611677056,95.97501545902523,96.0069248012799,96.03883414353456,96.07074348578924,96.1026528280439,96.13456217029857,96.16647151255323,96.19838085480791,96.23029019706257]\n}\n}],\n\"metainfo_list\":[]\n};\n           var plotContainer = document.getElementById(\"dJqn8i\");\n           window.letsPlotCall(function() {{\n               LetsPlot.buildPlotFromProcessedSpecs(plotSpec, -1, -1, plotContainer);\n           }});\n       })();    \n   </script>\n```\n\nCorrelation between Average Scoville units and Completion rates\n:::\n:::\n\n\n## Are there any returning guests?\n\nHas there been a brave soul who dared to make a return to the show for a second time? The column `guest_appearance_number` holds the answers you're looking for.\n\n::: {.cell tags='[]' execution_count=13}\n``` {.python .cell-code}\n(episodes\n .query(\"guest_appearance_number > 1\")\n [['guest','season', 'episode_season', 'finished']]\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>guest</th>\n      <th>season</th>\n      <th>episode_season</th>\n      <th>finished</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>124</th>\n      <td>Eddie Huang</td>\n      <td>6</td>\n      <td>13</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>161</th>\n      <td>Jay Pharoah</td>\n      <td>9</td>\n      <td>999</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>183</th>\n      <td>Tom Segura</td>\n      <td>12</td>\n      <td>1</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>185</th>\n      <td>Eric Andr√©</td>\n      <td>12</td>\n      <td>3</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>188</th>\n      <td>T-Pain</td>\n      <td>12</td>\n      <td>6</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>189</th>\n      <td>Adam Richman</td>\n      <td>12</td>\n      <td>7</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>190</th>\n      <td>Action Bronson</td>\n      <td>12</td>\n      <td>8</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>203</th>\n      <td>NaN</td>\n      <td>13</td>\n      <td>11</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>214</th>\n      <td>Russell Brand</td>\n      <td>14</td>\n      <td>11</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>215</th>\n      <td>Steve-O</td>\n      <td>14</td>\n      <td>12</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>241</th>\n      <td>Gordon Ramsay</td>\n      <td>16</td>\n      <td>14</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>254</th>\n      <td>Post Malone</td>\n      <td>18</td>\n      <td>1</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIt looks like a total of 12 individuals have taken on the challenge not once, but twice.  Hats off to their courage! üé©\n\n# Final words\n\nAnd there you have it, folks ‚Äì that's a wrap! I hope you enjoyed exploring the Hot Ones dataset with me. Rest assured, more of these analyses are in the pipeline for the future. Stay tuned for what's to come!\n\n",
    "supporting": [
      "2023_08_08_HotOnes_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}