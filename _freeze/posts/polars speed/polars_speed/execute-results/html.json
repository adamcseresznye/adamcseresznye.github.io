{
  "hash": "71fddc5453046da74d27383db638c8e1",
  "result": {
    "markdown": "---\ntitle: 'The Ultimate Speed Test: Pandas vs Polars '\nauthor: Adam Cseresznye\ndate: '2023-08-13'\ncategories:\n  - Polars\n  - Pandas\ntoc: true\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n---\n\n\n![](hans-jurgen-mager-qQWV91TTBrE-unsplash.jpg){fig-align=\"center\" width=50%}\n\nOnce I shared my first article about [\"Getting Started with Polars\"](https://adamcseresznye.github.io/blog/posts/polars/Polars_revised.html) I started thinking about something exciting: comparing the speed of Polars and Pandas. This curiosity was sparked by all the buzz around the brand-new [Pandas 2.0 release](https://pandas.pydata.org/docs/dev/whatsnew/v2.0.0.html), promising lightning-fast performance. Pandas 2.0 was announced to come packed with cool features, including the addition of Apache Arrow (pyarrow) as its backing memory format. The big perk of Apache Arrow is that it makes operations speedier and more memory-friendly. Naturally, this got me wondering: how does Pandas 2.0 measure up against Polars? Let's dive in and find out!\n\n::: {.callout-warning}\n\nKeep in mind: occasionally, I refer to some performance difference figures. Even though I repeated these experiments 100 times each, because computations can have a bit of randomness, there might be slight variations in the exact numbers.\n\n:::\n\n# Setup\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport polars as pl\nimport polars.selectors as cs\n\nimport numpy as np\nimport timeit\nimport random\n\nimport plotly.io as pio\nimport plotly.express as px\n\npio.templates.default = \"presentation\"\n\nprint(pd.__version__)\nprint(pl.__version__)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.0.3\n0.18.11\n```\n:::\n:::\n\n\n::: {.callout-note}\n\nThroughout this article, we'll be working with the latest versions of the packages: Pandas 2.0.3 and Polars 0.18.11.\n\n:::\n\n# Generate the synthetic data\n\nFor the purpose of benchmarking, we're going to create our own dataset. To ensure simplicity and uniformity, we'll generate a dataframe containing columns like name, year of birth, and city of residence – pretty straightforward stuff. We're aiming for a dataset of 10,000 rows. While we could certainly run this benchmark on a dataframe with more than a million rows, our intention is to provide a realistic example. The code we'll provide allows you to effortlessly explore various scenarios according to your requirements. Feel free to use it or modify it if you want to perform your own test.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef create_sample_dataframe(n_rows: int, name: str, seed: int = 42) -> pl.DataFrame:\n    \"\"\"\n    Create a sample Polars DataFrame with the specified number of rows.\n\n    This function generates random data for several columns and creates a Polars\n    DataFrame with the specified number of rows. The generated data includes information\n    about names, birth years, cities, zip codes, incomes, marital status, number of children,\n    and car brands. The resulting DataFrame is written to CSV and Parquet files named\n    'sample.csv' and '{name}.parquet', respectively.\n\n    Parameters\n    ----------\n    n_rows : int\n        The number of rows to generate in the sample DataFrame.\n    name : str\n        The name to be used when writing the Parquet file.\n    seed : int, optional\n        The seed to use when generating random data. Default is 42.\n\n    Returns\n    -------\n    pl.DataFrame\n        The first 5 rows of the generated sample DataFrame.\n    \"\"\"\n    random.seed(seed)\n    np.random.seed(seed)\n\n    data = {\n        \"name\": np.random.choice([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eva\"], n_rows),\n        \"born\": np.random.randint(1950, 1990, size=n_rows),\n        \"city\": np.random.choice(\n            [\"Shanghai\", \"San Francisco\", \"London\", \"Munich\", \"Mumbai\"], n_rows\n        ),\n        \"zip_code\": np.random.randint(10000, 99999, size=n_rows),\n        \"income\": np.random.normal(50000, 10000, size=n_rows),\n        \"is_married\": np.random.choice([True, False], n_rows),\n        \"children\": np.random.randint(0, 5, size=n_rows),\n        \"car\": np.random.choice([\"Ford\", \"BMW\", \"Toyota\", \"Bentley\", \"Mini\"], n_rows),\n    }\n    temp_df = pl.DataFrame(data)\n    temp_df.write_csv(\"sample.csv\")\n    temp_df.write_parquet(f\"{name}.parquet\")\n    return temp_df.head()\n\n\ncreate_sample_dataframe(n_rows=10_000, name=\"sample\", seed=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (5, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>born</th><th>city</th><th>zip_code</th><th>income</th><th>is_married</th><th>children</th><th>car</th></tr><tr><td>str</td><td>i32</td><td>str</td><td>i32</td><td>f64</td><td>bool</td><td>i32</td><td>str</td></tr></thead><tbody><tr><td>&quot;David&quot;</td><td>1953</td><td>&quot;Shanghai&quot;</td><td>35716</td><td>69693.044244</td><td>false</td><td>4</td><td>&quot;Bentley&quot;</td></tr><tr><td>&quot;Eva&quot;</td><td>1984</td><td>&quot;London&quot;</td><td>30931</td><td>30547.027839</td><td>true</td><td>1</td><td>&quot;Toyota&quot;</td></tr><tr><td>&quot;Alice&quot;</td><td>1979</td><td>&quot;San Francisco&quot;</td><td>85967</td><td>63489.882712</td><td>false</td><td>1</td><td>&quot;Mini&quot;</td></tr><tr><td>&quot;Bob&quot;</td><td>1969</td><td>&quot;San Francisco&quot;</td><td>64527</td><td>56030.692112</td><td>false</td><td>1</td><td>&quot;Toyota&quot;</td></tr><tr><td>&quot;David&quot;</td><td>1979</td><td>&quot;Munich&quot;</td><td>53316</td><td>51118.005552</td><td>true</td><td>3</td><td>&quot;Ford&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n# Define helper class\n\nIn order to streamline our code, we'll create a convenient helper class featuring two essential methods: `get_time` and `get_figure`. The `get_time` method leverages the `timeit.repeat` function to accurately gauge the execution time of our code. In this context, we'll set the parameters `number = 1` and `repeat = 100`. This configuration runs the operations 100 times, allowing us to derive key statistics like the mean, median, and standard deviation. \n\nOn the other hand, the `get_figure` method takes these gathered results and generates a visually appealing image using Plotly. \n\nTo bring it all together and keep things simple, we've designed the `run_test` function. This function orchestrates the entire process, seamlessly merging the steps outlined above.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nclass Timeit:\n    \"\"\"\n    A class for measuring the execution time of multiple functions.\n    This class provides methods for measuring the execution time of\n    multiple functions using the `timeit` module. The functions to be\n    tested are passed to the constructor as a dictionary, where the\n    keys are the names of the functions and the values are the functions\n    themselves. The `number` and `repeat` parameters control how many times\n    each function is executed and how many times the timing is repeated,\n    respectively.\n\n    The `get_time` method measures the execution time of each function and\n    stores the results in a dictionary, where the keys are the names of\n    the functions and the values are lists of execution times. The `get_figure`\n    method generates a box plot of the execution times using the `plotly.express.box`\n    function.\n\n    Parameters\n    ----------\n    func_dict : dict\n        A dictionary of functions to test, where the keys are the names of the\n        functions and the values are the functions themselves.\n    number : int, optional\n        The number of times to execute each function in each timing run (default is 1).\n    repeat : int, optional\n        The number of times to repeat each timing run (default is 20).\n\n    Attributes\n    ----------\n    results : dict or None\n        A dictionary of execution times for each function, where the keys are the names\n        of the functions and the values are lists of execution times. This attribute is\n        `None` until `get_time` is called.\n\n    Methods\n    -------\n    get_time()\n        Measure the execution time of each function and store the results in the `results` attribute.\n    get_figure()\n        Generate a box plot of the execution times using `plotly.express.box`.\n    \"\"\"\n\n    def __init__(self, func_dict, number=1, repeat=100):\n        self.func_dict = func_dict\n        self.number = number\n        self.repeat = repeat\n        self.results = None\n\n    def get_time(self):\n        \"\"\"\n        Measure the execution time of each function and store the results.\n        This method uses the `timeit.repeat` function to measure the execution time of each function\n        in `func_dict`. The results are stored in a dictionary, where the keys are the names of\n        the functions and the values are lists of execution times. This dictionary is also stored\n        in the `results` attribute of the `Timeit` object.\n\n        Returns\n        -------\n        dict\n            A dictionary of execution times for each function.\n        \"\"\"\n        results = {}\n        for k, v in self.func_dict.items():\n            results[k] = timeit.repeat(v, number=self.number, repeat=self.repeat)\n        self.results = results\n        return results\n\n    def get_figure(self):\n        \"\"\"\n        Generate a box plot of the execution times.\n        This method uses `plotly.express.box` to generate a box plot of the execution times\n        stored in `results`.If `results` is `None`, this method raises a `ValueError`.\n\n        Returns\n        -------\n        plotly.graph_objs.Figure\n            A box plot figure object.\n\n        Raises\n        ------\n        ValueError\n            If no results are available (i.e., if `get_time` has not been called).\n        \"\"\"\n        if self.results is None:\n            raise ValueError(\"No results available. Please run get_time first.\")\n        df = pd.DataFrame(self.results)\n        mean_times = df.median() * 1000\n        title = f'Median Execution Times: <br><sup>{\", \".join([f\"{k}={v:.6f}ms\" for k,v in mean_times.items()])}</sup>'\n        return px.box(\n            df,\n            points=\"all\",\n            labels={\"value\": \"time (sec)\", \"variable\": \"\"},\n            title=title,\n            width=600,\n            height=500,\n        )\n\n\ndef run_test(test: dict, name: str):\n    \"\"\"\n    Run a timing test on a dictionary of functions using the Timeit class and\n    return the results as a DataFrame.\n\n    This function takes a dictionary of functions as input, where the keys are\n    the names of the functions and the values are the functions themselves. It creates\n    a Timeit object with this dictionary and uses it to measure the execution time of\n    each function. The results are then displayed as a box plot using the `get_figure`\n    method of the Timeit object and returned as a Pandas DataFrame with columns renamed\n    according to the `name` argument.\n\n    Parameters\n    ----------\n    test : dict\n        A dictionary of functions to test, where the keys are the names of the functions\n        and the values are the functions themselves.\n    name : str\n        A string used to rename the columns of the returned DataFrame.\n\n    Returns\n    -------\n    pd.DataFrame\n        A DataFrame containing the results of the timing test, with columns renamed\n        according to the `name` argument.\n    \"\"\"\n\n    # Create a Timeit object\n    t = Timeit(test)\n    # Measure the execution time of the functions\n    results = t.get_time()\n    # Generate a box plot of the execution times\n    fig = t.get_figure()\n    fig.show()\n\n    return pd.DataFrame(results).rename(\n        columns={\"Pandas\": f\"{name}_pandas\", \"Polars\": f\"{name}_polars\"}\n    )\n```\n:::\n\n\n# Reading in data From a CSV File and parquet\n\n## CSV\n\nReading CSV files from disk is a task that data scientists often find themselves doing. Now, let's see how these two libraries compare for this particular job. To maximize the blazing-fast data handling capabilities of PyArrow, we'll equip Pandas with the `engine=\"pyarrow\"` and `dtype_backend=\"pyarrow\"` arguments. Let's see how these choices shape the performance!\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: pd.read_csv(\n        \"sample.csv\", engine=\"pyarrow\", dtype_backend=\"pyarrow\"\n    ),\n    \"Polars\": lambda: pl.read_csv(\"sample.csv\"),\n}\nread_csv = run_test(test_dict, \"Read csv\")\n```\n\n::: {#fig-fig1 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"e53ed73e-637c-489f-a9b8-2b1f2182a902\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"e53ed73e-637c-489f-a9b8-2b1f2182a902\")) {                    Plotly.newPlot(                        \"e53ed73e-637c-489f-a9b8-2b1f2182a902\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.02810729999328032,0.007584499981021509,0.007345899997744709,0.005958099995041266,0.00615159998415038,0.00668799999402836,0.006461600016336888,0.006121400016127154,0.006044699985068291,0.005787300004158169,0.0067266999976709485,0.0062077000038698316,0.006033799989381805,0.00570720000541769,0.005579799995757639,0.007062299991957843,0.005876500013982877,0.005881099990801886,0.0058012000226881355,0.006606699986150488,0.0066334000148344785,0.006075899989809841,0.00610719999531284,0.005735999991884455,0.006898100022226572,0.007133200007956475,0.006600100023206323,0.0066605999891180545,0.006962599989492446,0.005944000004092231,0.006574900005944073,0.00581229999079369,0.006977200013352558,0.005979399982606992,0.005853700014995411,0.005823299987241626,0.005187499977182597,0.005693499988410622,0.005962900002487004,0.006163700018078089,0.006417299999156967,0.005358800000976771,0.006037000013748184,0.005466300004627556,0.006264800002099946,0.005465499998535961,0.006334699981380254,0.005555900017498061,0.006196500005898997,0.005474000005051494,0.006014699989464134,0.0062840000027790666,0.0069386000104714185,0.006663600011961535,0.006548300007125363,0.0055228999990504235,0.006519199989270419,0.005941500014159828,0.006331200012937188,0.005646799982059747,0.0058031000080518425,0.005747400020482019,0.0058794000069610775,0.005779300001449883,0.006477399991126731,0.005652699997881427,0.005854499991983175,0.006369199982145801,0.0053422000200953335,0.00709389999974519,0.006570500001544133,0.006589299999177456,0.005056900001363829,0.006348800001433119,0.006807099998695776,0.005509200011147186,0.007399400026770309,0.007529199996497482,0.006881299981614575,0.0068826999922748655,0.006809899990912527,0.007077800022670999,0.006347299990011379,0.008198700001230463,0.007742099987808615,0.00586569998995401,0.005644399992888793,0.006629099982092157,0.006720700010191649,0.005840800004079938,0.005563300015637651,0.006152899994049221,0.005978400004096329,0.005863800004590303,0.006386499997461215,0.007223900000099093,0.006306499999482185,0.006411599984858185,0.006512100022519007,0.006452200002968311,0.005499799997778609,0.0030131999810691923,0.003575799986720085,0.0035337999870534986,0.003169000003254041,0.003335900022648275,0.0026177000254392624,0.0027017000247724354,0.002629700000397861,0.002600100007839501,0.0026030000008177012,0.003356000001076609,0.0030516000115312636,0.0031746999884489924,0.0028030000103171915,0.003639400005340576,0.0036041999992448837,0.0029129999747965485,0.0033035000087693334,0.0024301999947056174,0.002883800014387816,0.0033324999967589974,0.0024076999980024993,0.0027515000256244093,0.0024185999936889857,0.0031417999998666346,0.002635599987115711,0.0026633999950718135,0.0022336999827530235,0.0022558999771717936,0.002774299995508045,0.0025033999991137534,0.0029255000117700547,0.0029297999863047153,0.002723299985518679,0.002687299973331392,0.002509300014935434,0.0027969999937340617,0.0030444000149145722,0.002677900018170476,0.00250979998963885,0.0025374999968335032,0.0020588999905157834,0.002881200023693964,0.002407899999525398,0.0030297999910544604,0.0028485000075306743,0.0032473999890498817,0.0024338999937754124,0.0030399000097531825,0.0025695000076666474,0.003264700004365295,0.003458199993474409,0.0029861000075470656,0.003913799999281764,0.0028953999863006175,0.0029418999911285937,0.003338599984999746,0.002882500004488975,0.002682899998035282,0.0021274000173434615,0.002217700006440282,0.002150799991795793,0.002973299997393042,0.0027975999983027577,0.003471499978331849,0.0026120000111404806,0.00252320000436157,0.0030892999784555286,0.003589500003727153,0.0027104999753646553,0.00297949998639524,0.002252500009490177,0.0024317000061273575,0.0022976000036578625,0.002723700017668307,0.0028667000005953014,0.002858899999409914,0.002751199994236231,0.0028325000021141022,0.002747899998212233,0.003202499996405095,0.003479600010905415,0.0031593999883625656,0.0031312000064644963,0.002812799997627735,0.0024833999923430383,0.002484500000718981,0.0024435999803245068,0.002615500008687377,0.0025310000055469573,0.002521399990655482,0.0024914999958127737,0.002667900000233203,0.0022976999753154814,0.0024653000000398606,0.002590699994470924,0.0024714999890420586,0.0023148000182118267,0.0023626999754924327],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=6.202100ms, Polars=2.751350ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('e53ed73e-637c-489f-a9b8-2b1f2182a902');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nReading in data From a CSV File\n:::\n:::\n\n\nFor the sake of comparison, we'll also demonstrate the timeit function invoked using Jupyter cell magic. You'll notice that the numbers generated this way are quite closely aligned with ours.\n\n::: {.cell tags='[]' execution_count=5}\n``` {.python .cell-code}\n%%timeit\npd.read_csv(\"sample.csv\", engine=\"pyarrow\", dtype_backend=\"pyarrow\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6.33 ms ± 234 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n```\n:::\n:::\n\n\n::: {.cell tags='[]' execution_count=6}\n``` {.python .cell-code}\n%%timeit\npl.read_csv(\"sample.csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3.01 ms ± 456 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n```\n:::\n:::\n\n\n## parquet\n\nNow, let's read the data in Parquet format.\n\n::: {.cell tags='[]' execution_count=7}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: pd.read_parquet(\n        \"sample.parquet\", engine=\"pyarrow\", dtype_backend=\"pyarrow\"\n    ),\n    \"Polars\": lambda: pl.read_parquet(\"sample.parquet\"),\n}\nread_parquet = run_test(test_dict, \"Read parquet\")\n```\n\n::: {#fig-fig2 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"0e76a5dc-1541-4feb-8754-6921e7fa5aa0\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"0e76a5dc-1541-4feb-8754-6921e7fa5aa0\")) {                    Plotly.newPlot(                        \"0e76a5dc-1541-4feb-8754-6921e7fa5aa0\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.03542229998856783,0.006453400012105703,0.005838400014908984,0.005802400002721697,0.005230499984463677,0.005059999995864928,0.006735100003425032,0.0052792000060435385,0.005359100003261119,0.005222200008574873,0.004864699993049726,0.005808899994008243,0.0051377000054344535,0.004440999997314066,0.005354799999622628,0.0061314999766182154,0.004881099972408265,0.005582099984167144,0.005231699993601069,0.005608400009805337,0.00604350000503473,0.008484699996188283,0.005028399988077581,0.005190700001548976,0.004606500006048009,0.005618700000923127,0.006590000004507601,0.004608000017469749,0.005135299987159669,0.008461999997962266,0.0056828999950084835,0.005038500006776303,0.004452499997569248,0.005118999979458749,0.005129400000441819,0.00519150000764057,0.005041500000515953,0.00447590000112541,0.004630300012649968,0.004953099996782839,0.004950300004566088,0.005052799999248236,0.004684700019424781,0.005106700002215803,0.004431899986229837,0.004655599972466007,0.005323599994881079,0.005654600012348965,0.005225899978540838,0.0052844000165350735,0.0043157000036444515,0.004351200012024492,0.004817100008949637,0.004316500009736046,0.004249499994330108,0.004362100007710978,0.004237599991029128,0.004902299988316372,0.0042489999905228615,0.004222000017762184,0.004456199996639043,0.004873500001849607,0.005045400001108646,0.005011300003388897,0.004971299989847466,0.005107599979965016,0.0049789000186137855,0.005059600021922961,0.004576200008159503,0.004687099979491904,0.005028500017942861,0.004616199992597103,0.0048460999969393015,0.004809600010048598,0.005558300006669015,0.004438600008143112,0.004235000000335276,0.005373199994210154,0.006338600011076778,0.004384700005175546,0.004713100002845749,0.005233700008830056,0.005722600006265566,0.00476479998906143,0.005442399997264147,0.0053678000112995505,0.005880599986994639,0.0055275000049732625,0.006287500000325963,0.006781499978387728,0.006209499988472089,0.00480039999820292,0.004956899996614084,0.004997299984097481,0.0044849999831058085,0.004426200001034886,0.005530199996428564,0.005195500008994713,0.004409399989526719,0.004738100018585101,0.003007799998158589,0.002305499976500869,0.002392499998677522,0.0024070999934338033,0.0024344999983441085,0.0024147999938577414,0.001939300011144951,0.002385899977525696,0.002368199988268316,0.002701399993384257,0.0024034999951254576,0.002285399998072535,0.0025779999850783497,0.002522299997508526,0.002810300007695332,0.002352899988181889,0.0027190000109840184,0.0022837999858893454,0.002001199987716973,0.001962799986358732,0.0022255000076256692,0.0025323999871034175,0.002371599985053763,0.002164500008802861,0.0022661999973934144,0.002031699987128377,0.0022282999998424202,0.0023849999997764826,0.0022601999808102846,0.0022881999902892858,0.0020041000097990036,0.002361199993174523,0.002029199997195974,0.00225650001084432,0.001946700009284541,0.0017797000182326883,0.0022735999955330044,0.002182000025641173,0.0018699000065680593,0.002133700007107109,0.002175600006012246,0.0021440999989863485,0.0024772000033408403,0.002231899998150766,0.0026030000008177012,0.0023467999999411404,0.0022267000167630613,0.002060500002698973,0.0018489999929443002,0.0023785000084899366,0.002181499992730096,0.0019185999990440905,0.002070399990770966,0.0019113000016659498,0.00216760000330396,0.0021127999934833497,0.0027790000021923333,0.0025103000225499272,0.0024762999964877963,0.002916099998401478,0.002208599995356053,0.0022416999854613096,0.0022739999985788018,0.0021567000076174736,0.002142199984518811,0.0018634000152815133,0.0022709000040777028,0.0018031999934464693,0.002152200002456084,0.0018946000200230628,0.0024412999919150025,0.0017685999919194728,0.002249499986646697,0.0033116000122390687,0.0022595999762415886,0.0022865000064484775,0.001999000000068918,0.0023879999935161322,0.0021667999972123653,0.0023185000172816217,0.002154399990104139,0.0029999999969732016,0.0019423000048846006,0.00224760000128299,0.002697099989745766,0.0033359999943058938,0.0021146999788470566,0.004318899998907,0.0029359000036492944,0.0027074999816250056,0.0026775999867822975,0.0022669000027235597,0.0029950000171083957,0.003157900006044656,0.002257499989354983,0.0019342000014148653,0.0022227000154089183,0.0028486000082921237,0.0019859000167343765,0.0016829999804031104],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=5.049100ms, Polars=2.263200ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('0e76a5dc-1541-4feb-8754-6921e7fa5aa0');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nReading in data From a parquet File\n:::\n:::\n\n\n::: {.callout-note}\n\nPolars unquestionably wins this round, it can boast a speed advantage of 2 to 4 times over Pandas.\n:::\n\n# Selecting Columns\n\nAlright, let's spice things up a bit and select some columns to see which library races ahead in terms of speed!\n\n## Files awaiting in-memory reading\n\nA clever approach to conserve memory and enhance speed involves reading only the columns essential for operations. Consider a scenario where we're interested in displaying just the names from this dataset. The big question now: how do these libraries measure up in terms of speed? Let's find out!\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: pd.read_csv(\n        \"sample.csv\", engine=\"pyarrow\", dtype_backend=\"pyarrow\", usecols=[\"name\"]\n    ),\n    \"Polars\": lambda: pl.scan_csv(\"sample.csv\").select(pl.col(\"name\")).collect(),\n}\nselect_col_not_in_memory = run_test(test_dict, \"Select column (not in memory)\")\n```\n\n::: {#fig-fig3 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"7e11e0f2-c202-4ab2-81ae-cf04b2769992\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"7e11e0f2-c202-4ab2-81ae-cf04b2769992\")) {                    Plotly.newPlot(                        \"7e11e0f2-c202-4ab2-81ae-cf04b2769992\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.007244500011438504,0.006953699979931116,0.006643400003667921,0.0059591000026557595,0.007043399993563071,0.006161800003610551,0.006700600002659485,0.006710299989208579,0.006333600002108142,0.007338700001128018,0.007491800002753735,0.0091592000098899,0.006565199990291148,0.00711030000820756,0.008848800003761426,0.008320499997353181,0.0066445000120438635,0.00616639998042956,0.0052214000024832785,0.005187000002479181,0.005437199986772612,0.005381299997679889,0.004332500015152618,0.007074900000588968,0.006217700021807104,0.005152600002475083,0.006023399997502565,0.006023699999786913,0.005532999988645315,0.007215899997390807,0.004732100002001971,0.005732199992053211,0.006856599997263402,0.007041300006676465,0.006894999998621643,0.007321099983528256,0.006295699975453317,0.006623699999181554,0.005967699980828911,0.005872100009582937,0.0052201999933458865,0.0052764000138267875,0.005828999972436577,0.005013900023186579,0.005509400012670085,0.006403200008207932,0.005809899972518906,0.00569240000913851,0.00529669999377802,0.005461900000227615,0.005860300007043406,0.005021599994506687,0.00544929999159649,0.006049600022379309,0.0045368999999482185,0.005165700014913455,0.003995099978055805,0.004540199995972216,0.003784300002735108,0.004677799995988607,0.004667200002586469,0.006071399984648451,0.005367400008253753,0.006130099995061755,0.006650800001807511,0.0048300000198651105,0.007146199990529567,0.004999099997803569,0.00627760001225397,0.005506499990588054,0.005322800017893314,0.005701700021745637,0.0052137000020593405,0.0045427000150084496,0.004887599992798641,0.004795299988472834,0.006826099997851998,0.007867000007536262,0.00665690001915209,0.004703900020103902,0.004176400019787252,0.005142299982253462,0.004651800001738593,0.004248200013535097,0.003908199985744432,0.004739199997857213,0.00455589999910444,0.004331100004492328,0.004735599999548867,0.005963200004771352,0.0049703000113368034,0.005591099994489923,0.005317600007401779,0.0046440999722108245,0.004756199981784448,0.005550500005483627,0.004858500004047528,0.006226299999980256,0.005280200013658032,0.005906200007302687,0.0029738000012002885,0.0026742999907583,0.0026328999956604093,0.0020112000056542456,0.0020478999940678477,0.0021294999751262367,0.0019412999972701073,0.003940499998861924,0.0023018000065349042,0.0027323999966029078,0.002235299994936213,0.002109499997459352,0.002052600000752136,0.0024338999937754124,0.0018310000014025718,0.0022846000210847706,0.002054600015981123,0.0018486999906599522,0.0018358000088483095,0.0021985000057611614,0.002157599985366687,0.0018749999871943146,0.0019973000162281096,0.0020138999971095473,0.0017571999924257398,0.0018628000107128173,0.0017945000145118684,0.002762899996014312,0.0020278000156395137,0.0025492999993730336,0.001970400015125051,0.0017191999941132963,0.0017197999986819923,0.0023381999926641583,0.002014400000916794,0.00227719999384135,0.0020775000157300383,0.0019987000268884003,0.002365399996051565,0.002068500005407259,0.0021262000082060695,0.0019360999867785722,0.002201800001785159,0.0016895000007934868,0.0021063000021968037,0.0015985000063665211,0.0019546000112313777,0.0017942000122275203,0.001748699985910207,0.0019041000050492585,0.0018848000036086887,0.0018013000080827624,0.0019061000202782452,0.001867000013589859,0.0018801999976858497,0.0021714000031352043,0.0022387999924831092,0.0018204000080004334,0.001990099990507588,0.002596700011054054,0.0021312999888323247,0.0019979999924544245,0.002322999993339181,0.0017902000108733773,0.0018866999889723957,0.0019887999806087464,0.002521999995224178,0.0024529000220354646,0.002162699995096773,0.001936200016643852,0.0024246000102721155,0.0017220999870914966,0.0019468000100459903,0.00240019999910146,0.002429400017717853,0.0019523999944794923,0.0018050000071525574,0.0025415000272914767,0.002078999998047948,0.0016088999982457608,0.002362600003834814,0.002074399992125109,0.001903099997434765,0.001909899991005659,0.0020570000051520765,0.0019417000003159046,0.0020334000000730157,0.001853800000390038,0.001970000012079254,0.0027139000012539327,0.002285399998072535,0.0023206000041682273,0.0023159999982453883,0.002653100003954023,0.002155599999241531,0.0019383000035304576,0.001815700001316145,0.0018171999836340547,0.001753299991833046,0.002038400009041652],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=5.641750ms, Polars=2.030600ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('7e11e0f2-c202-4ab2-81ae-cf04b2769992');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nSelecting Columns from a File Not Yet in Memory\n:::\n:::\n\n\n## File is in memory\n\nAs anticipated, Polars continues to showcase its swiftness. It's worth highlighting the usage of the `lazy` and `collect` methods in Polars. These nifty tools grant us access to the library's clever query optimization techniques, which play a pivotal role in significantly enhancing performance. OK, one step further: suppose our files are already loaded into memory. Would there still be a distinction in performance under this circumstance?\n\n::: {.cell tags='[]' execution_count=9}\n``` {.python .cell-code}\ndf_pandas = pd.read_csv(\"sample.csv\", engine=\"pyarrow\", dtype_backend=\"pyarrow\")\ndf_polars = pl.read_csv(\"sample.csv\")\n```\n:::\n\n\n::: {.cell tags='[]' execution_count=10}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: df_pandas.loc[:, \"name\"],\n    \"Polars\": lambda: df_polars.lazy().select(pl.col(\"name\")).collect(),\n}\nselect_col_in_memory = run_test(test_dict, \"Select column\")\n```\n\n::: {#fig-fig4 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"b9d1bd33-6bae-47fc-8401-64c2eca9c856\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"b9d1bd33-6bae-47fc-8401-64c2eca9c856\")) {                    Plotly.newPlot(                        \"b9d1bd33-6bae-47fc-8401-64c2eca9c856\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.00016489997506141663,3.0499999411404133e-05,2.3800006601959467e-05,2.1599989850074053e-05,2.139998832717538e-05,2.1499989088624716e-05,2.1100015146657825e-05,3.15000070258975e-05,2.0799983758479357e-05,1.990000600926578e-05,1.960000372491777e-05,1.9400002202019095e-05,1.889999839477241e-05,1.8399994587525725e-05,1.8099992303177714e-05,1.8099992303177714e-05,1.829999382607639e-05,1.7799990018829703e-05,1.8399994587525725e-05,1.7799990018829703e-05,1.8399994587525725e-05,1.819999306462705e-05,1.7999991541728377e-05,1.7999991541728377e-05,1.7999991541728377e-05,1.7700018361210823e-05,1.7700018361210823e-05,1.7600017599761486e-05,1.8099992303177714e-05,1.789999078027904e-05,1.7399986973032355e-05,1.7099984688684344e-05,1.6900012269616127e-05,1.8399994587525725e-05,1.759998849593103e-05,1.7499987734481692e-05,2.099998528137803e-05,2.1100015146657825e-05,2.370000584051013e-05,0.00031800000579096377,7.479998748749495e-05,9.48999950196594e-05,8.13000078778714e-05,6.320001557469368e-05,5.930001498199999e-05,5.879998207092285e-05,5.9200014220550656e-05,3.850000211969018e-05,1.9800005247816443e-05,1.9800005247816443e-05,2.139998832717538e-05,2.0500010577961802e-05,2.0800012862309813e-05,2.409997978247702e-05,2.2199994418770075e-05,1.9400002202019095e-05,1.889999839477241e-05,1.9099999917671084e-05,1.8999999156221747e-05,1.8799997633323073e-05,1.8999999156221747e-05,1.889999839477241e-05,1.8699996871873736e-05,1.889999839477241e-05,2.030000905506313e-05,1.9400002202019095e-05,1.8699996871873736e-05,1.85999961104244e-05,2.680000034160912e-05,1.8799997633323073e-05,1.8700025975704193e-05,1.8799997633323073e-05,1.8499995348975062e-05,1.9500002963468432e-05,2.0099978428333998e-05,1.889999839477241e-05,1.8499995348975062e-05,1.889999839477241e-05,1.8700025975704193e-05,1.8799997633323073e-05,1.8799997633323073e-05,1.9099999917671084e-05,1.8699996871873736e-05,1.85999961104244e-05,2.2499996703118086e-05,1.9400002202019095e-05,1.889999839477241e-05,1.7799990018829703e-05,1.819999306462705e-05,1.819999306462705e-05,1.7799990018829703e-05,1.7799990018829703e-05,1.8099992303177714e-05,1.8099992303177714e-05,1.789999078027904e-05,1.7799990018829703e-05,1.789999078027904e-05,1.7799990018829703e-05,1.7799990018829703e-05,1.7999991541728377e-05,0.0005014000053051859,0.0003027999773621559,6.44999963697046e-05,8.669999078847468e-05,6.389999180100858e-05,2.9099988751113415e-05,3.57000099029392e-05,7.830001413822174e-05,2.3500004317611456e-05,5.5899989092722535e-05,1.930000144056976e-05,1.889999839477241e-05,1.8699996871873736e-05,1.8699996871873736e-05,9.040001896210015e-05,2.269999822601676e-05,5.600001895800233e-05,1.920000067912042e-05,1.829999382607639e-05,2.0100007532164454e-05,0.0002009000163525343,7.419998291879892e-05,1.85999961104244e-05,1.7799990018829703e-05,0.00012099999003112316,5.529998452402651e-05,1.819999306462705e-05,1.8999999156221747e-05,1.7699989257380366e-05,1.7200014553964138e-05,1.7700018361210823e-05,1.7600017599761486e-05,1.7299986211583018e-05,1.7399986973032355e-05,1.7499987734481692e-05,1.71000137925148e-05,1.6900012269616127e-05,1.719998545013368e-05,1.7300015315413475e-05,1.7000013031065464e-05,1.7399986973032355e-05,1.7399986973032355e-05,1.7300015315413475e-05,1.7200014553964138e-05,1.7299986211583018e-05,1.7399986973032355e-05,1.789999078027904e-05,1.650000922381878e-05,1.659998088143766e-05,1.680001150816679e-05,1.719998545013368e-05,1.659998088143766e-05,1.7200014553964138e-05,1.6900012269616127e-05,1.7099984688684344e-05,1.7000013031065464e-05,1.7300015315413475e-05,1.6999983927235007e-05,1.6900012269616127e-05,1.6700010746717453e-05,1.6399979358538985e-05,1.6600009985268116e-05,1.6699981642886996e-05,1.6200006939470768e-05,1.6799982404336333e-05,1.6600009985268116e-05,1.6300007700920105e-05,1.6400008462369442e-05,1.6200006939470768e-05,1.6400008462369442e-05,1.6400008462369442e-05,1.6300007700920105e-05,1.6200006939470768e-05,1.6300007700920105e-05,1.6400008462369442e-05,1.6400008462369442e-05,1.650000922381878e-05,1.719998545013368e-05,1.650000922381878e-05,1.610000617802143e-05,1.6600009985268116e-05,1.6900012269616127e-05,1.6499980119988322e-05,1.5900004655122757e-05,1.7299986211583018e-05,1.7000013031065464e-05,1.6400008462369442e-05,1.6300007700920105e-05,1.6200006939470768e-05,1.6300007700920105e-05,1.5999976312741637e-05,1.71000137925148e-05,1.920000067912042e-05,1.580000389367342e-05,1.580000389367342e-05,1.5700003132224083e-05,1.580000389367342e-05,1.5900004655122757e-05,1.5900004655122757e-05,1.5799974789842963e-05],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=0.018850ms, Polars=0.017150ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('b9d1bd33-6bae-47fc-8401-64c2eca9c856');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nSelecting Columns from a File Already in Memory\n:::\n:::\n\n\n::: {.callout-note}\n\nWhile Polars showed a significant speed advantage for tasks involving pre-read files, both libraries perform similarly when the files are already in memory.\n:::\n\n# Filtering Rows\n\nNow, let's explore the scenario where we filter our dataset based on one or more column values \n\n## Based on one condition\n\nFor our simple scenario, we'll be narrowing down our focus to filter data based on individuals with the name \"David\".\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (df_pandas.query(\"name=='David'\")),\n    \"Polars\": lambda: (df_polars.lazy().filter((pl.col(\"name\") == \"David\")).collect()),\n}\nfilter_row_one_condition = run_test(test_dict, \"Filter (simple)\")\n```\n\n::: {#fig-fig5 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"01caaa85-7db4-468c-92ae-d1d9c21e235b\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"01caaa85-7db4-468c-92ae-d1d9c21e235b\")) {                    Plotly.newPlot(                        \"01caaa85-7db4-468c-92ae-d1d9c21e235b\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.0042569999932311475,0.0022557999764103442,0.0018020999850705266,0.0017989000189118087,0.0017706000071484596,0.0020287999941501766,0.002105700026731938,0.0017623000021558255,0.0017665000050328672,0.0021127999934833497,0.0017359999765176326,0.0017148999904748052,0.0016856000002007931,0.0016866000078152865,0.0017860000079963356,0.0017026999848894775,0.0017140000127255917,0.0016835000133141875,0.0024012000067159534,0.0019398999866098166,0.0017080999969039112,0.0016983000095933676,0.0016999999934341758,0.0017048999725375324,0.0017269999952986836,0.001704599999357015,0.002078799996525049,0.0018479999853298068,0.0017084999999497086,0.0017075999930966645,0.0017109000182244927,0.0017124000005424023,0.0017069000168703496,0.001732900011120364,0.0017037999932654202,0.0020044999837409705,0.0017097000090871006,0.001698400010354817,0.0016593000036664307,0.0017059000092558563,0.001700500026345253,0.0016954999882727861,0.0017046000284608454,0.0018014000088442117,0.002107000007526949,0.0017924999992828816,0.0016923000221140683,0.0017142999859061092,0.0017094000068027526,0.0016678999818395823,0.0016995999903883785,0.001698700012639165,0.0017751000123098493,0.0018297999922651798,0.0017537999956402928,0.0017348000255879015,0.0016941000067163259,0.0016921999922487885,0.0017062000115402043,0.0016897000023163855,0.001694599981419742,0.0017022999818436801,0.001823400001740083,0.0017330999835394323,0.0016983000095933676,0.0017002999957185239,0.0016934000013861805,0.001717500010272488,0.0016923999937716872,0.001691300014499575,0.001724300003843382,0.0019629000162240118,0.0016416000144090503,0.0016978000057861209,0.0016807999927550554,0.0017019999795593321,0.0016740999999456108,0.0016926999960560352,0.0016856000002007931,0.0016816999996080995,0.001874799985671416,0.001736300007905811,0.0016552000015508384,0.0016484999796375632,0.001656699983868748,0.0016388999938499182,0.0015964000194799155,0.0016774999967310578,0.001643000025069341,0.0018609999970067292,0.0016809000226203352,0.001672399987000972,0.0016426999936811626,0.0016868000093381852,0.001634100015508011,0.001652999984798953,0.0017151999927591532,0.0016528000123798847,0.0016336000117007643,0.0017081999976653606,0.001965200004633516,0.0015412000066135079,0.0010271999926771969,0.0011269999959040433,0.0004765000194311142,0.0006455000257119536,0.0011116999958176166,0.0005387999990489334,0.0009959999879356474,0.0009518000006210059,0.00047900000936351717,0.00133200001437217,0.0010429999965708703,0.0015807999880053103,0.0014662000176031142,0.0029657999984920025,0.0017205000040121377,0.0011183999886270612,0.0018125000060535967,0.001794499985408038,0.001931900013005361,0.0017584000015631318,0.0013629999884869903,0.0013432000123430043,0.0017931999755091965,0.001362200011499226,0.0014458000077866018,0.0010297000117134303,0.0008652999822515994,0.0014067000010982156,0.0012123000051360577,0.0013418000016827136,0.0012035999970976263,0.0010676999809220433,0.0011699000024236739,0.0010798000148497522,0.0016985000111162663,0.0009271999879274517,0.0015147999802138656,0.000986600003670901,0.001246699976036325,0.001663700008066371,0.0016884999931789935,0.0013068999978713691,0.0010432000271975994,0.0015633000002708286,0.002129500004230067,0.001375199994072318,0.001947000011568889,0.0016405000060331076,0.0010769000218715519,0.001187799993203953,0.001061999995727092,0.0010033000144176185,0.001250800007255748,0.0008142000006046146,0.0010874000145122409,0.001596999994944781,0.001115799997933209,0.0008351000142283738,0.0009813000215217471,0.000984799989964813,0.0014361999928951263,0.001582800003234297,0.0011135999811813235,0.0015922999882604927,0.001747199974488467,0.0011857000063173473,0.0018464000022504479,0.0016150999872479588,0.0017346999957226217,0.0010334999824408442,0.0016152000171132386,0.001703600020846352,0.0018705999827943742,0.001368400000501424,0.0015555999998468906,0.0013234999787528068,0.001228799985256046,0.001156499987700954,0.0012337000225670636,0.001573800022015348,0.0011511000047903508,0.0013188000011723489,0.0006462000019382685,0.0012321000103838742,0.000994999980321154,0.0011829000141005963,0.0007378000009339303,0.0006494999979622662,0.0009076000133063644,0.001080499991076067,0.001258800009964034,0.0010057000035885721,0.0014593999949283898,0.0008280999900307506,0.0014899999951012433,0.0008003000111784786,0.0009591999987605959,0.0009972999978344887],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=1.704750ms, Polars=1.232900ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('01caaa85-7db4-468c-92ae-d1d9c21e235b');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nFiltering Rows Based on One Condition\n:::\n:::\n\n\n## Based on multiple conditions\n\nNow, for a more intricate challenge, we're going to dive into querying the data to extract individuals who meet specific criteria: those named David, born after 1980, residing in a city other than London, married, and with three children.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (\n        df_pandas.query(\n            \"name=='David' and born>1980 and city != 'London' or is_married == True and children >= 3\"\n        )\n    ),\n    \"Polars\": lambda: (\n        df_polars.lazy()\n        .filter(\n            (pl.col(\"name\") == \"David\")\n            & (pl.col(\"born\") > 1980)\n            & (pl.col(\"city\") != \"London\")\n            | (pl.col(\"is_married\") == True) & (pl.col(\"children\") >= 3)\n        )\n        .collect()\n    ),\n}\nfilter_row_multiple_condition = run_test(test_dict, \"Filter (complex)\")\n```\n\n::: {#fig-fig6 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"9a232231-9fe3-41a6-8bc5-cd7425d1ef0d\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"9a232231-9fe3-41a6-8bc5-cd7425d1ef0d\")) {                    Plotly.newPlot(                        \"9a232231-9fe3-41a6-8bc5-cd7425d1ef0d\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.007476800004951656,0.004158299998380244,0.007177400024374947,0.0039009999891277403,0.0039413000049535185,0.003694600018206984,0.0035274999972898513,0.004052100004628301,0.003585200000088662,0.003570500004570931,0.00356030001421459,0.004047599999466911,0.0035066000127699226,0.0035757000150624663,0.003483600012259558,0.0042286000098101795,0.0035706000053323805,0.0035210000060033053,0.0035607999889180064,0.003497600002447143,0.0036309999995864928,0.0034937000018544495,0.0035733000258915126,0.003479799983324483,0.005753599980380386,0.004034999990835786,0.0035035999899264425,0.004769399994984269,0.0038813000137452036,0.0038963000115472823,0.003449899988481775,0.003597599978093058,0.0038573000056203455,0.004124600003706291,0.0043839999998454005,0.003825199994025752,0.003781200008234009,0.0035653999948408455,0.00388630002271384,0.0034779999987222254,0.004243500006850809,0.0034823000023607165,0.004117100004805252,0.003415300016058609,0.00377660000231117,0.0034358999982941896,0.0040126999956555665,0.0035188999900128692,0.003502400009892881,0.0034724000142887235,0.0034998000191990286,0.004299199994420633,0.004430500004673377,0.003501800005324185,0.0035306000208947808,0.00350689998595044,0.003569299995433539,0.003635000000940636,0.0034641000092960894,0.003439300024183467,0.0035465999972075224,0.003534199990099296,0.0034672000037971884,0.0034876999852713197,0.0035284000041428953,0.003546499996446073,0.0034368000051472336,0.0034779999987222254,0.0034294000070076436,0.0034991000138688833,0.0035641000140458345,0.00350689998595044,0.003502799983834848,0.0035222999867983162,0.0036696000024676323,0.0035226000181864947,0.0034957000170834363,0.003490899980533868,0.003493500000331551,0.0036241000052541494,0.0034906000073533505,0.0034439000010024756,0.003472200012765825,0.006460700009483844,0.004058699996676296,0.0035171000054106116,0.003598100011004135,0.003598100011004135,0.004187600017758086,0.003739199979463592,0.00346839998383075,0.004195800021989271,0.004068000009283423,0.0034389999927952886,0.0036979000142309815,0.0038610000046901405,0.0035266999911982566,0.0038930999871809036,0.0034192000166513026,0.003992999991169199,0.0022575000184588134,0.001584999990882352,0.0016164999979082495,0.001569299987750128,0.0014611999795306474,0.0016584000259172171,0.002094099996611476,0.0019669999892357737,0.001902199990581721,0.00141789999906905,0.0016934000013861805,0.0014155000098980963,0.00112449997686781,0.0013337999989744276,0.0015433999942615628,0.0018376999942120165,0.0020739999890793115,0.0024039999989327043,0.002134900016244501,0.001270800014026463,0.0012258000206202269,0.0015348000160884112,0.0013210000179242343,0.0013122000091243535,0.002094000024953857,0.0018921000009868294,0.0019041000050492585,0.0017630000074859709,0.0023953000199981034,0.002310399984708056,0.0018403000140096992,0.0019357999844942242,0.0023936999787110835,0.002588899980764836,0.002182099997298792,0.0017679999873507768,0.001833700021961704,0.0012138000165577978,0.0015063000028021634,0.0011826000118162483,0.0015282999956980348,0.0015974999987520278,0.0014671999961137772,0.0013278000114951283,0.0012721000239253044,0.001976600004127249,0.0019362999883014709,0.0015063000028021634,0.0013144999975338578,0.001414800004567951,0.0014211000234354287,0.0014614000101573765,0.0016730999923311174,0.0015167000237852335,0.0015731999883428216,0.0014609000063501298,0.001872299995739013,0.0021895999961998314,0.001759499980835244,0.0011973999789915979,0.0015115000132936984,0.0013039000041317195,0.002097499993396923,0.0015290000010281801,0.001680999994277954,0.0015544999914709479,0.001402800000505522,0.001352399995084852,0.0023477000067941844,0.0011891000031027943,0.0015584999928250909,0.0023566000163555145,0.0012399000115692616,0.0017254999838769436,0.0015353999915532768,0.0019234000064898282,0.0017545000009704381,0.0013564000255428255,0.0010501999931875616,0.0016028000100050122,0.0012303999974392354,0.001621399977011606,0.0011340999917592853,0.0015996999864000827,0.0014047999866306782,0.0014399999927263707,0.0020699000160675496,0.0016328000056091696,0.0013729000056628138,0.001443799992557615,0.000977099989540875,0.0013294000236783177,0.0014567000034730881,0.001167400012491271,0.0018868999904952943,0.0020220000005792826,0.0014126999885775149,0.0017701999749988317,0.0015869000053498894,0.0017168000049423426],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=3.564750ms, Polars=1.571250ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('9a232231-9fe3-41a6-8bc5-cd7425d1ef0d');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nFiltering Rows Based on Multiple Condition\n:::\n:::\n\n\n::: {.callout-note}\n\nBoth libraries tackled this challenge quite well, yet Pandas struggled to keep pace with Polars. It's intriguing to observe that while Pandas required nearly twice the time for the more intricate task, Polars managed to complete it in almost the same amount of time. Parallelization in action.\n\n:::\n\n# Performing operations on columns\n\nNow, let's roll up our sleeves and dive into performing some operations on the columns.\n\n## Single operation\n\nAs a single operation, we'll simply calculate the century in which these individuals were born.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (df_pandas.assign(born=lambda df: df.born.div(100).round())),\n    \"Polars\": lambda: (\n        df_polars.lazy().with_columns((pl.col(\"born\") / 100).round()).collect()\n    ),\n}\noperate_one_column = run_test(test_dict, \"Operate (one column)\")\n```\n\n::: {#fig-fig7 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"8cca9a13-dbfa-452b-8214-db5b32957825\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"8cca9a13-dbfa-452b-8214-db5b32957825\")) {                    Plotly.newPlot(                        \"8cca9a13-dbfa-452b-8214-db5b32957825\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.0023199999995995313,0.0007067999977152795,0.0006158000032883137,0.0006064999906811863,0.0005813000025227666,0.0005838999932166189,0.0005694999999832362,0.0005819000070914626,0.0005640000163111836,0.0008304000075440854,0.0006126000080257654,0.0005685999931301922,0.0005767999973613769,0.0005758999905083328,0.0005673999839928001,0.0005561999860219657,0.0005819000070914626,0.0008432000176981091,0.0006859999848529696,0.0006717999931424856,0.000547999981790781,0.0005541999998968095,0.0005601000157184899,0.0005472000048030168,0.0005520999839063734,0.0005625999765470624,0.0005544000014197081,0.0005660999740939587,0.0005556000105571002,0.0005545000021811575,0.0005546000029426068,0.0005608999927062541,0.0005573999951593578,0.0005632000102195889,0.0005504000000655651,0.0006643999950028956,0.0005522999854292721,0.0006178999901749194,0.0007100999937392771,0.0006288000149652362,0.0005661000031977892,0.0005577999982051551,0.0005652999971061945,0.0005531999922823161,0.0005564999883063138,0.0006045999762136489,0.0006624999805353582,0.0009549999958835542,0.0006085000059101731,0.0005606999911833555,0.0005713000136893243,0.0005563000158872455,0.0005641000170726329,0.0005634000117424875,0.0005663000047206879,0.0005677999870385975,0.0005551999784074724,0.0005553000082727522,0.0005555000097956508,0.0005517000099644065,0.0005480999825522304,0.0006883000023663044,0.000666000007186085,0.0005842999962624162,0.0005583000020124018,0.0005528000183403492,0.0005611999949906021,0.0005571999936364591,0.0005581000004895031,0.0005577999982051551,0.0005562999867834151,0.0005533999938052148,0.0005602000164799392,0.000599899998633191,0.0005785000103060156,0.0010226000158581883,0.0007655000081285834,0.0006059999868739396,0.0005607999919448048,0.0005501999985426664,0.0005697000015061349,0.000541499990504235,0.0005576999974437058,0.0005558000120799989,0.0005551000067498535,0.000544599985005334,0.0005523999861907214,0.0006301999965216964,0.0005893000052310526,0.0005667000077664852,0.0005508000031113625,0.0005548000044655055,0.000547399977222085,0.000543999980436638,0.0005472000048030168,0.0005471000040415674,0.0005471999756991863,0.0005459999956656247,0.0005447999865282327,0.0005435999773908406,0.0011755999876186252,0.0008858999935910106,0.0008940999978221953,0.000669100001687184,0.0006524999917019159,0.0006037999992258847,0.0006981999904382974,0.0005388999998103827,0.0005423999973572791,0.0005805999971926212,0.0005244000058155507,0.000536899984581396,0.0005403000104706734,0.0005381999944802374,0.0005493999924510717,0.000537199986865744,0.0004949000140186399,0.000531300000147894,0.0007612999761477113,0.0006873000238556415,0.0006402999861165881,0.0005512000061571598,0.0005774000019300729,0.0005486999871209264,0.0005010000022593886,0.0006960000027902424,0.000694399990607053,0.0006910999945830554,0.0005250999820418656,0.0005794000171590596,0.0005336999893188477,0.0005133000086061656,0.0006958999729249626,0.0006992999988142401,0.0006898000137880445,0.0005665999779012054,0.0005403000104706734,0.0005803999956697226,0.0008785999962128699,0.0007136999920476228,0.0006933000113349408,0.0005003999976906925,0.000512500002514571,0.0004634000069927424,0.00043069999082945287,0.0004853999998886138,0.0007869999972172081,0.0005512000061571598,0.0004495999892242253,0.0004774999979417771,0.0006621000065933913,0.0004574000195134431,0.0005203000036999583,0.00047229998745024204,0.0004915999888908118,0.000534999999217689,0.00037670001620426774,0.0005134999810252339,0.0005073000211268663,0.0006245000113267452,0.00045759999193251133,0.00046919999294914305,0.0004655000229831785,0.0005326999817043543,0.0006609999982174486,0.00048260000767186284,0.0004495000175666064,0.0006429000059142709,0.0016026000084821135,0.0005152999947313219,0.0005496999947354198,0.00047480000648647547,0.0004403000057209283,0.00046079998719505966,0.00046290000318549573,0.0004723999882116914,0.0005399000074248761,0.0005557000113185495,0.0005544000014197081,0.00043489999370649457,0.00045170000521466136,0.0006818999827373773,0.0005741000059060752,0.0004603999841492623,0.00043020001612603664,0.0004676000098697841,0.000686399987898767,0.0004309999931138009,0.00045739999040961266,0.0005898000090382993,0.0005545000021811575,0.0004676000098697841,0.0004721000150311738,0.0005513000069186091,0.0005927000020164996,0.0006891000084578991,0.0004485999816097319,0.0006633000157307833,0.0006719999946653843,0.00046439998550340533],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=0.561050ms, Polars=0.540100ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('8cca9a13-dbfa-452b-8214-db5b32957825');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nPerforming a Singme Operation on a Column\n:::\n:::\n\n\n## Multiple operations\n\nLet's also explore what happens when performing multiple operations on the columns. We'll mix things up with some string operations, mapping, and math calculations to see how these libraries handle it!\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (\n        df_pandas.assign(\n            born=lambda df: df.born.div(100).round(),\n            name=lambda df: df.name.str.lower(),\n            city=lambda df: df.city.str.upper(),\n            zip_code=lambda df: df.zip_code.mul(2),\n            income=lambda df: df.income.div(10).astype(\"str\"),\n            is_married=lambda df: df.is_married.map({False: 0, True: 1}),\n            children=lambda df: df.children.astype(\"bool\"),\n            car=lambda df: df.car.str[0],\n        )\n    ),\n    \"Polars\": lambda: (\n        df_polars.lazy()\n        .with_columns(\n            [\n                (pl.col(\"born\") / 100).round(),\n                pl.col(\"name\").str.to_lowercase(),\n                pl.col(\"city\").str.to_uppercase(),\n                pl.col(\"zip_code\") * 2,\n                (pl.col(\"income\") / 10).cast(pl.Utf8),\n                pl.col(\"is_married\").map_dict({False: 0, True: 1}),\n                pl.col(\"children\").cast(pl.Boolean),\n                pl.col(\"car\").str.slice(0, length=1),\n            ]\n        )\n        .collect()\n    ),\n}\noperate_multiple_column = run_test(test_dict, \"Operate (more columns)\")\n```\n\n::: {#fig-fig8 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"25ee7786-1e9d-4a61-a606-dc868c7547f8\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"25ee7786-1e9d-4a61-a606-dc868c7547f8\")) {                    Plotly.newPlot(                        \"25ee7786-1e9d-4a61-a606-dc868c7547f8\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.014571000006981194,0.012432199990144,0.011432700004661456,0.012585299991769716,0.01205590000608936,0.012256099988007918,0.011386400001356378,0.011972300009801984,0.011108000006061047,0.010635099984938279,0.010879800014663488,0.011198099993634969,0.011574999982258305,0.011052100016968325,0.010531700012506917,0.0107846999890171,0.012305000011110678,0.015498900000238791,0.010378199978731573,0.010764399979962036,0.010418999998364598,0.01040840000496246,0.010500600008526817,0.010479099990334362,0.010381200001575053,0.018775400007143617,0.01840869997977279,0.019875400001183152,0.014752499992027879,0.011690599989378825,0.010546700010308996,0.010619000007864088,0.015149799990467727,0.013302200008183718,0.012440699996659532,0.010446300002513453,0.01047639999887906,0.010602900001686066,0.010387699992861599,0.01853940001456067,0.01665309999953024,0.010872599988942966,0.018394999991869554,0.018239199998788536,0.018765299988444895,0.015747600002214313,0.011797500017564744,0.014525799982948229,0.015655199997127056,0.011025400017388165,0.01158759999088943,0.011825900000985712,0.012121400010073557,0.01133590002427809,0.011412400024710223,0.012094200006686151,0.013124599994625896,0.011282199993729591,0.011681700008921325,0.012036100000841543,0.011998400004813448,0.010477300005732104,0.012479199998779222,0.011784200003603473,0.011866399989230558,0.010875200008740649,0.012239199975738302,0.011556900019058958,0.011396199988666922,0.011349600012181327,0.011575399985304102,0.010559999995166436,0.010779700009152293,0.010687300004065037,0.0103786000108812,0.01086449998547323,0.010582599992631003,0.010661100008292124,0.010571599996183068,0.010295399988535792,0.01050020000548102,0.010538400005316362,0.010446000000229105,0.010433799994643778,0.010706500004744157,0.010304800001904368,0.010831300023710355,0.010483299993211403,0.01047639999887906,0.01045559998601675,0.01048250001622364,0.010297700006049126,0.010643299989169464,0.010593700018944219,0.010489300009794533,0.010969599999953061,0.011545100016519427,0.010597699991194531,0.010617499996442348,0.011445799987995997,0.003481299994746223,0.0019992000015918165,0.0025439999881200492,0.002057700010482222,0.0018493000243324786,0.002460299991071224,0.0020191000076010823,0.0022713000071235,0.0027193999849259853,0.0022270000190474093,0.0025018000160343945,0.002528499986510724,0.0019127000123262405,0.0028187000134494156,0.0022708000033162534,0.0026794000004883856,0.0027323999966029078,0.0024145999923348427,0.002297099999850616,0.002665700012585148,0.0034394999966025352,0.0035487000131979585,0.003004799975315109,0.0028446000069379807,0.002031000010902062,0.002446300000883639,0.0023231999948620796,0.003154200006974861,0.002295899990713224,0.0020515999931376427,0.0032635999959893525,0.0027722000086214393,0.003511999995680526,0.002339600003324449,0.003388699988136068,0.00265360000776127,0.002297200000612065,0.0027824999997392297,0.002027399983489886,0.0025436000141780823,0.0026780000189319253,0.00221800000872463,0.002647800021804869,0.003187199996318668,0.0025197000068146735,0.002557100000558421,0.0020212999952491373,0.002580800006398931,0.0023145999875850976,0.0026501000102143735,0.00215129999560304,0.0025917000020854175,0.0016331000078935176,0.0015463999880012125,0.002211399987572804,0.002337100013392046,0.00195130001520738,0.0016042999923229218,0.0024880999990273267,0.002725400001509115,0.0021058000274933875,0.0023348999966401607,0.002183300006436184,0.0025430000096093863,0.0024135000130627304,0.0018007000035140663,0.0022576999908778816,0.0022788000060245395,0.001543000020319596,0.002413700014585629,0.001829599990742281,0.002155599999241531,0.0024799999955575913,0.0016166999994311482,0.0023472000029869378,0.0024124000046867877,0.002115000010235235,0.0028141000075265765,0.0023521999828517437,0.0019369999936316162,0.002100800018524751,0.00187130001722835,0.002296599996043369,0.0025550000136718154,0.002275000006193295,0.0026003999810200185,0.0020551999914459884,0.0020315000147093087,0.001732600008836016,0.0018242000078316778,0.0016545999969821423,0.0023560000117868185,0.0021951000089757144,0.0020093999919481575,0.0024187999952118844,0.002021199994487688,0.00192760000936687,0.002358900004765019,0.0019864000205416232,0.002156800008378923],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=11.153050ms, Polars=2.329050ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('25ee7786-1e9d-4a61-a606-dc868c7547f8');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nPerfrming a Multiple Operation on Columns\n:::\n:::\n\n\n::: {.callout-note}\n\nOnce again, Polars takes the lead. While both libraries required more time for the task involving multiple operations, Polars demonstrated superior scalability in this scenario.\n\n:::\n\n# Concatenating Data\n\nNow, let's turn our attention to concatenating two datasets. Let the merging begin!\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndf_pandas2 = df_pandas.copy(deep=True)\ndf_polars2 = df_polars.clone()\n```\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: pd.concat([df_pandas, df_pandas2], axis=0),\n    \"Polars\": lambda: pl.concat([df_polars, df_polars2], how=\"vertical\"),\n}\nconcatenate = run_test(test_dict, \"Concatenate\")\n```\n\n::: {#fig-fig9 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"a3f903b8-9c66-45bd-87eb-46bb28bd60a6\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"a3f903b8-9c66-45bd-87eb-46bb28bd60a6\")) {                    Plotly.newPlot(                        \"a3f903b8-9c66-45bd-87eb-46bb28bd60a6\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.002152200002456084,0.0018088000069838017,0.001866700011305511,0.0015719000075478107,0.0017798999906517565,0.003910300001734868,0.0016843000194057822,0.001882499986095354,0.0017923999985214323,0.0015273000171873719,0.0015124999918043613,0.0013873999996576458,0.0014738999889232218,0.0028812999953515828,0.002569700009189546,0.0016743000014685094,0.0012547000078484416,0.0011701000039465725,0.0009748000011313707,0.001362599985441193,0.001073999999789521,0.000950500019825995,0.0008641000022180378,0.0008575999818276614,0.0008481999975629151,0.0008662000182084739,0.000913099996978417,0.0017285999783780426,0.0009254000033251941,0.0008516999951098114,0.0008436999924015254,0.0008627999923191965,0.0008556999964639544,0.0008849999867379665,0.0009168999968096614,0.0008531000057701021,0.0008643999753985554,0.0008468999876640737,0.0008612000092398375,0.0008507000165991485,0.0008480999968014657,0.0009325999999418855,0.0008894999918993562,0.0008705999935045838,0.0009428000194020569,0.0008618000138085335,0.0008571000071242452,0.0008569000056013465,0.0008753000001888722,0.0009308000153396279,0.0008734999864827842,0.0008680000028107315,0.0008520999981556088,0.0008531000057701021,0.0008445999992545694,0.0008624999900348485,0.0009085000201594085,0.0008761000062804669,0.0008666000212542713,0.0008488000021316111,0.0008515999943483621,0.0008496000082232058,0.0009892999951262027,0.000906300003407523,0.0009654999885242432,0.0008588000200688839,0.0008533000072930008,0.0008584000170230865,0.0008548999903723598,0.0008436999924015254,0.0008685000066179782,0.0009192000143229961,0.0008531000057701021,0.0008569000056013465,0.0008452999754808843,0.0008539000118616968,0.0008374000026378781,0.0008454000053461641,0.0008757000032346696,0.0009052999957930297,0.0010217999806627631,0.0008610999793745577,0.0008349000127054751,0.0008381000079680234,0.0008608000061940402,0.0008673999982420355,0.0009199999913107604,0.0008526000019628555,0.0008432000176981091,0.0008499000105075538,0.0008425000123679638,0.0008511000196449459,0.0008398000209126621,0.0008755000017117709,0.0010785000049509108,0.0009428000194020569,0.0008472000190522522,0.0013258999970275909,0.001934400002937764,0.001136700011556968,0.0011655999987851828,0.0004430999979376793,0.0004454999871086329,0.0003186000103596598,0.0003046999918296933,0.00028989999555051327,0.0002908000024035573,0.0003496000135783106,0.0002823999966494739,0.00026619998971000314,0.00029830000130459666,0.0003339999821037054,0.0003349999897181988,0.0003490000090096146,0.00036529998760670424,0.00041379997855983675,0.000514900020789355,0.0005051000043749809,0.0003578999894671142,0.0004972000024281442,0.000434000015957281,0.00037039999733678997,0.0002624999906402081,0.00023850001161918044,0.0002482999989297241,0.0001568000006955117,0.000454099994385615,0.0002753000007942319,0.00029379999614320695,0.00030189999961294234,0.00027760001830756664,0.0006345000001601875,0.00040309998439624906,0.000441400014096871,0.0003648999845609069,0.00028490001568570733,0.000294400000711903,0.0003538000164553523,0.00031109998235478997,0.00016799999866634607,0.00021319999359548092,0.00038219999987632036,0.00017980000120587647,0.00038219999987632036,0.0002758000046014786,0.00036529998760670424,0.0007629000174347311,0.0005073999927844852,0.0005003999976906925,0.00036559998989105225,0.0003752000047825277,0.0004200999974273145,0.000434000015957281,0.0005054000066593289,0.0003824999730568379,0.0003451000084169209,0.0002832000027410686,0.0002801000082399696,0.00026599998818710446,0.0002628999936860055,0.0002671999973244965,0.0003654999891296029,0.00022529999841935933,0.00025240000104531646,0.0002489000034984201,0.0003662999952211976,0.00032900000223889947,0.00022719998378306627,0.00043739998363889754,0.00038559999666176736,0.00045700001646764576,0.0003657999914139509,0.00036130001535639167,0.0002854999911505729,0.00025030001415871084,0.0006678999925497919,0.0004202999989502132,0.0002705999941099435,0.00026970001636072993,0.0002697999880183488,0.00025069998810067773,0.00028150001890026033,0.00033379998058080673,0.0003341000119689852,0.00031269999453797936,0.0002978999982587993,0.0002486000012140721,0.0002550999925006181,0.0003659000212792307,0.0002714000002015382,0.00027699998463504016,0.00046869998914189637,0.0006457999988924712,0.0003617999900598079,0.0001728000061120838,0.0002348999842070043,0.00024080000002868474,0.00023219999275170267,0.00032530000316910446,0.00023250002413988113],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=0.869550ms, Polars=0.327150ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('a3f903b8-9c66-45bd-87eb-46bb28bd60a6');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nConcatenating Dataframes\n:::\n:::\n\n\n::: {.callout-note}\n\nOnce more, Polars shines with a remarkable speed advantage.\n    \n:::\n\n# Aggregation\n\n## Simple \n\nTime to shift our attention to aggregation. First up, a simple task: let's calculate the mean income based on names. Then, for a bit more complexity, we'll dive into computing statistics involving the income, children, and car columns. Things are about to get interesting!\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (df_pandas.groupby(\"name\").income.mean()),\n    \"Polars\": lambda: (df_polars.lazy().groupby(\"name\").mean().collect()),\n}\naggregate_simple = run_test(test_dict, \"Aggregate (simple)\")\n```\n\n::: {#fig-fig10 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"f2f4b48e-da88-469b-9d03-124a415b704f\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f2f4b48e-da88-469b-9d03-124a415b704f\")) {                    Plotly.newPlot(                        \"f2f4b48e-da88-469b-9d03-124a415b704f\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.0026855000178329647,0.0016955000173766166,0.0025693000061437488,0.0017071999900508672,0.0015229000127874315,0.0015146000077947974,0.0016141000087372959,0.0026214999961666763,0.0016440999752376229,0.0015248999989125878,0.0016096000035759062,0.0015776999935042113,0.0014393999881576747,0.0014793000009376556,0.001493599993409589,0.0015546000213362277,0.001473200012696907,0.0018508000066503882,0.0014436999917961657,0.0015304999833460897,0.0022822000028099865,0.0015588999958708882,0.0015787000011187047,0.001575100002810359,0.0014670999953523278,0.0015983000048436224,0.0017891000024974346,0.002272899990202859,0.0019634999916888773,0.0034672000037971884,0.002748099999735132,0.0025499000039417297,0.0019841000030282885,0.0016870999825187027,0.001816600008169189,0.0017414999892935157,0.0017299999890383333,0.0014838000060990453,0.0014405999972950667,0.0014599999994970858,0.001565500017022714,0.0014429999864660203,0.0014807999832555652,0.0015051999944262207,0.002368799992837012,0.002015600010054186,0.0016615000204183161,0.0017462999967392534,0.0016089999990072101,0.001559399999678135,0.0015397999959532171,0.00170829999842681,0.001960900000995025,0.0017031999886967242,0.0018588999810162932,0.0015164999931585044,0.0014702000189572573,0.0014577000110875815,0.0014780999918002635,0.001496600016253069,0.001509900001110509,0.0014174999960232526,0.001443199987988919,0.0015138000017032027,0.0014737000165041536,0.002885399997467175,0.0016010999970603734,0.0015073000104166567,0.001480600010836497,0.0014434000186156482,0.0014570000057574362,0.001571400003740564,0.0015063000028021634,0.001450299983844161,0.0014605999749619514,0.001707999996142462,0.0015960000164341182,0.0014174999960232526,0.0014555000234395266,0.0014992000069469213,0.001442200009478256,0.0013880000042263418,0.0014079000102356076,0.0014400000218302011,0.0014707999944221228,0.0016987999842967838,0.0015981000033207238,0.0014324999938253313,0.001488900015829131,0.0014835000038146973,0.00143269999534823,0.0014707999944221228,0.001469500013627112,0.0014301000046543777,0.0014036000065971166,0.0014297000016085804,0.0014920999819878489,0.0014491000038105994,0.0014454000047408044,0.001399400003720075,0.0022063999786041677,0.0011966000020038337,0.0018619000038597733,0.0011517000093590468,0.002153700013877824,0.0029110999894328415,0.0017896000063046813,0.001664000010350719,0.0019557999912649393,0.001800999976694584,0.0020321000192780048,0.0016659999964758754,0.0019161999807693064,0.0015221000066958368,0.001559099997393787,0.002430399996228516,0.0016039999900385737,0.0016459999897051603,0.0024055000103544444,0.0021634000004269183,0.0017392000008840114,0.001976800005650148,0.002104800019878894,0.001984500006074086,0.0016078999906312674,0.001916699984576553,0.00211719999788329,0.0013775000115856528,0.0024480000138282776,0.0016490000125486404,0.0015260000072885305,0.0020138999971095473,0.0021539999870583415,0.00152160000288859,0.0019140999938827008,0.0021527000062633306,0.002243299997644499,0.0018558999872766435,0.002018400002270937,0.002009499992709607,0.0023213999811559916,0.0022575000184588134,0.002042700012680143,0.0018389000033494085,0.0017596000107005239,0.0020312000124249607,0.0025701000122353435,0.0023111999907996505,0.001664000010350719,0.0017656999989412725,0.002112899994244799,0.002140800002962351,0.003544300008798018,0.0012428000045474619,0.0028772999939974397,0.0019001000036951154,0.0024105000193230808,0.0014076000079512596,0.0022896000009495765,0.0016885999939404428,0.0016038999892771244,0.002304800000274554,0.0025932000135071576,0.002435300004435703,0.0021576000144705176,0.0017912999901454896,0.0019033999997191131,0.0031136000179685652,0.0025405000196769834,0.0024025000166147947,0.0017503999988548458,0.0026111000042874366,0.00189200000022538,0.0020306000078562647,0.002341199986403808,0.0019207000150345266,0.0016100000066217035,0.001977299980353564,0.0021628999966196716,0.002383099985308945,0.0016376000130549073,0.0021714000031352043,0.0017155999958049506,0.002007000002777204,0.002564499998698011,0.002231599995866418,0.0022400000016205013,0.0015297000063583255,0.0012575000000651926,0.0020961000118404627,0.0024584000057075173,0.0017266999930143356,0.0016789000073913485,0.0026368999970145524,0.0025701999838929623,0.0018137000151909888,0.0013269999762997031,0.0019721999997273088,0.0019765000033658,0.00212459999602288],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=1.515550ms, Polars=1.995750ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('f2f4b48e-da88-469b-9d03-124a415b704f');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nPerforming a simple aggregation\n:::\n:::\n\n\n## More complex\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (\n        df_pandas.groupby([\"name\", \"car\", \"is_married\"]).agg(\n            born_min=(\"born\", min),\n            born_max=(\"born\", max),\n            income_mean=(\"income\", np.mean),\n            income_median=(\"income\", np.median),\n            children_mean=(\"children\", np.mean),\n            car_count=(\"car\", \"count\"),\n        )\n    ),\n    \"Polars\": lambda: (\n        df_polars.lazy()\n        .groupby([\"name\", \"car\", \"is_married\"])\n        .agg(\n            [\n                pl.col(\"born\").min().alias(\"born_min\"),\n                pl.col(\"born\").max().alias(\"born_max\"),\n                pl.col(\"income\").mean().alias(\"income_mean\"),\n                pl.col(\"income\").median().alias(\"income_median\"),\n                pl.col(\"children\").mean().alias(\"children_mean\"),\n                pl.col(\"car\").count().alias(\"car_count\"),\n            ]\n        )\n        .collect()\n    ),\n}\naggregate_complex = run_test(test_dict, \"Aggregate (complex)\")\n```\n\n::: {#fig-fig11 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"80b98c0e-f752-4170-836f-be55468a45cf\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"80b98c0e-f752-4170-836f-be55468a45cf\")) {                    Plotly.newPlot(                        \"80b98c0e-f752-4170-836f-be55468a45cf\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.033043300005374476,0.02433690000907518,0.024836399999912828,0.024439899978460744,0.026072799984831363,0.02594570000655949,0.037418599997181445,0.02797409999766387,0.027237500005867332,0.02532950000022538,0.02434430000721477,0.024264800013042986,0.023765799996908754,0.024171199998818338,0.0232984000176657,0.023279699991689995,0.023073499993188307,0.023437900003045797,0.022918000002391636,0.02340469998307526,0.023204500001156703,0.023005400027614087,0.023434899980202317,0.023553399980301037,0.023474300018278882,0.023958699981449172,0.023684300016611814,0.023727399995550513,0.023738999996567145,0.02340190001996234,0.023498800001107156,0.044389499991666526,0.044094799988670275,0.02738149999640882,0.026881199999479577,0.042057700018631294,0.025356500002089888,0.03181879999465309,0.029900599998654798,0.026932300010230392,0.02433529999689199,0.02486570001929067,0.024603099998785183,0.02409099999931641,0.024050399981206283,0.024460500018903986,0.024884399987058714,0.02728060001390986,0.027806100028101355,0.0277222000004258,0.027287300006719306,0.02720959999714978,0.028435199987143278,0.030145199998514727,0.03928739999537356,0.04174600000260398,0.028598699980648234,0.026164699986111373,0.02903919998789206,0.059824900003150105,0.05227789998752996,0.03628589998697862,0.033556200010934845,0.03815999999642372,0.031057799991685897,0.0340425000176765,0.03593360001104884,0.03503060000366531,0.03414170001633465,0.03358810002100654,0.03235359999234788,0.0284793000028003,0.02726610001991503,0.03045590000692755,0.032435900007840246,0.033533800014993176,0.031311600003391504,0.03000699999392964,0.031261099997209385,0.028358400013530627,0.02768090000608936,0.025839499983703718,0.028982599993469194,0.02759340000920929,0.026387899997644126,0.030096100002992898,0.030928099993616343,0.03604450001148507,0.033824100013589486,0.03318309999303892,0.03380569998989813,0.032222800015006214,0.03098780001164414,0.030331000016303733,0.02872989999013953,0.028227200004039332,0.024230499984696507,0.02363619999960065,0.023162700003013015,0.02392360000521876,0.0026507000147830695,0.0013908999972045422,0.0016722999862395227,0.0017061999824363738,0.0018557999865151942,0.0015202000213321298,0.002954900002805516,0.0018381999980192631,0.001080799993360415,0.0013160999806132168,0.0015930999943520874,0.00119270000141114,0.001562199991894886,0.0021240999922156334,0.001987099996767938,0.0018279000069014728,0.001816600008169189,0.0009871000074781477,0.002034799981629476,0.0010381000174675137,0.0020318999886512756,0.000838099978864193,0.001433600002201274,0.0014179999998304993,0.0007951000006869435,0.001718199986498803,0.001217399985762313,0.0017907999863382429,0.002283000008901581,0.0023501999967265874,0.0017561000131536275,0.00173940000240691,0.0010858000023290515,0.001985500013688579,0.001448099996196106,0.0017707000079099089,0.0013821999891661108,0.0024087999772746116,0.0011175999825354666,0.0023274999985005707,0.0011699000024236739,0.0008904999995138496,0.0009285999985877424,0.0021058999991510063,0.0013778000138700008,0.0010185999854002148,0.0009139000030700117,0.0016746000037528574,0.0014532999775838107,0.0016370000084862113,0.0009737999935168773,0.0014467999862972647,0.0016250000044237822,0.001104399998439476,0.0019393999828025699,0.001951000012923032,0.0015636000025551766,0.0018683999951463193,0.0021923999884165823,0.0019140999938827008,0.0018254999886266887,0.0009788000024855137,0.0013602999970316887,0.001436399994418025,0.0021244999952614307,0.0013581999810412526,0.0016294000088237226,0.0014445999986492097,0.0012433999800123274,0.0014580999850295484,0.0010457999887876213,0.00105489999987185,0.0017828000127337873,0.0017648999928496778,0.00144599998020567,0.0016127999988384545,0.0009123999916482717,0.0011032000184059143,0.001442200009478256,0.0011842999956570566,0.0010863000061362982,0.0011526000162120908,0.0008891000179573894,0.0009992000123020262,0.001271499990252778,0.0010648999887052923,0.001624900003662333,0.0017989000189118087,0.0014032000035513192,0.0009241999941878021,0.0016968999989330769,0.001327100006164983,0.0010787000064738095,0.0011675999849103391,0.0010363000037614256,0.001819099998101592,0.0020918000082019717,0.0015311000170186162,0.0016347999917343259,0.001541099976748228],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=27.487450ms, Polars=1.455700ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('80b98c0e-f752-4170-836f-be55468a45cf');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nPerforming a complex aggregation\n:::\n:::\n\n\n::: {.callout-note}\n\nWhile Pandas showcased noteworthy speed for the simple aggregation, the more intricate task exposed significant disparities between the two libraries. Polars took a commanding lead in this scenario, presenting a considerably faster performance compared to Pandas.\n:::\n\n# Whole workflow\n\nWe're going to tackle this in two versions. First, we'll use `pl.read_csv` for Polars, assessing the time it takes to complete the entire workflow on a DataFrame already in memory. Then, for the second version, we'll employ `pl.scan_csv` for Polars. This nifty function lets us lazily read data from a CSV file or multiple files using glob patterns.\n\nThe cool part? With `pl.scan_csv`, the query optimizer can push down predicates and projections to the scan level. This nifty move has the potential to cut down on memory overhead. Let's dive into both versions and see how they stack up!\n\n## Using `pl.read_csv`\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (\n        df_pandas.loc[:, lambda df: ~df.columns.isin([\"is_married\"])]\n        .query(\"name=='David' and born>1980 and city != 'London' and children >= 3\")\n        .assign(\n            born=lambda df: df.born.div(100).round(),\n            name=lambda df: df.name.str.lower(),\n            city=lambda df: df.city.str.upper(),\n            zip_code=lambda df: df.zip_code.mul(2),\n            income=lambda df: df.income.div(10),\n            children=lambda df: df.children.astype(\"bool\"),\n            car=lambda df: df.car.str[0],\n        )\n        .groupby(\n            [\n                \"name\",\n                \"car\",\n            ]\n        )\n        .agg(\n            born_min=(\"born\", min),\n            born_max=(\"born\", max),\n            income_mean=(\"income\", np.mean),\n            income_median=(\"income\", np.median),\n            children_mean=(\"children\", np.mean),\n            car_count=(\"car\", \"count\"),\n        )\n    ),\n    \"Polars\": lambda: (\n        df_polars.lazy()\n        .select(cs.all() - cs.ends_with(\"married\"))\n        .filter(\n            (pl.col(\"name\") == \"David\")\n            & (pl.col(\"born\") > 1980)\n            & (pl.col(\"city\") != \"London\")\n            & (pl.col(\"children\") >= 3)\n        )\n        .with_columns(\n            [\n                (pl.col(\"born\") / 100).round(),\n                pl.col(\"name\").str.to_lowercase(),\n                pl.col(\"city\").str.to_uppercase(),\n                pl.col(\"zip_code\") * 2,\n                (pl.col(\"income\") / 10),\n                pl.col(\"children\").cast(pl.Boolean),\n                pl.col(\"car\").str.slice(0, length=1),\n            ]\n        )\n        .groupby(\n            [\n                \"name\",\n                \"car\",\n            ]\n        )\n        .agg(\n            [\n                pl.col(\"born\").min().alias(\"born_min\"),\n                pl.col(\"born\").max().alias(\"born_max\"),\n                pl.col(\"income\").mean().alias(\"income_mean\"),\n                pl.col(\"income\").median().alias(\"income_median\"),\n                pl.col(\"children\").mean().alias(\"children_mean\"),\n                pl.col(\"car\").count().alias(\"car_count\"),\n            ]\n        )\n        .collect()\n    ),\n}\nwhole_workflow_read_csv = run_test(test_dict, \"Whole workflow\")\n```\n\n::: {#fig-fig12 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"b957129a-ea4e-411a-9b43-beed20f092f2\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"b957129a-ea4e-411a-9b43-beed20f092f2\")) {                    Plotly.newPlot(                        \"b957129a-ea4e-411a-9b43-beed20f092f2\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.02578890000586398,0.02564069998334162,0.02405410000937991,0.020875499991234392,0.02513390002422966,0.0186223000055179,0.018118300009518862,0.018077599990647286,0.018545600003562868,0.015205799980321899,0.01173580001341179,0.019217099994421005,0.011638500000117347,0.011275800003204495,0.010899599990807474,0.011044300015782937,0.011256700003286824,0.010883700015256181,0.012211099994601682,0.01637309999205172,0.010868599987588823,0.010814600012963638,0.010986900015268475,0.010911499994108453,0.010885100025916472,0.0111503999796696,0.010943300003418699,0.010976500023389235,0.011134400003356859,0.01084830000763759,0.01081279999925755,0.015060900012031198,0.011544199980562553,0.016791400004876778,0.014981499989517033,0.010988000023644418,0.012175000010756776,0.01190009998390451,0.011856899975100532,0.01491369999712333,0.015674700000090525,0.011263499996857718,0.011124100012239069,0.011050800007069483,0.011878699995577335,0.01183209998998791,0.01092969998717308,0.012711999996099621,0.01279369997791946,0.012510100001236424,0.01121869997587055,0.01184110000031069,0.013852500007487833,0.013540099986130372,0.012799699994502589,0.011551200004760176,0.011345300008542836,0.011059100012062117,0.011338099982822314,0.011854500015033409,0.010731399990618229,0.011851999995997176,0.01659700000891462,0.03770370001439005,0.019144599995343015,0.01587390000349842,0.015372699999716133,0.016039200010709465,0.01411829999415204,0.01753460001782514,0.012456399999791756,0.011721400020178407,0.011535400000866503,0.011115500004962087,0.01221149999764748,0.013299799989908934,0.01200240000616759,0.018847899977117777,0.011636699986411259,0.019258800020907074,0.012317700020503253,0.011846000008517876,0.011639000003924593,0.010837299982085824,0.011916200019186363,0.012388700008159503,0.011108299979241565,0.011585900007048622,0.012360499997157604,0.011945900012506172,0.011086999991675839,0.01087209998513572,0.011400100018363446,0.010977899975841865,0.011805899994214997,0.0114025000075344,0.010978200007230043,0.011751099984394386,0.01151489999028854,0.011012300004949793,0.00314250000519678,0.001876599999377504,0.002198600006522611,0.0020691999816335738,0.002146300015738234,0.0020158000115770847,0.002107999986037612,0.002292899996973574,0.0028550999995786697,0.0034439000010024756,0.003263699996750802,0.0025784000172279775,0.0035296000132802874,0.002263699978357181,0.0041203000000678,0.0022754999808967113,0.002303500019479543,0.0028697999950964004,0.002199600014137104,0.0024498999991919845,0.0029924999980721623,0.0032396000169683248,0.002766299992799759,0.0036518999841064215,0.002693999995244667,0.003317100025014952,0.002355600008741021,0.002059599995845929,0.002066199987893924,0.0019890000112354755,0.002310600015334785,0.0022001999896019697,0.0023256000131368637,0.002458600007230416,0.0019771999795921147,0.0024571999965701252,0.002411599998595193,0.002421400015009567,0.0023278000007849187,0.0020745000219903886,0.0018694000027608126,0.0018343999981880188,0.001802400016458705,0.0018649999983608723,0.0016856000002007931,0.0019962999795097858,0.002092800015816465,0.0027771000168286264,0.0018912999948952347,0.0017684999911580235,0.0018780999816954136,0.002025499998126179,0.0018816000083461404,0.0016422999906353652,0.0016946000105235726,0.0021155999857001007,0.0016942000074777752,0.0023956999939400703,0.0019229999743402004,0.0017954999930225313,0.0014505000144708902,0.0020118000102229416,0.0023318999737966806,0.0022939000045880675,0.002113499998813495,0.0017875000194180757,0.0030220999906305224,0.0018921000009868294,0.0017216999840456992,0.0014684000052511692,0.0017680000164546072,0.0019131000153720379,0.001945199997862801,0.0018572999979369342,0.0014612999802920967,0.0021422000136226416,0.0019597999926190823,0.00176009998540394,0.001701500004855916,0.0017774000007193536,0.0019804000039584935,0.0029909000149928033,0.0022587999992538244,0.0018222999933641404,0.002067299996269867,0.002129500004230067,0.0018505000043660402,0.0028750000055879354,0.0026575000083539635,0.0020499000092968345,0.0015780999965500087,0.0023862000089138746,0.0034927000233437866,0.0018822000129148364,0.0028507999959401786,0.002702300000237301,0.001801800011890009,0.0020551999914459884,0.001571700006024912,0.0016500999918207526],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=11.843550ms, Polars=2.083650ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('b957129a-ea4e-411a-9b43-beed20f092f2');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nPerforming a representative workflow\n:::\n:::\n\n\n## Using `pl.scan_csv`\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (\n        df_pandas.loc[:, lambda df: ~df.columns.isin([\"is_married\"])]\n        .query(\"name=='David' and born>1980 and city != 'London' and children >= 3\")\n        .assign(\n            born=lambda df: df.born.div(100).round(),\n            name=lambda df: df.name.str.lower(),\n            city=lambda df: df.city.str.upper(),\n            zip_code=lambda df: df.zip_code.mul(2),\n            income=lambda df: df.income.div(10),\n            children=lambda df: df.children.astype(\"bool\"),\n            car=lambda df: df.car.str[0],\n        )\n        .groupby(\n            [\n                \"name\",\n                \"car\",\n            ]\n        )\n        .agg(\n            born_min=(\"born\", min),\n            born_max=(\"born\", max),\n            income_mean=(\"income\", np.mean),\n            income_median=(\"income\", np.median),\n            children_mean=(\"children\", np.mean),\n            car_count=(\"car\", \"count\"),\n        )\n    ),\n    \"Polars\": lambda: (\n        pl.scan_csv(\"sample.csv\")\n        .select(cs.all() - cs.ends_with(\"married\"))\n        .filter(\n            (pl.col(\"name\") == \"David\")\n            & (pl.col(\"born\") > 1980)\n            & (pl.col(\"city\") != \"London\")\n            & (pl.col(\"children\") >= 3)\n        )\n        .with_columns(\n            [\n                (pl.col(\"born\") / 100).round(),\n                pl.col(\"name\").str.to_lowercase(),\n                pl.col(\"city\").str.to_uppercase(),\n                pl.col(\"zip_code\") * 2,\n                (pl.col(\"income\") / 10),\n                pl.col(\"children\").cast(pl.Boolean),\n                pl.col(\"car\").str.slice(0, length=1),\n            ]\n        )\n        .groupby(\n            [\n                \"name\",\n                \"car\",\n            ]\n        )\n        .agg(\n            [\n                pl.col(\"born\").min().alias(\"born_min\"),\n                pl.col(\"born\").max().alias(\"born_max\"),\n                pl.col(\"income\").mean().alias(\"income_mean\"),\n                pl.col(\"income\").median().alias(\"income_median\"),\n                pl.col(\"children\").mean().alias(\"children_mean\"),\n                pl.col(\"car\").count().alias(\"car_count\"),\n            ]\n        )\n        .collect()\n    ),\n}\nwhole_workflow_scan_csv = run_test(test_dict, \"Whole workflow (scan_csv)\")\n```\n\n::: {#fig-fig13 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"a3ada7e3-1eec-46a6-bc3c-4460f5c21dc7\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"a3ada7e3-1eec-46a6-bc3c-4460f5c21dc7\")) {                    Plotly.newPlot(                        \"a3ada7e3-1eec-46a6-bc3c-4460f5c21dc7\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.014324399991892278,0.011277500016149133,0.013251800002763048,0.012614999985089526,0.011555400007637218,0.011380399984773248,0.011089000006904826,0.011961600015638396,0.013466500007780269,0.019863299996359274,0.012695200013695285,0.011052000016206875,0.011214800004381686,0.01164529999368824,0.017763300013029948,0.014109899988397956,0.011458299995865673,0.013613299990538508,0.015853499993681908,0.011198899999726564,0.011293599993223324,0.011544500011950731,0.014108900009887293,0.01296259998343885,0.011442899995017797,0.012769199995091185,0.014187399996444583,0.012748800014378503,0.011486500006867573,0.012097600003471598,0.01217140001244843,0.011877799988724291,0.01186910000978969,0.011676699999952689,0.011006400018231943,0.010913800011621788,0.010915999999269843,0.010805900004925206,0.01537320000352338,0.012461600010283291,0.011190299992449582,0.011313299997709692,0.010769999993499368,0.011300500016659498,0.012109300005249679,0.012665700021898374,0.01093409999157302,0.011254399985773489,0.011149400001158938,0.01083189999917522,0.011182999995071441,0.010838799993507564,0.011122799973236397,0.010917699983110651,0.011101299984147772,0.01134459997410886,0.010827299993252382,0.016905500000575557,0.017909100017277524,0.0109119999979157,0.011762999987695366,0.014333900006022304,0.014231300010578707,0.011034099996322766,0.010825200006365776,0.011121100018499419,0.013400299998465925,0.01839389998349361,0.019326500012539327,0.018428599985782057,0.01844760001404211,0.01581480001914315,0.0182992999907583,0.015881700004683807,0.010860000009415671,0.011353200010489672,0.012667199975112453,0.014291799976490438,0.018296900001587346,0.013054000010015443,0.011124700016807765,0.010838300018804148,0.011057800002163276,0.010934999998426065,0.011170100013259798,0.010822300013387576,0.0108157999929972,0.011114299995824695,0.010811799991643056,0.010998699988704175,0.010929600015515462,0.010772100009489805,0.010873799998080358,0.011400699993828312,0.011224199988646433,0.010997200006386265,0.010746500018285587,0.01118010000209324,0.010836200002813712,0.01166780001949519,0.006266900018090382,0.004968699999153614,0.004552500002318993,0.0038121000106912106,0.005991099984385073,0.005331299995305017,0.005892100016353652,0.005718499975046143,0.006182500015711412,0.004447399987839162,0.007365199999185279,0.006000900000799447,0.005939299997407943,0.005822999984957278,0.005818400008138269,0.007760799984680489,0.0054416000202763826,0.006266899988986552,0.005269800021778792,0.005535100004635751,0.005114900006446987,0.004439000011188909,0.00599900001543574,0.005619000003207475,0.004701400001067668,0.005493600008776411,0.005126199976075441,0.0055041000014171,0.00544639999861829,0.00615460000699386,0.005487199989147484,0.005555799987632781,0.005389099998865277,0.005478400009451434,0.005165700014913455,0.005704799987142906,0.005425099981948733,0.005782399995950982,0.0057496000081300735,0.005189100018469617,0.009152599988738075,0.007679000002099201,0.006461500015575439,0.005362099997000769,0.0052109000098425895,0.005794199998490512,0.005462300003273413,0.005682999995769933,0.004727899999124929,0.006750500004272908,0.00677840001299046,0.00568640002165921,0.0064894999959506094,0.005766300018876791,0.00633529998594895,0.004688400018494576,0.005256899981759489,0.007016999996267259,0.005883600009838119,0.005698799999663606,0.004629700008081272,0.00618719999329187,0.005619200004730374,0.006289699987974018,0.005324400000972673,0.0055921000021044165,0.004724600003100932,0.006830700003774837,0.004986799991456792,0.005437099986011162,0.0049903999897651374,0.004734699992695823,0.004121300007682294,0.004566999996313825,0.0054348999983631074,0.004828300006920472,0.005397600005380809,0.004726900020614266,0.00537819997407496,0.004463799996301532,0.00462560000596568,0.004617300000973046,0.005070600018370897,0.004502499999944121,0.00428930000634864,0.005601500015472993,0.004945800028508529,0.00462110000080429,0.005116199987241998,0.004792599997017533,0.005113699997309595,0.006457899988163263,0.005269100016448647,0.005438699998194352,0.004925100016407669,0.005026900005759671,0.005022500001359731,0.005875300004845485,0.00505969999358058,0.0052180000056978315],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=11.390550ms, Polars=5.437900ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('a3ada7e3-1eec-46a6-bc3c-4460f5c21dc7');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nPerforming a representative workflow (using `pl_scan_csv` for Polars)\n:::\n:::\n\n\nAs evident, the utilization of `scan_csv` increased the required time by about 3-4 times. However, even with this increase, Polars still manages to maintain a substantial advantage of around 5 times faster than the entire workflow executed using Pandas.\n\n::: {.callout-note}\n\nWhen we consider the entirety of the data processing pipeline, irrespective of the file reading approach, Polars emerges as the victor. It consistently exhibits a considerable speed advantage compared to Pandas.\n\n:::\n\n# Putting it all together\n\nTime to bring together all the things we've explored! Let's sum up what we've learned.\n\n::: {.cell .column-page execution_count=21}\n``` {.python .cell-code}\nsummary = pd.concat(\n    [\n        read_csv,\n        read_parquet,\n        # select_col_not_in_memory,\n        select_col_in_memory,\n        filter_row_one_condition,\n        filter_row_multiple_condition,\n        operate_one_column,\n        operate_multiple_column,\n        concatenate,\n        aggregate_simple,\n        aggregate_complex,\n        whole_workflow_read_csv,\n        # whole_workflow_scan_csv\n    ],\n    axis=1,\n)\n\nfig = (\n    summary.melt(var_name=\"experiment\", value_name=\"time_sec\")\n    .assign(\n        package=lambda df: df.experiment.str[-6:],\n        experiment=lambda df: df.experiment.str[:-7],\n    )\n    .groupby([\"experiment\", \"package\"])\n    .time_sec.mean()\n    .mul(1000)\n    .reset_index()\n    .pivot(columns=\"package\", values=\"time_sec\", index=\"experiment\")\n    .sort_values(\n        by=\"polars\",\n    )\n    .reset_index()\n    .pipe(\n        lambda df: px.bar(\n            df,\n            y=\"experiment\",\n            x=[\"pandas\", \"polars\"],\n            barmode=\"group\",\n            text_auto='.2s',\n            orientation=\"h\",\n            labels={\"value\": \"Average execution Time (msec)\", \"experiment\": \"\"},\n            title= f'<b>Speed Showdown in Data Workflow Operations</b> <br><sup><i>Pandas {pd.__version__} vs. Polars {pl.__version__}</i></sup>',\n            width=1000,\n            height=700,\n        )\n    )\n)\nfig.update_xaxes(tickangle=90)\nfig.update_layout(yaxis=dict(automargin=True), legend_title_text=\"Library\")\nfig.update_traces(textposition='outside')\n```\n\n::: {#fig-fig14 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"7f05bc71-8e0e-4415-874a-724dc6275e52\" class=\"plotly-graph-div\" style=\"height:700px; width:1000px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"7f05bc71-8e0e-4415-874a-724dc6275e52\")) {                    Plotly.newPlot(                        \"7f05bc71-8e0e-4415-874a-724dc6275e52\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=pandas\\u003cbr\\u003eAverage execution Time (msec)=%{x}\\u003cbr\\u003e=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"pandas\",\"marker\":{\"color\":\"#1F77B4\",\"pattern\":{\"shape\":\"\"}},\"name\":\"pandas\",\"offsetgroup\":\"pandas\",\"orientation\":\"h\",\"showlegend\":true,\"textposition\":\"outside\",\"texttemplate\":\"%{x:.2s}\",\"x\":[0.02760599774774164,1.0919300021487288,0.6083379979827441,1.7745890008518472,29.112806001212448,3.8093190026120283,1.6656280009192415,13.591129000415094,5.471862999547739,11.996209000353701,6.487957000499591],\"xaxis\":\"x\",\"y\":[\"Select column\",\"Concatenate\",\"Operate (one column)\",\"Filter (simple)\",\"Aggregate (complex)\",\"Filter (complex)\",\"Aggregate (simple)\",\"Whole workflow\",\"Read parquet\",\"Operate (more columns)\",\"Read csv\"],\"yaxis\":\"y\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=polars\\u003cbr\\u003eAverage execution Time (msec)=%{x}\\u003cbr\\u003e=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"polars\",\"marker\":{\"color\":\"#FF7F0E\",\"pattern\":{\"shape\":\"\"}},\"name\":\"polars\",\"offsetgroup\":\"polars\",\"orientation\":\"h\",\"showlegend\":true,\"textposition\":\"outside\",\"texttemplate\":\"%{x:.2s}\",\"x\":[0.0327600006130524,0.35051999904680997,0.5790099993464537,1.2901360006071627,1.5214459979324602,1.6437410007347353,2.0140590012306347,2.2376080011599697,2.330841998627875,2.3614680027822033,2.8331239987164736],\"xaxis\":\"x\",\"y\":[\"Select column\",\"Concatenate\",\"Operate (one column)\",\"Filter (simple)\",\"Aggregate (complex)\",\"Filter (complex)\",\"Aggregate (simple)\",\"Whole workflow\",\"Read parquet\",\"Operate (more columns)\",\"Read csv\"],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Average execution Time (msec)\"},\"tickangle\":90},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"},\"automargin\":true},\"legend\":{\"title\":{\"text\":\"Library\"},\"tracegroupgap\":0},\"title\":{\"text\":\"\\u003cb\\u003eSpeed Showdown in Data Workflow Operations\\u003c\\u002fb\\u003e \\u003cbr\\u003e\\u003csup\\u003e\\u003ci\\u003ePandas 2.0.3 vs. Polars 0.18.11\\u003c\\u002fi\\u003e\\u003c\\u002fsup\\u003e\"},\"barmode\":\"group\",\"height\":700,\"width\":1000},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('7f05bc71-8e0e-4415-874a-724dc6275e52');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nAnalyzing Speed Differences Between Pandas and Polars in Common Data Science Workflow Operations\n:::\n:::\n\n\nThroughout our exploration, Polars has consistently outperformed Pandas. We intentionally focused on tasks that frequently arise in data analysis, encompassing file reading, column selection, filtering, and more. However, where Polars truly shines is in aggregation, capitalizing on its multiprocessing prowess. Take a glance at @fig-fig14, and you'll notice that reading files is the most time-consuming step for Polars. To address this (and reduce memory usage at the same time), we have the nifty `scan_csv` function that enables Polars to operate in a lazy mode, optimizing the entire data pipeline. It's clear that Polars packs a punch in the realm of data processing!\n\nShould you consider using Polars? Based on the findings of this experiment, it's evident that Polars can bring substantial benefits to every stage of your data processing. Its remarkable speed can make a significant impact. If you're open to investing time in understanding its API (which isn't drastically different from Pandas), I'm confident your projects will gain a significant speed boost. And don't forget, the [trajectory](https://www.crunchbase.com/funding_round/polars-seed--963c89d2) of the project seems promising, implying a bright future ahead.\n\nWhatever path you choose, ensure you become well-acquainted with your selected library and stay current with emerging technologies. And above all, relish the journey. Happy coding, and until next time! 🐼🐍🤓💻\n\n",
    "supporting": [
      "polars_speed_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.24.1.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}