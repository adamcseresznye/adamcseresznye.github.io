{
  "hash": "263424fc46ce314303c84508eb096b66",
  "result": {
    "markdown": "---\ntitle: 'The Ultimate Speed Test: Pandas vs Polars '\nauthor: Adam Cseresznye\ndate: '2023-08-13'\ncategories:\n  - Polars\n  - Pandas\ntoc: true\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n---\n\n\n![](hans-jurgen-mager-qQWV91TTBrE-unsplash.jpg){fig-align=\"center\" width=50%}\n\nAfter I shared my initial article about [\"Getting Started with Polars\"](https://adamcseresznye.github.io/blog/posts/polars/Polars_revised.html), I couldn't help but thinking about a potential speed comparison between Polars and Pandas given the excitement about the new release of [Pandas 2.0](https://pandas.pydata.org/docs/dev/whatsnew/v2.0.0.html), which promised to bring blazing-fast performance to the table. Pandas 2.0 was announced to come packed with cool features, including the addition of Apache Arrow (pyarrow) as its backing memory format. The big perk of Apache Arrow is that it makes operations speedier and more memory-friendly. Naturally, this got me wondering: how does Pandas 2.0 measure up against Polars? Let's dive in and find out!\n\n# Setup\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport polars as pl\nimport polars.selectors as cs\n\nimport numpy as np\nimport timeit\nimport random\n\nimport plotly.io as pio\nimport plotly.express as px\n\npio.templates.default = \"presentation\"\n\nprint(pd.__version__)\nprint(pl.__version__)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.0.3\n0.18.11\n```\n:::\n:::\n\n\n::: {.callout-note}\n\nThroughout this article, we'll be working with the latest versions of the packages: Pandas 2.0.3 and Polars 0.18.11.\n\n\n:::\n\n# Generate the synthetic data\n\nFor the purpose of benchmarking, we're going to create our own dataset. To ensure simplicity and uniformity, we'll generate a dataframe containing columns like name, year of birth, and city of residence â€“ pretty straightforward stuff. We're aiming for a dataset of 10,000 rows. While we could certainly run this benchmark on a dataframe with more than a million rows, our intention is to provide a realistic example. The code we'll provide allows you to effortlessly explore various scenarios according to your requirements. Feel free to use it or modify it if you want to perform your own test.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef create_sample_dataframe(n_rows: int, name: str, seed: int = 42) -> pl.DataFrame:\n    \"\"\"\n    Create a sample Polars DataFrame with the specified number of rows.\n\n    This function generates random data for several columns and creates a Polars\n    DataFrame with the specified number of rows. The generated data includes information\n    about names, birth years, cities, zip codes, incomes, marital status, number of children,\n    and car brands. The resulting DataFrame is written to CSV and Parquet files named\n    'sample.csv' and '{name}.parquet', respectively.\n\n    Parameters\n    ----------\n    n_rows : int\n        The number of rows to generate in the sample DataFrame.\n    name : str\n        The name to be used when writing the Parquet file.\n    seed : int, optional\n        The seed to use when generating random data. Default is 42.\n\n    Returns\n    -------\n    pl.DataFrame\n        The first 5 rows of the generated sample DataFrame.\n    \"\"\"\n    random.seed(seed)\n    np.random.seed(seed)\n\n    data = {\n        \"name\": np.random.choice([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eva\"], n_rows),\n        \"born\": np.random.randint(1950, 1990, size=n_rows),\n        \"city\": np.random.choice(\n            [\"Shanghai\", \"San Francisco\", \"London\", \"Munich\", \"Mumbai\"], n_rows\n        ),\n        \"zip_code\": np.random.randint(10000, 99999, size=n_rows),\n        \"income\": np.random.normal(50000, 10000, size=n_rows),\n        \"is_married\": np.random.choice([True, False], n_rows),\n        \"children\": np.random.randint(0, 5, size=n_rows),\n        \"car\": np.random.choice([\"Ford\", \"BMW\", \"Toyota\", \"Bentley\", \"Mini\"], n_rows),\n    }\n    temp_df = pl.DataFrame(data)\n    temp_df.write_csv(\"sample.csv\")\n    temp_df.write_parquet(f\"{name}.parquet\")\n    return temp_df.head()\n\n\ncreate_sample_dataframe(n_rows=10_000, name=\"sample\", seed=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (5, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>born</th><th>city</th><th>zip_code</th><th>income</th><th>is_married</th><th>children</th><th>car</th></tr><tr><td>str</td><td>i32</td><td>str</td><td>i32</td><td>f64</td><td>bool</td><td>i32</td><td>str</td></tr></thead><tbody><tr><td>&quot;David&quot;</td><td>1953</td><td>&quot;Shanghai&quot;</td><td>35716</td><td>69693.044244</td><td>false</td><td>4</td><td>&quot;Bentley&quot;</td></tr><tr><td>&quot;Eva&quot;</td><td>1984</td><td>&quot;London&quot;</td><td>30931</td><td>30547.027839</td><td>true</td><td>1</td><td>&quot;Toyota&quot;</td></tr><tr><td>&quot;Alice&quot;</td><td>1979</td><td>&quot;San Francisco&quot;</td><td>85967</td><td>63489.882712</td><td>false</td><td>1</td><td>&quot;Mini&quot;</td></tr><tr><td>&quot;Bob&quot;</td><td>1969</td><td>&quot;San Francisco&quot;</td><td>64527</td><td>56030.692112</td><td>false</td><td>1</td><td>&quot;Toyota&quot;</td></tr><tr><td>&quot;David&quot;</td><td>1979</td><td>&quot;Munich&quot;</td><td>53316</td><td>51118.005552</td><td>true</td><td>3</td><td>&quot;Ford&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n# Define helper class\n\nIn order to streamline our code, we'll create a convenient helper class featuring two essential methods: `get_time` and `get_figure`. The `get_time` method leverages the `timeit.repeat` function to accurately gauge the execution time of our code. In this context, we'll set the parameters `number = 1` and `repeat = 100`. This configuration runs the operations 100 times, allowing us to derive key statistics like the mean, median, and standard deviation. \n\nOn the other hand, the `get_figure` method takes these gathered results and generates a visually appealing image using Plotly. \n\nTo bring it all together and keep things simple, we've designed the `run_test` function. This function orchestrates the entire process, seamlessly merging the steps outlined above.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nclass Timeit:\n    \"\"\"\n    A class for measuring the execution time of multiple functions.\n    This class provides methods for measuring the execution time of\n    multiple functions using the `timeit` module. The functions to be\n    tested are passed to the constructor as a dictionary, where the\n    keys are the names of the functions and the values are the functions\n    themselves. The `number` and `repeat` parameters control how many times\n    each function is executed and how many times the timing is repeated,\n    respectively.\n\n    The `get_time` method measures the execution time of each function and\n    stores the results in a dictionary, where the keys are the names of\n    the functions and the values are lists of execution times. The `get_figure`\n    method generates a box plot of the execution times using the `plotly.express.box`\n    function.\n\n    Parameters\n    ----------\n    func_dict : dict\n        A dictionary of functions to test, where the keys are the names of the\n        functions and the values are the functions themselves.\n    number : int, optional\n        The number of times to execute each function in each timing run (default is 1).\n    repeat : int, optional\n        The number of times to repeat each timing run (default is 20).\n\n    Attributes\n    ----------\n    results : dict or None\n        A dictionary of execution times for each function, where the keys are the names\n        of the functions and the values are lists of execution times. This attribute is\n        `None` until `get_time` is called.\n\n    Methods\n    -------\n    get_time()\n        Measure the execution time of each function and store the results in the `results` attribute.\n    get_figure()\n        Generate a box plot of the execution times using `plotly.express.box`.\n    \"\"\"\n\n    def __init__(self, func_dict, number=1, repeat=100):\n        self.func_dict = func_dict\n        self.number = number\n        self.repeat = repeat\n        self.results = None\n\n    def get_time(self):\n        \"\"\"\n        Measure the execution time of each function and store the results.\n        This method uses the `timeit.repeat` function to measure the execution time of each function\n        in `func_dict`. The results are stored in a dictionary, where the keys are the names of\n        the functions and the values are lists of execution times. This dictionary is also stored\n        in the `results` attribute of the `Timeit` object.\n\n        Returns\n        -------\n        dict\n            A dictionary of execution times for each function.\n        \"\"\"\n        results = {}\n        for k, v in self.func_dict.items():\n            results[k] = timeit.repeat(v, number=self.number, repeat=self.repeat)\n        self.results = results\n        return results\n\n    def get_figure(self):\n        \"\"\"\n        Generate a box plot of the execution times.\n        This method uses `plotly.express.box` to generate a box plot of the execution times\n        stored in `results`.If `results` is `None`, this method raises a `ValueError`.\n\n        Returns\n        -------\n        plotly.graph_objs.Figure\n            A box plot figure object.\n\n        Raises\n        ------\n        ValueError\n            If no results are available (i.e., if `get_time` has not been called).\n        \"\"\"\n        if self.results is None:\n            raise ValueError(\"No results available. Please run get_time first.\")\n        df = pd.DataFrame(self.results)\n        mean_times = df.median() * 1000\n        title = f'Median Execution Times: <br><sup>{\", \".join([f\"{k}={v:.6f}ms\" for k,v in mean_times.items()])}</sup>'\n        return px.box(\n            df,\n            points=\"all\",\n            labels={\"value\": \"time (sec)\", \"variable\": \"\"},\n            title=title,\n            width=600,\n            height=500,\n        )\n\n\ndef run_test(test: dict, name: str):\n    \"\"\"\n    Run a timing test on a dictionary of functions using the Timeit class and\n    return the results as a DataFrame.\n\n    This function takes a dictionary of functions as input, where the keys are\n    the names of the functions and the values are the functions themselves. It creates\n    a Timeit object with this dictionary and uses it to measure the execution time of\n    each function. The results are then displayed as a box plot using the `get_figure`\n    method of the Timeit object and returned as a Pandas DataFrame with columns renamed\n    according to the `name` argument.\n\n    Parameters\n    ----------\n    test : dict\n        A dictionary of functions to test, where the keys are the names of the functions\n        and the values are the functions themselves.\n    name : str\n        A string used to rename the columns of the returned DataFrame.\n\n    Returns\n    -------\n    pd.DataFrame\n        A DataFrame containing the results of the timing test, with columns renamed\n        according to the `name` argument.\n    \"\"\"\n\n    # Create a Timeit object\n    t = Timeit(test)\n    # Measure the execution time of the functions\n    results = t.get_time()\n    # Generate a box plot of the execution times\n    fig = t.get_figure()\n    fig.show()\n\n    return pd.DataFrame(results).rename(\n        columns={\"Pandas\": f\"{name}_pandas\", \"Polars\": f\"{name}_polars\"}\n    )\n```\n:::\n\n\n# Reading in data From a CSV File and parquet\n\n## CSV\n\nReading CSV files from disk is a task that data scientists often find themselves doing. Now, let's see how these two libraries compare for this particular job. To maximize the blazing-fast data handling capabilities of PyArrow, we'll equip Pandas with the `engine=\"pyarrow\"` and `dtype_backend=\"pyarrow\"` arguments. Let's see how these choices shape the performance!\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: pd.read_csv(\n        \"sample.csv\", engine=\"pyarrow\", dtype_backend=\"pyarrow\"\n    ),\n    \"Polars\": lambda: pl.read_csv(\"sample.csv\"),\n}\nread_csv = run_test(test_dict, \"Read csv\")\n```\n\n::: {#fig-fig1 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"1757bb1a-3cdc-4655-989c-4f732acef0c0\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"1757bb1a-3cdc-4655-989c-4f732acef0c0\")) {                    Plotly.newPlot(                        \"1757bb1a-3cdc-4655-989c-4f732acef0c0\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.026622400007909164,0.006750499989720993,0.006213699991349131,0.006449199994676746,0.0056203999993158504,0.007421800008160062,0.005938000002061017,0.0061080000014044344,0.006368999995174818,0.007276299991644919,0.006689200003165752,0.008050300006289035,0.007554700001492165,0.005190800002310425,0.005822899998747744,0.006178899988299236,0.007631299988133833,0.009725800002343021,0.009641800003009848,0.010656600003130734,0.00960309999936726,0.009889199995086528,0.008897499996237457,0.009680600007413886,0.00774059999093879,0.008433599999989383,0.008040900007472374,0.0070976999995764345,0.006293999991612509,0.006135399991762824,0.009689200000138953,0.007305500010261312,0.005971199992927723,0.0050534000038169324,0.00654499999654945,0.005804000000352971,0.005917800008319318,0.005967200006125495,0.007065500001772307,0.006417100012185983,0.006244700009119697,0.006015799997840077,0.005900199990719557,0.007036700000753626,0.005715100007364526,0.005523700005142018,0.0051038999954471365,0.005382299990742467,0.006294399994658306,0.005884099999093451,0.006833000006736256,0.006247999990591779,0.005505399996764027,0.006212799999048002,0.007301799996639602,0.007847200002288446,0.007382700001471676,0.006533800013130531,0.0071376999985659495,0.007442000001901761,0.00823839999793563,0.009122599993133917,0.008253499996499158,0.00861330000043381,0.008597299995017238,0.008136399992508814,0.005208200003835373,0.005573400005232543,0.005898699993849732,0.006745800012140535,0.006507700003567152,0.0069088000018382445,0.006056500002159737,0.0062646000005770475,0.007381800009170547,0.006499499999335967,0.006800799994380213,0.006415399999241345,0.007033799993223511,0.006526500001200475,0.006480800002464093,0.005946499994024634,0.006935999990673736,0.0074683999991975725,0.006562800001120195,0.007469199990737252,0.006453599999076687,0.006328100003884174,0.006835200008936226,0.006352800002787262,0.008710599999176338,0.007803499989677221,0.010712000002968125,0.008326099996338598,0.008298499989905395,0.008546900004148483,0.008352400007424876,0.008255000007920898,0.008462800004053861,0.009312900001532398,0.006516399997053668,0.002945600004750304,0.005506099987542257,0.0037628999998560175,0.003270200002589263,0.003074799999012612,0.0028525000088848174,0.006354699988150969,0.003986299998359755,0.0027642000059131533,0.0028626999992411584,0.00371439999435097,0.003394200000911951,0.0026135999942198396,0.0024837999953888357,0.0034454999986337498,0.0037847999919904396,0.0021277999912854284,0.0027528000064194202,0.0028798999992432073,0.004240700000082143,0.002810800011502579,0.0031374999962281436,0.003529299996444024,0.003733500008820556,0.002542999995057471,0.0033322999952360988,0.0029270000086398795,0.0036102999874856323,0.0028636000060942024,0.0034478999878047034,0.002523000002838671,0.002642299994477071,0.002210999999078922,0.002984999999171123,0.0026550000038696453,0.0025703999999677762,0.002035700003034435,0.0023963999992702156,0.002953000002889894,0.0025468000094406307,0.003110799996647984,0.0030955999973230064,0.003005599995958619,0.0025501999916741624,0.0027221999916946515,0.002634699994814582,0.0028298999968683347,0.0030602000042563304,0.002589100011391565,0.002794899992295541,0.0032285999914165586,0.0026538999954937026,0.0026796000020112842,0.0023778999893693253,0.001958699998795055,0.0026615999959176406,0.0030035999952815473,0.001972600002773106,0.002574900005129166,0.0029500000091502443,0.003023500001290813,0.0031090999982552603,0.0031989999988581985,0.0027018999971915036,0.00282990001142025,0.0031694999925093725,0.00223280000500381,0.002432799999951385,0.002795499996864237,0.00258169999870006,0.0026108000020030886,0.0025479999894741923,0.0023130000045057386,0.002539599998272024,0.002735200003371574,0.003515400007017888,0.0029208000050857663,0.003239400000893511,0.0032958999945549294,0.0029091000033076853,0.002785100004984997,0.0026090000028489158,0.002388199995039031,0.0024726999981794506,0.0023099999962141737,0.002428499996312894,0.002405699997325428,0.0023461999953724444,0.002333799988264218,0.0022314000088954344,0.002402300000539981,0.002170400010072626,0.0025999000063166022,0.0024403999996138737,0.0024656000023242086,0.002260299996123649,0.0025811999948928133,0.0026347999955760315,0.0022629000013694167],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=6.816900ms, Polars=2.744000ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('1757bb1a-3cdc-4655-989c-4f732acef0c0');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nReading in data From a CSV File\n:::\n:::\n\n\nFor the sake of comparison, we'll also demonstrate the timeit function invoked using Jupyter cell magic. You'll notice that the numbers generated this way are quite closely aligned with ours.\n\n::: {.cell tags='[]' execution_count=5}\n``` {.python .cell-code}\n%%timeit\npd.read_csv(\"sample.csv\", engine=\"pyarrow\", dtype_backend=\"pyarrow\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n8.37 ms Â± 207 Âµs per loop (mean Â± std. dev. of 7 runs, 100 loops each)\n```\n:::\n:::\n\n\n::: {.cell tags='[]' execution_count=6}\n``` {.python .cell-code}\n%%timeit\npl.read_csv(\"sample.csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.49 ms Â± 251 Âµs per loop (mean Â± std. dev. of 7 runs, 100 loops each)\n```\n:::\n:::\n\n\n## parquet\n\nNow, let's read the data in Parquet format.\n\n::: {.cell tags='[]' execution_count=7}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: pd.read_parquet(\n        \"sample.parquet\", engine=\"pyarrow\", dtype_backend=\"pyarrow\"\n    ),\n    \"Polars\": lambda: pl.read_parquet(\"sample.parquet\"),\n}\nread_parquet = run_test(test_dict, \"Read parquet\")\n```\n\n::: {#fig-fig2 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"89936bcf-3710-48a4-876c-b80549338486\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"89936bcf-3710-48a4-876c-b80549338486\")) {                    Plotly.newPlot(                        \"89936bcf-3710-48a4-876c-b80549338486\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.03958339999371674,0.006712299989885651,0.005714499988243915,0.006099900012486614,0.005985099996905774,0.005456200000480749,0.004442899997229688,0.0039514999953098595,0.004520699993008748,0.004630900002666749,0.004232999999658205,0.0040391000075032935,0.004691200010711327,0.005048299994086847,0.004605099995387718,0.004491200001211837,0.005986499993014149,0.006476700000348501,0.0038263999886112288,0.004424099999596365,0.004653399999369867,0.005019799995352514,0.0046258000074885786,0.005455899998196401,0.005268000008072704,0.005125900002894923,0.005200200001127087,0.005558999997447245,0.005020600001444109,0.004749799991259351,0.004194099994492717,0.004377099990961142,0.004265299998223782,0.004704500010120682,0.004938400001265109,0.004504500000621192,0.004116099997190759,0.004531099999439903,0.004390999994939193,0.003757800004677847,0.00463070000114385,0.0047122999967541546,0.00407729999278672,0.0050959999935003,0.004188999999314547,0.004066199995577335,0.003836599993519485,0.005512199990334921,0.00452259999292437,0.004207300007692538,0.005074900007457472,0.003932799998437986,0.004720700002508238,0.005096099994261749,0.004204099997878075,0.0042766000115079805,0.00411290000192821,0.004797899993718602,0.004007900002761744,0.004502499999944121,0.004517199995461851,0.004888800001936033,0.004306699993321672,0.005092900013551116,0.0045556999975815415,0.005104299998492934,0.004328099996200763,0.004815299995243549,0.004545300005702302,0.0045513999939430505,0.005590200002188794,0.003881199998431839,0.004517000008490868,0.004760299998451956,0.004597699997248128,0.003965200012316927,0.003677800006698817,0.004642299987608567,0.004604499990819022,0.004399999990710057,0.004334700002800673,0.0044649000046774745,0.004547500007902272,0.004859900000155903,0.004398399993078783,0.004682600003434345,0.0042098999983863905,0.00456629999098368,0.004973299990524538,0.0047421000053873286,0.005077600013464689,0.004988999993656762,0.004123199993046001,0.0043806000030599535,0.004524099989794195,0.005569000000832602,0.003860899989376776,0.003928799997083843,0.004117199991014786,0.003949299993109889,0.0024105000047711655,0.001996299994061701,0.0019175999914295971,0.0018962999893119559,0.002082399994833395,0.002261400004499592,0.001975999999558553,0.0018351999897276983,0.0023782999924151227,0.0020597999973688275,0.0022720999986631796,0.0022957000037422404,0.0021254000021144748,0.002094700001180172,0.0019778999994741753,0.002294099991559051,0.0020200999861117452,0.0020782000065082684,0.0020757000020239502,0.002180600000428967,0.001936300002853386,0.0020626000041374937,0.0022001999896019697,0.0022600000083912164,0.0019283000001451,0.0019372999959159642,0.002239900000859052,0.0022769999923184514,0.002343899992411025,0.002042400010395795,0.0022733000078005716,0.001618499998585321,0.0023222999880090356,0.0022942000068724155,0.0020859000069322065,0.00213199999416247,0.0023241000017151237,0.0024477999977534637,0.0020777000027010217,0.0020477999933063984,0.002667200009454973,0.002303300003404729,0.0022298999974736944,0.0018457999976817518,0.0021670999994967133,0.002421799988951534,0.0023136999952839687,0.0022757999977329746,0.0022083000076236203,0.0019415999995544553,0.0020819000055780634,0.0018022000003838912,0.00166529999114573,0.0017806999967433512,0.001964299997780472,0.0021453999943332747,0.0016651999903842807,0.0018814000068232417,0.0020912000036332756,0.0019465999939711764,0.0021665999956894666,0.0016394999984186143,0.002139899996109307,0.0021640000049956143,0.002717700001085177,0.001927999997860752,0.002361400009249337,0.0022776999976485968,0.002356800003326498,0.002372799994191155,0.002138399999239482,0.002053800009889528,0.002263999995193444,0.00224240000534337,0.0021198000031290576,0.0020820000063395128,0.001881500007584691,0.0023809999984223396,0.0020774000004166737,0.0024012999929254875,0.0022303000005194917,0.0022480000043287873,0.0025169000000460073,0.002184299999498762,0.0020816000032937154,0.002271000004839152,0.0020887999999104068,0.002407899999525398,0.002365099993767217,0.0023019000072963536,0.0025941999920178205,0.0029636999970534816,0.002711500012082979,0.0024566000065533444,0.0025724000006448478,0.0028377999988151714,0.0025692000053822994,0.003025300000444986,0.0026267000066582114,0.0028052999987266958],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=4.553550ms, Polars=2.182450ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('89936bcf-3710-48a4-876c-b80549338486');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nReading in data From a parquet File\n:::\n:::\n\n\n::: {.callout-note}\n\nPolars unquestionably wins this round, boasting a speed advantage of 2 to 4 times over Pandas.\n:::\n\n# Selecting Columns\n\nAlright, let's spice things up a bit and select some columns to see which library races ahead in terms of speed!\n\n## Files awaiting in-memory reading\n\nA clever approach to conserve memory and enhance speed involves reading only the columns essential for operations. Consider a scenario where we're interested in displaying just the names from this dataset. The big question now: how do these libraries measure up in terms of speed? Let's find out!\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: pd.read_csv(\n        \"sample.csv\", engine=\"pyarrow\", dtype_backend=\"pyarrow\", usecols=[\"name\"]\n    ),\n    \"Polars\": lambda: pl.scan_csv(\"sample.csv\").select(pl.col(\"name\")).collect(),\n}\nselect_col_not_in_memory = run_test(test_dict, \"Select column (not in memory)\")\n```\n\n::: {#fig-fig3 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"26986500-7573-4f75-bd59-5fbaa7373f30\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"26986500-7573-4f75-bd59-5fbaa7373f30\")) {                    Plotly.newPlot(                        \"26986500-7573-4f75-bd59-5fbaa7373f30\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.007779999999911524,0.006242300005396828,0.007663299998966977,0.008608699994510971,0.008737299998756498,0.008653299999423325,0.008379599996260367,0.008864399991580285,0.008194900001399219,0.009109999999054708,0.008249000005889684,0.00845100000151433,0.008300500005134381,0.007478700004867278,0.007652400003280491,0.00737469999876339,0.008573099999921396,0.00881029998708982,0.00869250000687316,0.006328199990093708,0.008723500010091811,0.006192799992277287,0.004343199994764291,0.0037860000011278316,0.005141399989952333,0.005272399997920729,0.005293199996231124,0.005316700000548735,0.004996899995603599,0.005573600006755441,0.004453600005945191,0.004685699997935444,0.0043017999996664,0.004444499994860962,0.004935500008286908,0.004319899991969578,0.004598100000293925,0.00405440000758972,0.0047088999999687076,0.0036638000019593164,0.003941899994970299,0.0034628000139491633,0.0033941000001505017,0.005136899999342859,0.005427199997939169,0.0055312000040430576,0.00453370000468567,0.020406900002853945,0.003996199986431748,0.004136000003200024,0.005142099995282479,0.007191800003056414,0.00467519999074284,0.0035611999919638038,0.003595300004235469,0.005288000000291504,0.005050599997048266,0.004648400004953146,0.005015499991714023,0.003928000005544163,0.004360999999335036,0.0041812999988906085,0.0035407999966992065,0.0036727999977301806,0.003371700004208833,0.003389599994989112,0.0033210000110557303,0.0039757999911671504,0.0040576000028522685,0.0035070000012638047,0.004931200004648417,0.005043700002715923,0.004585399990901351,0.00448629999300465,0.005362700001569465,0.00530050000816118,0.005209499999182299,0.005004699996788986,0.003999399996246211,0.0039130000077420846,0.004876999999396503,0.004092599992873147,0.003818700002739206,0.003656999993836507,0.004676299999118783,0.004428899992490187,0.0032272000098600984,0.003317599999718368,0.0047710000071674585,0.0035973000049125403,0.0033691999997245148,0.00408400000014808,0.00349879999703262,0.003730099997483194,0.0035188999900128692,0.0035914999898523092,0.0034848999930545688,0.003349299993715249,0.0032084999984363094,0.0035090000019408762,0.002530900004785508,0.0017742999916663393,0.0017083999991882592,0.001772000003256835,0.002101799997035414,0.0018497999990358949,0.0017930000030901283,0.0022173000033944845,0.003777199992327951,0.0019487999961711466,0.0019513000006554648,0.0018777999939629808,0.00197199999820441,0.0018170999974245206,0.0016288999904645607,0.0018404000002192333,0.001692600009846501,0.0015873999946052209,0.001573599991388619,0.0018788000015774742,0.0013975000038044527,0.0018885000026784837,0.0016788000066298991,0.0018646000098669901,0.002374900010181591,0.0022157000057632104,0.002460799994878471,0.0020687999931396917,0.0016251000051852316,0.0013853999989805743,0.0015325999993365258,0.0017043999978341162,0.0017173999949591234,0.0017648999928496778,0.0015759000089019537,0.00152160000288859,0.0017723999917507172,0.001690499993856065,0.00179049999860581,0.0016242999990936369,0.0017554999940330163,0.0014072000049054623,0.001701500004855916,0.0015589000104228035,0.0015327000000979751,0.002124299993738532,0.0016170000017154962,0.0016745000029914081,0.0014785999956075102,0.001554500006022863,0.001594800007296726,0.0017285000067204237,0.0016529999993508682,0.0020970000041415915,0.002416799994534813,0.002220599999418482,0.0017621000006329268,0.0018619000038597733,0.00178089999826625,0.0015139999886741862,0.001602799995453097,0.0016276999958790839,0.001592900007381104,0.0016715000092517585,0.0015325999993365258,0.001491400005761534,0.0017965000006370246,0.0020095999934710562,0.002379900004598312,0.0023736000002827495,0.0017700000025797635,0.0018453000084264204,0.0015438999980688095,0.0016897999885259196,0.0019838000007439405,0.0014053999911993742,0.0018030000064754859,0.001670800003921613,0.001801500009605661,0.0016455000004498288,0.0018522000027587637,0.0015263999957824126,0.0020336000015959144,0.001637299996218644,0.0014921000110916793,0.0017678000003797933,0.0017506000003777444,0.001749500006553717,0.0018949000077554956,0.0020539999968605116,0.0018391000048723072,0.0016256000089924783,0.0019083999941358343,0.001983999987714924,0.0017361000063829124,0.0015822000132175162,0.0016660999972373247,0.001835399991250597,0.0015694999892730266,0.001596000001882203],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=4.661800ms, Polars=1.753050ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('26986500-7573-4f75-bd59-5fbaa7373f30');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nSelecting Columns from a File Not Yet in Memory\n:::\n:::\n\n\n## File is in memory\n\nAs anticipated, Polars continues to showcase its swiftness. It's worth highlighting the usage of the `lazy` and `collect` methods in Polars. These nifty tools grant us access to the library's clever query optimization techniques, which play a pivotal role in significantly enhancing performance. OK, one step further: suppose our files are already loaded into memory. Would there still be a distinction in performance under this circumstance?\n\n::: {.cell tags='[]' execution_count=9}\n``` {.python .cell-code}\ndf_pandas = pd.read_csv(\"sample.csv\", engine=\"pyarrow\", dtype_backend=\"pyarrow\")\ndf_polars = pl.read_csv(\"sample.csv\")\n```\n:::\n\n\n::: {.cell tags='[]' execution_count=10}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: df_pandas.loc[:, \"name\"],\n    \"Polars\": lambda: df_polars.lazy().select(pl.col(\"name\")).collect(),\n}\nselect_col_in_memory = run_test(test_dict, \"Select column\")\n```\n\n::: {#fig-fig4 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"b7861d5d-e62b-47ab-a81e-b42dd05fc267\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"b7861d5d-e62b-47ab-a81e-b42dd05fc267\")) {                    Plotly.newPlot(                        \"b7861d5d-e62b-47ab-a81e-b42dd05fc267\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.00020080000103916973,3.530000685714185e-05,2.6000008801929653e-05,2.8299997211433947e-05,2.4500011932104826e-05,2.4599998141638935e-05,2.370000584051013e-05,3.500000457279384e-05,2.400000812485814e-05,2.2599997464567423e-05,2.169999061152339e-05,2.1500003640539944e-05,2.1700005163438618e-05,2.1900006686337292e-05,2.0899999071843922e-05,2.0199993741698563e-05,2.0199993741698563e-05,1.9800005247816443e-05,2.0199993741698563e-05,1.959998917300254e-05,2.0499996026046574e-05,2.0099992980249226e-05,2.0499996026046574e-05,2.0100007532164454e-05,1.9700004486367106e-05,1.930000144056976e-05,1.9500002963468432e-05,1.9500002963468432e-05,1.960000372491777e-05,1.930000144056976e-05,1.8999999156221747e-05,1.9099999917671084e-05,1.8999999156221747e-05,2.0500010577961802e-05,1.9400002202019095e-05,1.9099999917671084e-05,1.9700004486367106e-05,1.920000067912042e-05,1.8799997633323073e-05,1.8799997633323073e-05,1.8999999156221747e-05,1.850000990089029e-05,1.8700011423788965e-05,1.889999839477241e-05,1.9799990695901215e-05,1.999999221879989e-05,1.9899991457350552e-05,1.9700004486367106e-05,1.920000067912042e-05,1.9099999917671084e-05,1.9700004486367106e-05,1.9400002202019095e-05,2.0000006770715117e-05,2.0799998310394585e-05,1.9699989934451878e-05,2.9399991035461426e-05,3.950000973418355e-05,3.859998832922429e-05,3.91000066883862e-05,3.88999906135723e-05,3.880000440403819e-05,3.880000440403819e-05,3.849998756777495e-05,3.8700003642588854e-05,3.989999822806567e-05,3.88999906135723e-05,3.8300000596791506e-05,3.8300000596791506e-05,3.809999907389283e-05,3.860000288113952e-05,3.7999998312443495e-05,3.749999450519681e-05,3.7699996028095484e-05,3.770001058001071e-05,3.9000005926936865e-05,3.789999755099416e-05,3.809999907389283e-05,4.1000006604008377e-05,3.9699996705166996e-05,3.9999998989515007e-05,7.890000415500253e-05,4.3099993490614e-05,3.819999983534217e-05,3.7999998312443495e-05,3.880000440403819e-05,3.71999922208488e-05,3.7999998312443495e-05,3.650000144261867e-05,3.640000068116933e-05,3.680000372696668e-05,3.679998917505145e-05,3.700000524986535e-05,3.7299992982298136e-05,3.6900004488416016e-05,3.6600002204068005e-05,3.670000296551734e-05,3.710000601131469e-05,3.680000372696668e-05,3.7600009818561375e-05,3.71999922208488e-05,0.00021529999503400177,6.0699996538460255e-05,4.880000778939575e-05,4.579999949783087e-05,4.359999729786068e-05,2.4199995095841587e-05,1.8800012185238302e-05,2.130000211764127e-05,1.9400002202019095e-05,1.8099992303177714e-05,1.7999991541728377e-05,1.829999382607639e-05,1.7799990018829703e-05,1.85999961104244e-05,1.7499987734481692e-05,1.7600003047846258e-05,1.7300000763498247e-05,1.789999078027904e-05,1.750000228639692e-05,1.68999977177009e-05,1.720000000204891e-05,1.7099999240599573e-05,1.750000228639692e-05,1.7300000763498247e-05,1.7800004570744932e-05,1.7300000763498247e-05,1.720000000204891e-05,1.889999839477241e-05,1.7400001524947584e-05,1.7099999240599573e-05,1.7400001524947584e-05,1.7099999240599573e-05,1.720000000204891e-05,1.7300000763498247e-05,1.7099999240599573e-05,1.720000000204891e-05,1.6999998479150236e-05,1.720000000204891e-05,1.6999998479150236e-05,1.7099999240599573e-05,1.7099999240599573e-05,1.679999695625156e-05,2.2799998987466097e-05,3.749999450519681e-05,3.739999374374747e-05,3.770001058001071e-05,3.759999526664615e-05,3.7300007534213364e-05,3.8399986806325614e-05,3.819999983534217e-05,3.810001362580806e-05,3.750000905711204e-05,3.8999991375021636e-05,3.8700003642588854e-05,3.749999450519681e-05,3.8300000596791506e-05,3.8300000596791506e-05,3.779999678954482e-05,3.700000524986535e-05,3.709999145939946e-05,3.770001058001071e-05,3.759999526664615e-05,3.6999990697950125e-05,3.680000372696668e-05,3.860000288113952e-05,3.74000082956627e-05,3.6999990697950125e-05,3.680000372696668e-05,3.680000372696668e-05,3.700000524986535e-05,3.6699988413602114e-05,3.74000082956627e-05,3.650000144261867e-05,3.619999915827066e-05,3.670000296551734e-05,3.6900004488416016e-05,3.6699988413602114e-05,3.809999907389283e-05,3.689998993650079e-05,3.609999839682132e-05,3.750000905711204e-05,3.819999983534217e-05,3.819999983534217e-05,3.689998993650079e-05,3.819999983534217e-05,3.700000524986535e-05,3.640000068116933e-05,3.6600002204068005e-05,3.609999839682132e-05,3.579999611247331e-05,3.5899996873922646e-05,3.600001218728721e-05,3.6299999919719994e-05,3.619999915827066e-05,3.640000068116933e-05,3.619999915827066e-05,3.579999611247331e-05,3.5500008380040526e-05,3.619999915827066e-05,3.5599994589574635e-05],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=0.025300ms, Polars=0.036250ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('b7861d5d-e62b-47ab-a81e-b42dd05fc267');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nSelecting Columns from a File Already in Memory\n:::\n:::\n\n\n::: {.callout-note}\n\nWhile Polars showed a significant 3-4 times speed advantage for tasks involving pre-read files, both libraries perform similarly when the files are already in memory.\n:::\n\n# Filtering Rows\n\nNow, let's explore the scenario where we filter our dataset based on one or more column values \n\n## Based on one condition\n\nFor our simple scenario, we'll be narrowing down our focus to filter data based on individuals with the name \"David\".\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (df_pandas.query(\"name=='David'\")),\n    \"Polars\": lambda: (df_polars.lazy().filter((pl.col(\"name\") == \"David\")).collect()),\n}\nfilter_row_one_condition = run_test(test_dict, \"Filter (simple)\")\n```\n\n::: {#fig-fig5 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"a87d952c-095c-44f4-b020-cb69dc593cdc\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"a87d952c-095c-44f4-b020-cb69dc593cdc\")) {                    Plotly.newPlot(                        \"a87d952c-095c-44f4-b020-cb69dc593cdc\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.0032478000066475943,0.0020840000070165843,0.0026898000069195405,0.0028790999931516126,0.002790899990941398,0.0018677000043680891,0.0017151999927591532,0.00178980000782758,0.001959300003363751,0.0023705999919911847,0.002208299993071705,0.0017576999962329865,0.0019595999910961837,0.0017512999911559746,0.001687399999354966,0.0016630000027362257,0.0016988999996101484,0.00166529999114573,0.0016684000001987442,0.0017149000050267205,0.0016972000012174249,0.001847999999881722,0.0016933000006247312,0.0016892999992705882,0.001662800001213327,0.0016712999931769446,0.0016599999944446608,0.001673899998422712,0.0016429999959655106,0.0016684000001987442,0.001692300007562153,0.001826400010031648,0.0023830999998608604,0.0027190000109840184,0.0027192999987164512,0.002134399997885339,0.0017594999953871593,0.0017185000033350661,0.0018035000102827325,0.0016535000031581149,0.0017036999925039709,0.0017188999918289483,0.0016543999954592437,0.0016417000006185845,0.0016828999941935763,0.0016460999904666096,0.0017059999954653904,0.0022873999987496063,0.00270019999879878,0.002671599999302998,0.0026726000069174916,0.0026620999997248873,0.0026951000036206096,0.0020425999973667786,0.0017722999909892678,0.002654600000823848,0.002718299991101958,0.0023000000073807314,0.0016895000007934868,0.0025110999995376915,0.0018385000003036112,0.0016691999917384237,0.0023479999945266172,0.0026723999908426777,0.0027279000059934333,0.0022191000025486574,0.001692300007562153,0.002181500007282011,0.002601400003186427,0.0016967999981716275,0.0016527999978279695,0.0016942000074777752,0.0016564999968977645,0.0017075000068871304,0.0023720999888610095,0.002459900002577342,0.0017063999985111877,0.0023898999934317544,0.0025333000085083768,0.001976600004127249,0.0016595000051893294,0.001675099993008189,0.0016619999951217324,0.001758799990057014,0.0016825999919092283,0.0016965999966487288,0.0016321000002790242,0.0016294000088237226,0.0016718000115361065,0.0016398000007029623,0.0016818000003695488,0.0016714999946998432,0.0017258000007132068,0.0016973000019788742,0.0016821000026538968,0.0016604999982519075,0.0016835999995237216,0.0016854999994393438,0.001673299993854016,0.0016942999936873093,0.002332500007469207,0.0007287000044016168,0.0009814999939408153,0.0006866000039735809,0.0008118999976431951,0.0005892000044696033,0.0009942000033333898,0.0007336999988183379,0.0006611999997403473,0.0006476999988080934,0.0008008000004338101,0.00044850000995211303,0.000528500007931143,0.0005433000042103231,0.0007287000044016168,0.0005152000085217878,0.0008508000028086826,0.0008901999972295016,0.0008861999958753586,0.0014737000019522384,0.0006150999979581684,0.0013979999930597842,0.0007408000092254952,0.0006785000005038455,0.0006736000068485737,0.0008068000024650246,0.0006618000043090433,0.0006621999928029254,0.0006976999866310507,0.0011591000074986368,0.001328099999227561,0.001269300002604723,0.000705099999322556,0.0012741999962599948,0.0010482999932719395,0.0008531000057701021,0.0012571999977808446,0.0009000999998534098,0.0015120000025490299,0.0015874999953666702,0.0013494000013452023,0.0007651000050827861,0.0007932000007713214,0.0006607000104850158,0.0009312999900430441,0.0014133000076981261,0.0008913999918149784,0.0008800999930826947,0.0009089000086532906,0.0008126000029733405,0.0011929000029340386,0.000832799996715039,0.0009079000010387972,0.0009694000036688522,0.0007536000048276037,0.0009671000007074326,0.0009613999864086509,0.0013030999980401248,0.0011728000099537894,0.0008036999934120104,0.0008436999924015254,0.0007267999899340793,0.0007585999992443249,0.0008624999900348485,0.0007991000020410866,0.0006553999992320314,0.0007769999938318506,0.0007436000014422461,0.000661700003547594,0.0005817000055685639,0.0006709000008413568,0.0006013999955030158,0.0006989999965298921,0.0007277999975485727,0.00097490000189282,0.0008696000004420057,0.0011116999958176166,0.0006797999958507717,0.0008295000006910414,0.0012031000078422949,0.0007038000039756298,0.0010223999997833744,0.0007443999929819256,0.001184699998702854,0.0013189000019337982,0.0006763999990653247,0.0009018999990075827,0.0008996000105980784,0.0003834999952232465,0.000498399997013621,0.0007617999945068732,0.000443900004029274,0.0005511999916052446,0.0004998999938834459,0.0005590000073425472,0.0006521999894175678,0.0003671000013127923,0.0005831000016769394,0.0004254000086802989,0.0006147000094642863],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=1.715050ms, Polars=0.796150ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('a87d952c-095c-44f4-b020-cb69dc593cdc');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nFiltering Rows Based on One Condition\n:::\n:::\n\n\n## Based on multiple conditions\n\nNow, for a more intricate challenge, we're going to dive into querying the data to extract individuals who meet specific criteria: those named David, born after 1980, residing in a city other than London, married, and with three children.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (\n        df_pandas.query(\n            \"name=='David' and born>1980 and city != 'London' or is_married == True and children >= 3\"\n        )\n    ),\n    \"Polars\": lambda: (\n        df_polars.lazy()\n        .filter(\n            (pl.col(\"name\") == \"David\")\n            & (pl.col(\"born\") > 1980)\n            & (pl.col(\"city\") != \"London\")\n            | (pl.col(\"is_married\") == True) & (pl.col(\"children\") >= 3)\n        )\n        .collect()\n    ),\n}\nfilter_row_multiple_condition = run_test(test_dict, \"Filter (complex)\")\n```\n\n::: {#fig-fig6 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"0b0068c4-f295-4674-807c-ef4ba7b69a65\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"0b0068c4-f295-4674-807c-ef4ba7b69a65\")) {                    Plotly.newPlot(                        \"0b0068c4-f295-4674-807c-ef4ba7b69a65\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.005363300006138161,0.005208799993852153,0.005629999999655411,0.009405899996636435,0.013011999995796941,0.00862819999747444,0.009454600003664382,0.0055844000016804785,0.00433820000034757,0.004808900004718453,0.0035174000076949596,0.003547700005583465,0.003482100000837818,0.0035396000021137297,0.003529599998728372,0.003524600004311651,0.0034943000064231455,0.0034927999950014055,0.0034740999981295317,0.007698900008108467,0.005941199997323565,0.003990500001236796,0.0034657999931368977,0.003482800006167963,0.0036192999978084117,0.0035250000073574483,0.0034736999950837344,0.003481299994746223,0.0035017999907722697,0.00365359999705106,0.0035219000128563493,0.0034684999991441146,0.003497300000162795,0.0038416000024881214,0.003442800007178448,0.0035002000076929107,0.003505899992887862,0.0036278000043239444,0.0034585000103106722,0.0035057000059168786,0.003460899999481626,0.0035417000035522506,0.0040243999974336475,0.004419599994434975,0.003498499994748272,0.003504599997540936,0.003439099993556738,0.0034770999918691814,0.003575700000510551,0.003442200002609752,0.003483600012259558,0.0034717999951681122,0.003615699999500066,0.0034340999991400167,0.0034734000073513016,0.003448899995419197,0.003599000003305264,0.0034540000051492825,0.0034435000125085935,0.0034562000073492527,0.003439000007347204,0.003597800008719787,0.0034927000087918714,0.003479999999399297,0.003486499990685843,0.003683399991132319,0.0034955000010086223,0.003439400010393001,0.003457800004980527,0.0034771000064210966,0.005345499987015501,0.005741400003898889,0.005698499997379258,0.004113099988899194,0.005151099991053343,0.004384200001368299,0.003773500007810071,0.0037905000062892213,0.0052900000009685755,0.004372799987322651,0.004041199994389899,0.0036194999993313104,0.0034992000000784174,0.0035705999907804653,0.0034690000029513612,0.003437500010477379,0.0036112000088905916,0.003482500003883615,0.003447100010816939,0.0035348000092199072,0.004630299998098053,0.003527399996528402,0.0034485000069253147,0.0035229999921284616,0.003632299994933419,0.0034879000013461336,0.003463099987129681,0.0035513000038918108,0.003518800003803335,0.0036008000024594367,0.001793200004613027,0.0015228999982355163,0.0009877999982563779,0.0010704000014811754,0.0011031999893020838,0.0010564999975031242,0.0012340999965090305,0.001319499991950579,0.0013692999928025529,0.0011830000003101304,0.0007547999994130805,0.0014250999956857413,0.001541299992823042,0.0009040000004461035,0.0009962000040104613,0.0012275000044610351,0.0011808999988716096,0.0013199999957578257,0.001219800004037097,0.0013789999939035624,0.0010126999986823648,0.0011526000016601756,0.0011023000115528703,0.0011842999956570566,0.00142680000863038,0.0014278000016929582,0.0015435999957844615,0.001970700002857484,0.0019160999945597723,0.0013477000029524788,0.0021111999958520755,0.0019302000000607222,0.0015344000130426139,0.001259500000742264,0.0018558000010671094,0.0009953999979188666,0.0011276000004727393,0.0008901999972295016,0.00094600000011269,0.0011097999959019944,0.0011020999954780564,0.0008368999988306314,0.0009121000039158389,0.0013121999945724383,0.0018303999968338758,0.0014821999939158559,0.0011812000011559576,0.0008082999993348494,0.0013723000010941178,0.0014472000038949773,0.0011267999943811446,0.0012997000012546778,0.00122900000133086,0.001021999996737577,0.0010795999987749383,0.0012552000116556883,0.0015041000006021932,0.0008902999979909509,0.0012411000061547384,0.0011682000040309504,0.0009860999998636544,0.000970900000538677,0.0013435000000754371,0.0009947000071406364,0.000949699999182485,0.0011444999981904402,0.00163720001000911,0.001175199999124743,0.001587100006872788,0.0014879999944241717,0.0013480000052368268,0.0010953999881166965,0.0008526000019628555,0.0012714000040432438,0.0011690999963320792,0.0010534000030020252,0.0010612000041874126,0.0015291000017896295,0.0012401999993016943,0.0011556000099517405,0.0012090999953215942,0.001480399994761683,0.0010159999947063625,0.000993600013316609,0.0013476000021910295,0.0014014000043971464,0.0014738000027136877,0.001560999997309409,0.0014293000131146982,0.0014636999985668808,0.0011978999973507598,0.0010829000093508512,0.001229999994393438,0.001324700002442114,0.0013803000038024038,0.0011988000042038038,0.0010061999928439036,0.0012637000036193058,0.0011287999950582162,0.0012211000139359385],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=3.523800ms, Polars=1.224300ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('0b0068c4-f295-4674-807c-ef4ba7b69a65');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nFiltering Rows Based on Multiple Condition\n:::\n:::\n\n\n::: {.callout-note}\n\nBoth libraries tackled this challenge quite well, yet Pandas struggled to keep pace with Polars. It's intriguing to observe that while Pandas required nearly twice the time for the more intricate task, Polars managed to complete it in almost the same amount of time. Parallelization in action.\n\n:::\n\n# Performing operations on columns\n\nNow, let's roll up our sleeves and dive into performing some operations on the columns.\n\n## Single operation\n\nAs a single operation, we'll simply calculate the century in which these individuals were born.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (df_pandas.assign(born=lambda df: df.born.div(100).round())),\n    \"Polars\": lambda: (\n        df_polars.lazy().with_columns((pl.col(\"born\") / 100).round()).collect()\n    ),\n}\noperate_one_column = run_test(test_dict, \"Operate (one column)\")\n```\n\n::: {#fig-fig7 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"4d2ad38d-8578-4aef-9b8d-55ed0ed6130c\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"4d2ad38d-8578-4aef-9b8d-55ed0ed6130c\")) {                    Plotly.newPlot(                        \"4d2ad38d-8578-4aef-9b8d-55ed0ed6130c\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.0021397000091383234,0.0008754000009503216,0.000691299996105954,0.0006070999952498823,0.0005966000026091933,0.0005899999960092828,0.0005819000070914626,0.0005897999944863841,0.0007507999980589375,0.00078600000415463,0.0007918000046629459,0.0008024999988265336,0.0013418000016827136,0.0007342000026255846,0.0006122999911895022,0.0007506999972974882,0.0007394999993266538,0.0007328000065172091,0.0007336000126088038,0.0007475000020349398,0.0007618999952683225,0.0009264999971492216,0.0006409000052371994,0.000746600009733811,0.0005601000011665747,0.0005696000007446855,0.0005755000020144507,0.0005660000024363399,0.0005751999997301027,0.0005796999903395772,0.0005804999964311719,0.0005758000042987987,0.0005717000021832064,0.0005655999993905425,0.000570099990000017,0.0009307000000262633,0.0006469000072684139,0.0006044999900041148,0.0005871000030310825,0.0005660000024363399,0.0005710999976145104,0.0005741999921156093,0.0007087000121828169,0.000990600005025044,0.0007669000042369589,0.0006078999867895618,0.0005966000026091933,0.0005711999983759597,0.0005780000064987689,0.0005786999972769991,0.0005658000009134412,0.0005795000033685938,0.0005827000131830573,0.0005779000057373196,0.0008068000024650246,0.0010093000018969178,0.0009838999976636842,0.0010037000029115006,0.0007686000026296824,0.000706300008459948,0.0005954000080237165,0.0005807999987155199,0.0005791000003227964,0.0005623000033665448,0.0005792000010842457,0.0005650999955832958,0.0005619000003207475,0.0006036999984644353,0.0005609000072581694,0.0005627999926218763,0.0005731999990530312,0.0005756000027759001,0.0005688999954145402,0.0005591000081039965,0.0005702999915229157,0.0005708000098820776,0.0005584999889833853,0.0005737000028602779,0.000570999996853061,0.0005667999939760193,0.0005671000108122826,0.0005550999921979383,0.0005615999980363995,0.0005582000012509525,0.0005600000004051253,0.0005892000044696033,0.0005946000019321218,0.0005631999956676736,0.0005711999983759597,0.0005658000009134412,0.0005529000045498833,0.0005586000042967498,0.0005540999991353601,0.000555599996005185,0.000553700010641478,0.0005546999891521409,0.0005662000039592385,0.0006315000064205378,0.0005531999922823161,0.0005634000117424875,0.0005491999909281731,0.000309199996991083,0.00035679999564308673,0.0003448000061325729,0.0003066000062972307,0.000342100000125356,0.00035379998735152185,0.0003622999938670546,0.00033039999834727496,0.0003149999974993989,0.00032530000316910446,0.00033510000503156334,0.000327900008414872,0.0002716000017244369,0.000331300005200319,0.0003276999923400581,0.00032750000536907464,0.00030729999707546085,0.0003308000013930723,0.00033790001180022955,0.00032979999377857894,0.0003789000038523227,0.00030669999250676483,0.00027299999783281237,0.00035000000207219273,0.0003490999952191487,0.00033710000570863485,0.00034300000697840005,0.00034819998836610466,0.000335300006554462,0.00033650000113993883,0.00033909999183379114,0.00033290000283159316,0.0003316999936942011,0.0003446999908192083,0.00033459998667240143,0.0003316999936942011,0.00033320000511594117,0.0003358000103617087,0.00033409999741706997,0.00029540000832639635,0.0002497999957995489,0.0002826999989338219,0.00027949998911935836,0.0002891000040108338,0.0002753000007942319,0.00027210000553168356,0.0002798000059556216,0.0002820999943651259,0.0002734000008786097,0.00027459999546408653,0.0003188999980920926,0.0002795000036712736,0.0002803999959724024,0.00027809999301098287,0.0002834000042639673,0.0003311000036774203,0.0003132999991066754,0.0003496999997878447,0.00033429999893996865,0.0003336000081617385,0.00031350000062957406,0.000327600006130524,0.0003226999979233369,0.00032449999707750976,0.00029880000511184335,0.0003251000016462058,0.00033229999826289713,0.0003335000074002892,0.0003117000014754012,0.00044129999878350645,0.00040070000977721065,0.00039319999632425606,0.0005459000094560906,0.00035749998642131686,0.0003436999977566302,0.0003358999965712428,0.00029969999741297215,0.0003203999949619174,0.0003245999978389591,0.00032649999775458127,0.00031570000282954425,0.00032160000409930944,0.0003269000008003786,0.00032640001154504716,0.0003718999942066148,0.00025830000231508166,0.0002857000072253868,0.00027489999774843454,0.00032550000469200313,0.000309199996991083,0.0003060000017285347,0.00033260000054724514,0.0002859999949578196,0.0002914000069722533,0.00027600000612437725,0.00028079999901819974,0.0002663000050233677,0.00027459999546408653,0.00027099999715574086],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=0.579150ms, Polars=0.326450ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('4d2ad38d-8578-4aef-9b8d-55ed0ed6130c');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nPerforming a Singme Operation on a Column\n:::\n:::\n\n\n## Multiple operations\n\nLet's also explore what happens when performing multiple operations on the columns. We'll mix things up with some string operations, mapping, and math calculations to see how these libraries handle it!\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (\n        df_pandas.assign(\n            born=lambda df: df.born.div(100).round(),\n            name=lambda df: df.name.str.lower(),\n            city=lambda df: df.city.str.upper(),\n            zip_code=lambda df: df.zip_code.mul(2),\n            income=lambda df: df.income.div(10).astype(\"str\"),\n            is_married=lambda df: df.is_married.map({False: 0, True: 1}),\n            children=lambda df: df.children.astype(\"bool\"),\n            car=lambda df: df.car.str[0],\n        )\n    ),\n    \"Polars\": lambda: (\n        df_polars.lazy()\n        .with_columns(\n            [\n                (pl.col(\"born\") / 100).round(),\n                pl.col(\"name\").str.to_lowercase(),\n                pl.col(\"city\").str.to_uppercase(),\n                pl.col(\"zip_code\") * 2,\n                (pl.col(\"income\") / 10).cast(pl.Utf8),\n                pl.col(\"is_married\").map_dict({False: 0, True: 1}),\n                pl.col(\"children\").cast(pl.Boolean),\n                pl.col(\"car\").str.slice(0, length=1),\n            ]\n        )\n        .collect()\n    ),\n}\noperate_multiple_column = run_test(test_dict, \"Operate (more columns)\")\n```\n\n::: {#fig-fig8 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"a1b36110-9493-4ab7-9ca1-0c828069aabb\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"a1b36110-9493-4ab7-9ca1-0c828069aabb\")) {                    Plotly.newPlot(                        \"a1b36110-9493-4ab7-9ca1-0c828069aabb\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.016186799999559298,0.01190610000048764,0.013997000001836568,0.010981499988702126,0.010764600010588765,0.010567499994067475,0.010789199994178489,0.010882199989282526,0.010900599998421967,0.014858100010314956,0.017559400002937764,0.010507200000574812,0.010602499998640269,0.010719500001869164,0.010458300006575882,0.01050309999845922,0.010469600005308166,0.010283399999025278,0.01707650000753347,0.01894529999117367,0.016184599997359328,0.010645000002114102,0.010584499992546625,0.010486300001502968,0.010347300005378202,0.010996699988027103,0.010583299997961149,0.01049280000734143,0.010651999997207895,0.011166700001922436,0.011042199999792501,0.018910499988123775,0.019145600002957508,0.017099999997299165,0.013085800004773773,0.014706100002513267,0.010437600009026937,0.03216509999765549,0.017234300001291558,0.010987899993779138,0.010453700000653043,0.01038669999979902,0.010649400006514043,0.0105378999869572,0.01039719999243971,0.010577699998975731,0.010535800000070594,0.010393799995654263,0.010529999999562278,0.011363500001607463,0.010450299989315681,0.010353699995903298,0.010938499995972961,0.010508200008189306,0.010408700007246807,0.010569300007773563,0.010581300011835992,0.010366100003011525,0.010445599997183308,0.010587700002361089,0.010298000008333474,0.010491499997442588,0.010661299995263107,0.010454399991431274,0.010460499994223937,0.010564800002612174,0.010395399993285537,0.01047639999887906,0.010808000006363727,0.010588600009214133,0.010739799996372312,0.010563000003458,0.01055629999609664,0.01091430000087712,0.010648600000422448,0.010525099991355091,0.01073059999907855,0.010737699994933791,0.010857500004931353,0.01044019999972079,0.01130330000887625,0.010751100009656511,0.011106500009191222,0.010730099995271303,0.010533499997109175,0.01073490000271704,0.010806999998749234,0.01089059999503661,0.010569199992460199,0.010753900001873262,0.010617300009471364,0.010805199999595061,0.010941100001218729,0.010554799999226816,0.010712300005252473,0.010574300002190284,0.010543199998210184,0.010580400004982948,0.010794500005431473,0.010572400002274662,0.0037327000027289614,0.0025667000008979812,0.0020456000056583434,0.0022336999973049387,0.002327000009245239,0.0023286999930860475,0.0017517999949632213,0.00224240000534337,0.002184800003306009,0.0023062999971443787,0.0024924000026658177,0.0020887999999104068,0.0021988999942550436,0.0020764999935636297,0.0026522999978624284,0.002474399996572174,0.002546000003349036,0.0023536000080639496,0.001994999998714775,0.0021065000037197024,0.001931699996930547,0.002163699988159351,0.0021225999953458086,0.002090699999826029,0.002133499991032295,0.002129700005752966,0.0020874999900115654,0.002013199991779402,0.002287900002556853,0.002023900000494905,0.0023695999989286065,0.002019999999902211,0.0021040000137872994,0.002198900008806959,0.0020044999982928857,0.0022277000098256394,0.0021616000012727454,0.002463600001647137,0.002731800006586127,0.002371599999605678,0.0022619999945163727,0.0021808999881614,0.0020062999974470586,0.00219870000728406,0.002141799996024929,0.001706499999272637,0.001968899989151396,0.002068000001600012,0.0021489999926416203,0.0021610999974654987,0.001944599993294105,0.0022505999950226396,0.0019542999943951145,0.0022628000006079674,0.0019035999866900966,0.0018358999950578436,0.0018421999993734062,0.001949500001501292,0.002136600000085309,0.0018787000008160248,0.0018263999954797328,0.0021096999989822507,0.002101400008541532,0.0021169000101508573,0.0019143000099575147,0.0024114000116242096,0.0018859999981941655,0.001975000006495975,0.001910400009364821,0.0016906000091694295,0.0020871999877272174,0.0018503999890526757,0.001765200009685941,0.0019131000008201227,0.0019326999899931252,0.001677500011282973,0.0020083000126760453,0.0020886999991489574,0.0017502999980933964,0.001494500000262633,0.0018382999987807125,0.0019755999965127558,0.0021742000099038705,0.0019357999990461394,0.00192760000936687,0.0014613999956054613,0.0015219000051729381,0.001847300009103492,0.0021447000035550445,0.0017910000024130568,0.0018086999916704372,0.002043699991190806,0.001995099999476224,0.0017288000090047717,0.0021969999943394214,0.0020583000004990026,0.0016266000020550564,0.0022757999977329746,0.0024591999972471967,0.0017518000095151365],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=10.631150ms, Polars=2.087350ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('a1b36110-9493-4ab7-9ca1-0c828069aabb');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nPerfrming a Multiple Operation on Columns\n:::\n:::\n\n\n::: {.callout-note}\n\nOnce again, Polars takes the lead. While both libraries required more time for the task involving multiple operations, Polars demonstrated superior scalability in this scenario.\n\n:::\n\n# Concatenating Data\n\nNow, let's turn our attention to concatenating two datasets. Let the merging begin!\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndf_pandas2 = df_pandas.copy(deep=True)\ndf_polars2 = df_polars.clone()\n```\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: pd.concat([df_pandas, df_pandas2], axis=0),\n    \"Polars\": lambda: pl.concat([df_polars, df_polars2], how=\"vertical\"),\n}\nconcatenate = run_test(test_dict, \"Concatenate\")\n```\n\n::: {#fig-fig9 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"4152db7d-38c4-4550-a45a-75f279a6659a\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"4152db7d-38c4-4550-a45a-75f279a6659a\")) {                    Plotly.newPlot(                        \"4152db7d-38c4-4550-a45a-75f279a6659a\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.0020989000040572137,0.002408500004094094,0.0012604000075953081,0.0014756000018678606,0.0012482000020099804,0.001142599998274818,0.0012527999933809042,0.001226200009114109,0.001658799999859184,0.002444800004013814,0.0014857000060146675,0.0020454000041354448,0.002239900000859052,0.001792299997759983,0.0016566999984206632,0.0017806000105338171,0.0016737999976612628,0.0019375999982003123,0.00193569999828469,0.00266169999667909,0.002057700010482222,0.0023994000075617805,0.002359500009333715,0.002289700001711026,0.0020896000060020015,0.002017199993133545,0.002481100003933534,0.0030963000026531518,0.002237400010926649,0.0016487999964738265,0.0014653000107500702,0.0015146000077947974,0.0015690000000176951,0.001545800012536347,0.0015257999912137166,0.0016751000075601041,0.0019342000014148653,0.0020501999970292673,0.0019331000075908378,0.001789299989468418,0.0017841000080807135,0.0018133999983547255,0.0014314000000013039,0.0014457999932346866,0.0014472000038949773,0.0014570999919669703,0.0012205999955767766,0.0011532999924384058,0.0011283999920124188,0.00113489999785088,0.0011500000109663233,0.0010690000053728,0.0009700999944470823,0.0009717000066302717,0.0008314000006066635,0.0008893999911379069,0.0008310999983223155,0.0008397000055992976,0.0008310999983223155,0.0008403000101679936,0.0008462000114377588,0.000835899991216138,0.0008383000094909221,0.0009148999961325899,0.0008707999950274825,0.0008478999952785671,0.0008469000022159889,0.0008397999918088317,0.0008480000105919316,0.0008328999974764884,0.0008441999962087721,0.0008406999986618757,0.0008495999936712906,0.0008386999979848042,0.0008434999908786267,0.000833099998999387,0.0008369999995920807,0.0008452000038232654,0.000829399999929592,0.000843599991640076,0.0008393000025535002,0.0008317000028910115,0.001170899995486252,0.0008515999943483621,0.0008713999995961785,0.0008386000117752701,0.0008395000040763989,0.0008382000087294728,0.0008272999984910712,0.0008455999923171476,0.0008366000110981986,0.0008377999911317602,0.0008264000061899424,0.0008368000126210973,0.0008314999868161976,0.0008379999926546589,0.0008377000049222261,0.0008348999981535599,0.0008338000043295324,0.0008380999934161082,0.0016831999964779243,0.00045510000200010836,0.0006250000005820766,0.00040920000174082816,0.0002893000055337325,0.000340899990987964,0.00032249999640043825,0.0003552000125637278,0.0003166000096825883,0.0002778999914880842,0.0002789999998640269,0.0002753000007942319,0.0002798000059556216,0.0002789999998640269,0.0002874000056181103,0.0002700000040931627,0.0002705999941099435,0.0002736000024015084,0.0002697000018088147,0.0002714000002015382,0.0003269000008003786,0.0003324999997857958,0.00034899999445769936,0.0003463999892119318,0.00027150000096298754,0.00026870000874623656,0.0002671999973244965,0.00027990000671707094,0.00027299999783281237,0.0002699000033317134,0.00026479999360162765,0.0002648000081535429,0.0002665999927558005,0.00027350000164005905,0.0002730999985942617,0.00031630000739824027,0.00032619999547023326,0.0003056000132346526,0.0003333999920869246,0.0003288000007160008,0.0003136000013910234,0.00030339999648276716,0.0003146999952150509,0.00034840000444091856,0.0002682000049389899,0.00026429998979438096,0.00027879999834112823,0.0004008999967481941,0.00033059999987017363,0.0002474000066285953,0.00028419999580364674,0.00030860000697430223,0.00023209999199025333,0.0003156000020680949,0.000264599992078729,0.00031790000502951443,0.0004135999915888533,0.0003491000097710639,0.0003578000032575801,0.0003572999994503334,0.0003324999997857958,0.0003156000020680949,0.00028809999639634043,0.00031790000502951443,0.00031939998734742403,0.0003073999978369102,0.0003175000019837171,0.00031800000579096377,0.0003226999979233369,0.0003188999980920926,0.0002952999930130318,0.0002756000030785799,0.0002793000021483749,0.00028819999715778977,0.0002781000075628981,0.00029039999935775995,0.0003009000065503642,0.0002941999991890043,0.00028809999639634043,0.00027990000671707094,0.00030050000350456685,0.00031859999580774456,0.0003107999946223572,0.00029680000443477184,0.0003274000046076253,0.00028839999868068844,0.0002938999969046563,0.0002936999953817576,0.00027889999910257757,0.0002786999975796789,0.00029739999445155263,0.00029000001086387783,0.0002871999895432964,0.0002945000014733523,0.0002775000029942021,0.00028759999258909374,0.00027600000612437725,0.00028360000578686595,0.0002958999975817278,0.00028079999901819974],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=1.138750ms, Polars=0.294050ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('4152db7d-38c4-4550-a45a-75f279a6659a');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nConcatenating Dataframes\n:::\n:::\n\n\n::: {.callout-note}\n\nOnce more, Polars shines with a remarkable 8-10 times speed advantage.\n    \n:::\n\n# Aggregation\n\n## Simple \n\nTime to shift our attention to aggregation. First up, a simple task: let's calculate the mean income based on names. Then, for a bit more complexity, we'll dive into computing statistics involving the income, children, and car columns. Things are about to get interesting!\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (df_pandas.groupby(\"name\").income.mean()),\n    \"Polars\": lambda: (df_polars.lazy().groupby(\"name\").mean().collect()),\n}\naggregate_simple = run_test(test_dict, \"Aggregate (simple)\")\n```\n\n::: {#fig-fig10 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"523fedc0-5935-4024-bb95-7a5e6cb10f08\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"523fedc0-5935-4024-bb95-7a5e6cb10f08\")) {                    Plotly.newPlot(                        \"523fedc0-5935-4024-bb95-7a5e6cb10f08\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.002573999998276122,0.0026977999950759113,0.003617499998654239,0.0027212999993935227,0.002606299996841699,0.003038599999854341,0.003433299993048422,0.004351499999756925,0.0032137999951373786,0.0028157000051578507,0.002737700007855892,0.0022440000029746443,0.0025843000039458275,0.0020794000010937452,0.001628399986657314,0.0016060999914770946,0.001608000005944632,0.0015977000002749264,0.001444099994841963,0.0014629999932367355,0.0014328999968711287,0.001469599999836646,0.0015091000095708296,0.0014391000004252419,0.001441900007193908,0.0014553000073647127,0.0014393999881576747,0.0013996000052429736,0.0013869999966118485,0.0014476000069407746,0.0013865999935660511,0.0013981999945826828,0.0014378999912878498,0.0015143000055104494,0.0014258999872254208,0.0014473000046564266,0.001440699998056516,0.0014521999983116984,0.0014386999973794445,0.0014169000060064718,0.0014127000031294301,0.0014258000010158867,0.0014018000074429438,0.001500699989264831,0.0014630000077886507,0.001488600013544783,0.0014724000066053122,0.0014287999947555363,0.0013832999975420535,0.0014133999939076602,0.001412999990861863,0.001418200001353398,0.0014475999923888594,0.0014307999954326078,0.0016576999914832413,0.0014268999948399141,0.0014245000056689605,0.0014152999938232824,0.001445000001695007,0.0014229000080376863,0.0013831999967806041,0.0014144000015221536,0.0013718000118387863,0.0014542999997502193,0.0014228999934857711,0.0017968000029213727,0.0013873999996576458,0.0014102999994065613,0.0013866000081179664,0.0014025000127730891,0.001448700000764802,0.001407499992637895,0.0014192000089678913,0.0013993000029586256,0.0014194999967003241,0.0013940000062575564,0.0020076000073459,0.00145419999898877,0.0014632999955210835,0.0014614999963669106,0.0014555999950971454,0.0014764999941689894,0.0014502999983960763,0.001395799990859814,0.001448099996196106,0.0014807999978074804,0.0021781999967060983,0.002033500000834465,0.002162300006602891,0.00244609999936074,0.002504499992937781,0.0032802000059746206,0.0034397999988868833,0.0029590999911306426,0.002606000009109266,0.002598999999463558,0.0020348000107333064,0.002025700014200993,0.0023022000095807016,0.0016281999996863306,0.0024591999972471967,0.0008777000039117411,0.0018126999930245802,0.0011718999885488302,0.001556600007461384,0.0014642000023741275,0.0015891000075498596,0.0018494999967515469,0.001122299989219755,0.0017393999878549948,0.002372200004174374,0.0019226000003982335,0.002587599999969825,0.0015828999894438311,0.0014905999996699393,0.0012011999933747575,0.0017796000029193237,0.002248599994345568,0.00269950000802055,0.0016656999941915274,0.002491500010364689,0.003015199996298179,0.0018351000035181642,0.002018400002270937,0.0016309000056935474,0.0019415999995544553,0.002973900001961738,0.002373199997236952,0.0026394000014988706,0.0021458999981405213,0.0015774999919813126,0.0023548000026494265,0.0022668000019621104,0.002068000001600012,0.002433700006804429,0.0025200999953085557,0.0019462999916868284,0.0019897000020137057,0.0017261000029975548,0.0021462000004248694,0.0020949000027030706,0.002380199992330745,0.0024238000041805208,0.0018209999980172142,0.0018969000084325671,0.002478599999449216,0.0020492999901762232,0.0021840999979758635,0.0027831000043079257,0.0023082999978214502,0.0020709000091301277,0.002110700006596744,0.002753699998720549,0.001955999992787838,0.002030400006333366,0.002690200009965338,0.0025999000063166022,0.0022031999978935346,0.0017436999914934859,0.0024658999900566414,0.0028045999933965504,0.002239599998574704,0.0023130000045057386,0.002526600001147017,0.0024320999946212396,0.002991500005009584,0.0025089999980991706,0.0023585000017192215,0.002630699993460439,0.0032828999974299222,0.0029786000086460263,0.002837699998053722,0.0025888999953167513,0.00246609999157954,0.002435500005958602,0.003072300009080209,0.0025129999994533136,0.0031925999937811866,0.001960299996426329,0.00265360000776127,0.0022696999949403107,0.002852199992048554,0.002056299999821931,0.002064900007098913,0.0027799000090453774,0.002892999997129664,0.0023486999998567626,0.0023492000036640093,0.002515899992431514,0.0025344000023324043,0.0026160999987041578,0.0028808999923057854,0.002359000005526468,0.002825000003213063,0.0027335999911883846,0.002706999992369674,0.0027955999976256862,0.0031082000059541315,0.002289399999426678,0.002811199999996461],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=1.454250ms, Polars=2.356650ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('523fedc0-5935-4024-bb95-7a5e6cb10f08');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nPerforming a simple aggregation\n:::\n:::\n\n\n## More complex\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (\n        df_pandas.groupby([\"name\", \"car\", \"is_married\"]).agg(\n            born_min=(\"born\", min),\n            born_max=(\"born\", max),\n            income_mean=(\"income\", np.mean),\n            income_median=(\"income\", np.median),\n            children_mean=(\"children\", np.mean),\n            car_count=(\"car\", \"count\"),\n        )\n    ),\n    \"Polars\": lambda: (\n        df_polars.lazy()\n        .groupby([\"name\", \"car\", \"is_married\"])\n        .agg(\n            [\n                pl.col(\"born\").min().alias(\"born_min\"),\n                pl.col(\"born\").max().alias(\"born_max\"),\n                pl.col(\"income\").mean().alias(\"income_mean\"),\n                pl.col(\"income\").median().alias(\"income_median\"),\n                pl.col(\"children\").mean().alias(\"children_mean\"),\n                pl.col(\"car\").count().alias(\"car_count\"),\n            ]\n        )\n        .collect()\n    ),\n}\naggregate_complex = run_test(test_dict, \"Aggregate (complex)\")\n```\n\n::: {#fig-fig11 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"435a48e0-62a8-417a-9442-cd749ba5446f\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"435a48e0-62a8-417a-9442-cd749ba5446f\")) {                    Plotly.newPlot(                        \"435a48e0-62a8-417a-9442-cd749ba5446f\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.05404590000398457,0.05586269999912474,0.030890900001395494,0.0236078999878373,0.023496299996622838,0.023857499996665865,0.024142399997799657,0.02319550000538584,0.02348659999552183,0.023157700008596294,0.023785299999872223,0.023194099994725548,0.02556380000896752,0.023467999999411404,0.02329370001098141,0.023125300009269267,0.02396479999879375,0.033037699991837144,0.02956709999125451,0.03450969999539666,0.02836379999644123,0.023152800000389107,0.02366809999512043,0.023322399996686727,0.0233754999935627,0.023213899999973364,0.023292800004128367,0.02342859999043867,0.023290700002689846,0.02309810000588186,0.023230799997691065,0.023242200011736713,0.02364510000916198,0.023208900005556643,0.02325610000116285,0.023182499993708916,0.02357020000636112,0.02340879999974277,0.02339919999940321,0.023387100009131245,0.023495000001275912,0.023469699997804128,0.02338850000523962,0.023185900005046278,0.023752100009005517,0.023168599989730865,0.02350490000389982,0.02316709999286104,0.02325249998830259,0.023277800006326288,0.023150900000473484,0.023610200005350634,0.023306700008106418,0.02517459999944549,0.023788099992088974,0.02334510000946466,0.023370900002191775,0.02315529999032151,0.023178299990831874,0.028592200003913604,0.03793760000553448,0.0239710999885574,0.024113999999826774,0.02339170000050217,0.024377800000365824,0.0232529000059003,0.023611299999174662,0.02317459999176208,0.0236674000043422,0.02339800000481773,0.023826699994970113,0.02328940000734292,0.023257100008777343,0.023315500002354383,0.023482799995690584,0.02311809999810066,0.023083799998858012,0.023225400000228547,0.024563300001318567,0.02320769999641925,0.023245999997016042,0.022928599995793775,0.023521799987065606,0.023342300002695993,0.02337499998975545,0.02366039999469649,0.02563180000288412,0.026501000000280328,0.023360099992714822,0.023109699992346577,0.023300800006836653,0.023152900001150556,0.024210899995523505,0.02301810000790283,0.02351020000060089,0.024512600008165464,0.023823800001991913,0.023669000001973473,0.02326800000446383,0.023443800004315563,0.0033244999940507114,0.00190459999430459,0.0014664999907836318,0.0022656000073766336,0.0011290999973425642,0.0010094999888679013,0.0023045999987516552,0.003055199995287694,0.0021542000031331554,0.0016057000029832125,0.0021032000076957047,0.001981199995498173,0.0017224000039277598,0.0020488000009208918,0.0017212999955518171,0.0016835999995237216,0.0014928000018699095,0.0014073000056669116,0.0014786000101594254,0.0020690000092145056,0.0013750000071013346,0.0018428000039421022,0.001853800000390038,0.001184399996418506,0.0016773999959696084,0.0020746000081999227,0.0009979000024031848,0.0012833999935537577,0.0009040000004461035,0.0013035000010859221,0.001712999990559183,0.001241000005393289,0.0013593999901786447,0.0017914999916683882,0.0008839999936753884,0.0010793999972520396,0.0018471000075805932,0.001488099995185621,0.0018840999982785434,0.0009735000057844445,0.001137600003858097,0.001952899998286739,0.001547100007883273,0.0017517000087536871,0.0016875000001164153,0.00127420001081191,0.0009266999986721203,0.0015657000039936975,0.0009771000040927902,0.0014836999907856807,0.0012843000004068017,0.0009701999952085316,0.001208400004543364,0.0011223000037716702,0.0016060000052675605,0.0015836999955354258,0.0007764000038150698,0.0019466000085230917,0.0012679999927058816,0.0019219000096200034,0.001709500007564202,0.001931699996930547,0.0009437999979127198,0.0018031999934464693,0.0011682999902404845,0.0016709000046830624,0.0009329000022262335,0.0010153000039281324,0.0018009999912464991,0.0012017999979434535,0.0018005000019911677,0.001107799995224923,0.0012390000047162175,0.0016159999941010028,0.0016848999948706478,0.0008788999984972179,0.0009618000040063635,0.0011118999973405153,0.001821500001824461,0.0014535000082105398,0.0032399999909102917,0.0018962000031024218,0.0022505999950226396,0.0016575000045122579,0.002783899995847605,0.0016056000022217631,0.001353300001937896,0.0016035000007832423,0.0017270000098505989,0.0019391999958315864,0.0025467999948887154,0.0010722000006353483,0.0010131999879376963,0.0016370999946957454,0.0010803999903146178,0.001963000002433546,0.0010917000035988167,0.0012284999975236133,0.0018069000070681795,0.0013679999974556267],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=23.394850ms, Polars=1.593600ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('435a48e0-62a8-417a-9442-cd749ba5446f');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nPerforming a complex aggregation\n:::\n:::\n\n\n::: {.callout-note}\n\nWhile Polars demonstrated impressive speed for the straightforward aggregation, the more complex task revealed striking differences between the two libraries. In this case, Polars surged ahead, boasting a remarkable 80-100 times faster performance compared to Pandas.    \n:::\n\n# Whole workflow\n\nWe're going to tackle this in two versions. First, we'll use `pl.read_csv` for Polars, assessing the time it takes to complete the entire workflow on a DataFrame already in memory. Then, for the second version, we'll employ `pl.scan_csv` for Polars. This nifty function lets us lazily read data from a CSV file or multiple files using glob patterns.\n\nThe cool part? With `pl.scan_csv`, the query optimizer can push down predicates and projections to the scan level. This nifty move has the potential to cut down on memory overhead. Let's dive into both versions and see how they stack up!\n\n## Using `pl.read_csv`\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (\n        df_pandas.loc[:, lambda df: ~df.columns.isin([\"is_married\"])]\n        .query(\"name=='David' and born>1980 and city != 'London' and children >= 3\")\n        .assign(\n            born=lambda df: df.born.div(100).round(),\n            name=lambda df: df.name.str.lower(),\n            city=lambda df: df.city.str.upper(),\n            zip_code=lambda df: df.zip_code.mul(2),\n            income=lambda df: df.income.div(10),\n            children=lambda df: df.children.astype(\"bool\"),\n            car=lambda df: df.car.str[0],\n        )\n        .groupby(\n            [\n                \"name\",\n                \"car\",\n            ]\n        )\n        .agg(\n            born_min=(\"born\", min),\n            born_max=(\"born\", max),\n            income_mean=(\"income\", np.mean),\n            income_median=(\"income\", np.median),\n            children_mean=(\"children\", np.mean),\n            car_count=(\"car\", \"count\"),\n        )\n    ),\n    \"Polars\": lambda: (\n        df_polars.lazy()\n        .select(cs.all() - cs.ends_with(\"married\"))\n        .filter(\n            (pl.col(\"name\") == \"David\")\n            & (pl.col(\"born\") > 1980)\n            & (pl.col(\"city\") != \"London\")\n            & (pl.col(\"children\") >= 3)\n        )\n        .with_columns(\n            [\n                (pl.col(\"born\") / 100).round(),\n                pl.col(\"name\").str.to_lowercase(),\n                pl.col(\"city\").str.to_uppercase(),\n                pl.col(\"zip_code\") * 2,\n                (pl.col(\"income\") / 10),\n                pl.col(\"children\").cast(pl.Boolean),\n                pl.col(\"car\").str.slice(0, length=1),\n            ]\n        )\n        .groupby(\n            [\n                \"name\",\n                \"car\",\n            ]\n        )\n        .agg(\n            [\n                pl.col(\"born\").min().alias(\"born_min\"),\n                pl.col(\"born\").max().alias(\"born_max\"),\n                pl.col(\"income\").mean().alias(\"income_mean\"),\n                pl.col(\"income\").median().alias(\"income_median\"),\n                pl.col(\"children\").mean().alias(\"children_mean\"),\n                pl.col(\"car\").count().alias(\"car_count\"),\n            ]\n        )\n        .collect()\n    ),\n}\nwhole_workflow_read_csv = run_test(test_dict, \"Whole workflow\")\n```\n\n::: {#fig-fig12 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"d03d12ff-b1da-45d5-a0e0-fedc9e7c9316\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"d03d12ff-b1da-45d5-a0e0-fedc9e7c9316\")) {                    Plotly.newPlot(                        \"d03d12ff-b1da-45d5-a0e0-fedc9e7c9316\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.021418000003905036,0.011559299993677996,0.011145099997520447,0.011225000009289943,0.011210199998458847,0.010966400004690513,0.01149269999586977,0.016152900003362447,0.021247299999231473,0.012187200001790188,0.010988800000632182,0.011341399993398227,0.0108326999907149,0.011135599997942336,0.010969399998430163,0.01092899999639485,0.011221299995668232,0.01135210000211373,0.011058200005209073,0.010809100000187755,0.011992100000497885,0.011273299998720177,0.01090160000603646,0.010853200001292862,0.010985899993102066,0.010885099996812642,0.010781899996800348,0.011111700005130842,0.010854899999685585,0.01068669999949634,0.010932600009255111,0.011237099999561906,0.011180400004377589,0.010844100004760548,0.010904299997491762,0.010995600008754991,0.010738800003309734,0.010953600009088404,0.01104250000207685,0.010801099997479469,0.011061500001233071,0.011170200014021248,0.010924999995040707,0.01077209999493789,0.010871899998164736,0.010895400002482347,0.010666500005754642,0.010979899991070852,0.010926299990387633,0.010618500004056841,0.0109319999901345,0.011146299992105924,0.01094839999859687,0.01080750000255648,0.011094100002082996,0.010944800000288524,0.01083860000653658,0.010868800003663637,0.01096460000553634,0.010676199992303737,0.013033099996391684,0.011253300006501377,0.010768100008135661,0.011021199999959208,0.010996299999533221,0.010764299993752502,0.010927099996479228,0.010894099992583506,0.010661399996024556,0.010805500001879409,0.010914099999354221,0.010942699998850003,0.010772800000268035,0.011024599996744655,0.011089999999967404,0.010789000007207505,0.010889500001212582,0.010840599992661737,0.010789599997224286,0.010869399993680418,0.010789299994939938,0.011132500003441237,0.01073730000643991,0.010902300011366606,0.01112680000369437,0.010846499993931502,0.011150799997267313,0.011051399997086264,0.010950000010780059,0.011011200011125766,0.01112180000927765,0.010743100006948225,0.011079199990490451,0.010932799996226095,0.011007900000549853,0.01074240000161808,0.011010000001988374,0.010855899992748164,0.01069880000432022,0.010890200006542727,0.002746300000580959,0.0016743999876780435,0.002797399996779859,0.003423100002692081,0.0029620999994222075,0.0032873000018298626,0.002549400000134483,0.002277799998410046,0.002142999990610406,0.002551800003857352,0.002319299994269386,0.0031448999943677336,0.0033745999971870333,0.0026375000015832484,0.002671800000825897,0.002749699997366406,0.003302800003439188,0.003056700006709434,0.003690199999255128,0.0030381000105990097,0.0031453999981749803,0.00322250000317581,0.0034023999905912206,0.002904499997384846,0.0027537999994819984,0.003241300000809133,0.00382030000037048,0.003339700007927604,0.002951799993752502,0.0031315000087488443,0.003899899995303713,0.0031013999978313223,0.0029066999995848164,0.002894200006267056,0.003320300005725585,0.003351099992869422,0.0038090000016381964,0.0025738999975146726,0.002671900001587346,0.0026187000039499253,0.0030387000006157905,0.0028291000053286552,0.0025825000047916546,0.0026130000042030588,0.002639300000737421,0.00270470000396017,0.0034974000009242445,0.0026169999910052866,0.0024849000037647784,0.002646599998115562,0.0029836000030627474,0.002769099999568425,0.0035433000011835247,0.00303880000137724,0.0027846000011777505,0.0027874000079464167,0.0023785999946994707,0.002772399995592423,0.002466999998432584,0.002294999998412095,0.002873099991120398,0.00257650000276044,0.0023927000002004206,0.0024231999996118248,0.0022229000023799017,0.003062299991142936,0.0027310000004945323,0.002960700003313832,0.0035853000008501112,0.0024492000084137544,0.002915200006100349,0.0030636000010417774,0.002942599996458739,0.002948399996967055,0.002914900003816001,0.003105300012975931,0.00293279999459628,0.0039388000004692,0.003583099998650141,0.003146200004266575,0.0031386999908136204,0.0029135000077076256,0.003370499995071441,0.003200699997250922,0.003977800006396137,0.003226799992262386,0.0026987000019289553,0.004109100002096966,0.0026925999991362914,0.0025655999925220385,0.003574200003640726,0.002919100006693043,0.0031763000006321818,0.0030315999902086332,0.002984600010677241,0.0032242999877780676,0.003094599989708513,0.0034411000087857246,0.003002299999934621,0.0028196000057505444],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=10.943750ms, Polars=2.945500ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('d03d12ff-b1da-45d5-a0e0-fedc9e7c9316');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nPerforming a representative workflow\n:::\n:::\n\n\n## Using `pl.scan_csv`\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (\n        df_pandas.loc[:, lambda df: ~df.columns.isin([\"is_married\"])]\n        .query(\"name=='David' and born>1980 and city != 'London' and children >= 3\")\n        .assign(\n            born=lambda df: df.born.div(100).round(),\n            name=lambda df: df.name.str.lower(),\n            city=lambda df: df.city.str.upper(),\n            zip_code=lambda df: df.zip_code.mul(2),\n            income=lambda df: df.income.div(10),\n            children=lambda df: df.children.astype(\"bool\"),\n            car=lambda df: df.car.str[0],\n        )\n        .groupby(\n            [\n                \"name\",\n                \"car\",\n            ]\n        )\n        .agg(\n            born_min=(\"born\", min),\n            born_max=(\"born\", max),\n            income_mean=(\"income\", np.mean),\n            income_median=(\"income\", np.median),\n            children_mean=(\"children\", np.mean),\n            car_count=(\"car\", \"count\"),\n        )\n    ),\n    \"Polars\": lambda: (\n        pl.scan_csv(\"sample.csv\")\n        .select(cs.all() - cs.ends_with(\"married\"))\n        .filter(\n            (pl.col(\"name\") == \"David\")\n            & (pl.col(\"born\") > 1980)\n            & (pl.col(\"city\") != \"London\")\n            & (pl.col(\"children\") >= 3)\n        )\n        .with_columns(\n            [\n                (pl.col(\"born\") / 100).round(),\n                pl.col(\"name\").str.to_lowercase(),\n                pl.col(\"city\").str.to_uppercase(),\n                pl.col(\"zip_code\") * 2,\n                (pl.col(\"income\") / 10),\n                pl.col(\"children\").cast(pl.Boolean),\n                pl.col(\"car\").str.slice(0, length=1),\n            ]\n        )\n        .groupby(\n            [\n                \"name\",\n                \"car\",\n            ]\n        )\n        .agg(\n            [\n                pl.col(\"born\").min().alias(\"born_min\"),\n                pl.col(\"born\").max().alias(\"born_max\"),\n                pl.col(\"income\").mean().alias(\"income_mean\"),\n                pl.col(\"income\").median().alias(\"income_median\"),\n                pl.col(\"children\").mean().alias(\"children_mean\"),\n                pl.col(\"car\").count().alias(\"car_count\"),\n            ]\n        )\n        .collect()\n    ),\n}\nwhole_workflow_scan_csv = run_test(test_dict, \"Whole workflow (scan_csv)\")\n```\n\n::: {#fig-fig13 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"66bac98d-dc12-4e47-83f6-72910c9e4c2f\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"66bac98d-dc12-4e47-83f6-72910c9e4c2f\")) {                    Plotly.newPlot(                        \"66bac98d-dc12-4e47-83f6-72910c9e4c2f\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.02409000000625383,0.012955600002896972,0.01103500000317581,0.011230299991439097,0.01104539999505505,0.011125199991511181,0.010960800005705096,0.01224700000602752,0.011366400009137578,0.010870099999010563,0.010982000007061288,0.012577600005897693,0.012036400003125891,0.010813299988512881,0.011107099999208003,0.011068099993281066,0.010825799996382557,0.013665799997397698,0.011457300002803095,0.010811000000103377,0.011085100006312132,0.010932999997748993,0.010702500003390014,0.010830700004589744,0.010821999996551313,0.01069870000355877,0.010869600009755231,0.012352600009762682,0.011918400006834418,0.024000399993383326,0.014929800003301352,0.01151790001313202,0.011044800005038269,0.010785800011944957,0.010823200005688705,0.01087569999799598,0.010608199998387136,0.011022099992260337,0.010871799997403286,0.010679099999833852,0.010759599987068214,0.01105939999979455,0.010654199999407865,0.010834499989869073,0.010773900008643977,0.010844899996300228,0.010611000005155802,0.01099429999885615,0.010674800010747276,0.010630000004312024,0.010987799993017688,0.010788099985802546,0.010611000005155802,0.01120019999507349,0.010782099998323247,0.010724099993240088,0.010882799993851222,0.010930000004009344,0.010865600008401088,0.010531600011745468,0.011149500001920387,0.010751299996627495,0.010707800000091083,0.010916700004599988,0.010874200001126155,0.010703800013288856,0.010784800004330464,0.011019300000043586,0.010642299996106885,0.010882000002311543,0.010782199999084696,0.010615199993480928,0.010871400008909404,0.01081950000661891,0.010767999992822297,0.01062899999669753,0.010709499998483807,0.010834700005943887,0.010618899992550723,0.010667199996532872,0.010728599998401478,0.010716900011175312,0.010875300009502098,0.010999700010870583,0.010588200006168336,0.010675400000764057,0.010779599993838929,0.011027400003513321,0.01067860001057852,0.011082299999543466,0.01072839999687858,0.010620600005495362,0.010767100000521168,0.01081730000441894,0.010586600008537062,0.010653600009391084,0.010692000010749325,0.010696900004404597,0.01091120000637602,0.010981100000208244,0.005497299993294291,0.004651299997931346,0.006301399989752099,0.005132999998750165,0.008452199996099807,0.005945199998677708,0.006244400006835349,0.0061523000040324405,0.006499100010842085,0.006768099992768839,0.007841900005587377,0.00703609999618493,0.006400300000677817,0.007452199992258102,0.007518799990066327,0.005988899996737018,0.0065015000000130385,0.00677309998718556,0.006203900004038587,0.006549900004756637,0.006202299991855398,0.006616200000280514,0.007458600011887029,0.006814799999119714,0.007538100006058812,0.006566199997905642,0.007957399997394532,0.006898200008436106,0.006777699993108399,0.0069084999995538965,0.007141599999158643,0.0067434999946272,0.005833399991388433,0.006598599997232668,0.0053232000063871965,0.007372299995040521,0.006167500003357418,0.005403600007412024,0.006212199994479306,0.006439299992052838,0.006434900002204813,0.0064645999955246225,0.00697020000370685,0.005999899993184954,0.0063529000035487115,0.007882199992309324,0.00578789999417495,0.006370600007358007,0.0056311999942408875,0.0054872000036993995,0.006287500000325963,0.0061153999995440245,0.006280700006755069,0.00579529999231454,0.005576099996687844,0.006786099998862483,0.0065297999972244725,0.007679399990593083,0.005353999993531033,0.006165200000395998,0.005619999996270053,0.005521500002942048,0.005195000005187467,0.005837799995788373,0.005778600010671653,0.005742599998484366,0.005835399992065504,0.005843999999342486,0.005292699992423877,0.007005200008279644,0.005908299994189292,0.005779999992228113,0.006471900007454678,0.0068171999882906675,0.006226799989235587,0.006172099994728342,0.006267400007345714,0.006468699997640215,0.006731899993610568,0.007289800007129088,0.0066947000013897195,0.005882100012968294,0.006027900002663955,0.006563899994944222,0.006978699995670468,0.006622300003073178,0.007439000008162111,0.0068476000014925376,0.00627389999863226,0.006857600004877895,0.006835699998191558,0.006471100001363084,0.005421199995907955,0.0075005999970017,0.0064611999987391755,0.005558700009714812,0.005626799989840947,0.007116000007954426,0.006111900001997128,0.0063526000012643635],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=10.834600ms, Polars=6.385450ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('66bac98d-dc12-4e47-83f6-72910c9e4c2f');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nPerforming a representative workflow (using `pl_scan_csv` for Polars)\n:::\n:::\n\n\nAs evident, the utilization of `scan_csv` increased the required time by about 3-4 times. However, even with this increase, Polars still manages to maintain a substantial advantage of around 5 times faster than the entire workflow executed using Pandas.\n\n::: {.callout-note}\n\nWhen we consider the entirety of the data processing pipeline, irrespective of the file reading approach, Polars emerges as the victor. It consistently exhibits a speed advantage of 5 to 20 times compared to Pandas.\n\n:::\n\n# Putting it together\n\nTime to bring together all the things we've explored! Let's sum up what we've learned.\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nsummary = pd.concat(\n    [\n        read_csv,\n        read_parquet,\n        # select_col_not_in_memory,\n        select_col_in_memory,\n        filter_row_one_condition,\n        filter_row_multiple_condition,\n        operate_one_column,\n        operate_multiple_column,\n        concatenate,\n        aggregate_simple,\n        aggregate_complex,\n        whole_workflow_read_csv,\n        # whole_workflow_scan_csv\n    ],\n    axis=1,\n)\n\nfig = (\n    summary.melt(var_name=\"experiment\", value_name=\"time_sec\")\n    .assign(\n        package=lambda df: df.experiment.str[-6:],\n        experiment=lambda df: df.experiment.str[:-7],\n    )\n    .groupby([\"experiment\", \"package\"])\n    .time_sec.mean()\n    .reset_index()\n    .pivot(columns=\"package\", values=\"time_sec\", index=\"experiment\")\n    .sort_values(\n        by=\"polars\",\n    )\n    .reset_index()\n    .pipe(\n        lambda df: px.bar(\n            df,\n            y=\"experiment\",\n            x=[\"pandas\", \"polars\"],\n            barmode=\"group\",\n            orientation=\"h\",\n            labels={\"value\": \"Mean Time (sec)\", \"experiment\": \"\"},\n            width=1000,\n            height=700,\n        )\n    )\n)\nfig.update_xaxes(tickangle=90)\nfig.update_layout(yaxis=dict(automargin=True), legend_title_text=\"Package\")\n```\n\n::: {#fig-fig14 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"d6f174cd-cd57-473d-8559-df0176d24f82\" class=\"plotly-graph-div\" style=\"height:700px; width:1000px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"d6f174cd-cd57-473d-8559-df0176d24f82\")) {                    Plotly.newPlot(                        \"d6f174cd-cd57-473d-8559-df0176d24f82\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=pandas\\u003cbr\\u003eMean Time (sec)=%{x}\\u003cbr\\u003e=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"pandas\",\"marker\":{\"color\":\"#1F77B4\",\"pattern\":{\"shape\":\"\"}},\"name\":\"pandas\",\"offsetgroup\":\"pandas\",\"orientation\":\"h\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[3.086500029894523e-05,0.0013237760007905309,0.0006579360007890501,0.0019697649993759116,0.004103104000823805,0.02475177900007111,0.011637354000122287,0.005005950998747721,0.0017994679999537766,0.007314024999795947,0.011261337000323692],\"xaxis\":\"x\",\"y\":[\"Select column\",\"Concatenate\",\"Operate (one column)\",\"Filter (simple)\",\"Filter (complex)\",\"Aggregate (complex)\",\"Operate (more columns)\",\"Read parquet\",\"Aggregate (simple)\",\"Read csv\",\"Whole workflow\"],\"yaxis\":\"y\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=polars\\u003cbr\\u003eMean Time (sec)=%{x}\\u003cbr\\u003e=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"polars\",\"marker\":{\"color\":\"#FF7F0E\",\"pattern\":{\"shape\":\"\"}},\"name\":\"polars\",\"offsetgroup\":\"polars\",\"orientation\":\"h\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[3.2117999508045615e-05,0.00031926100011332893,0.0003233400000317488,0.0008550240001932252,0.0012599730004149024,0.0015739639999810607,0.0020821660001820418,0.0022010299997054974,0.002289094999578083,0.0029007359992829153,0.002968610000098124],\"xaxis\":\"x\",\"y\":[\"Select column\",\"Concatenate\",\"Operate (one column)\",\"Filter (simple)\",\"Filter (complex)\",\"Aggregate (complex)\",\"Operate (more columns)\",\"Read parquet\",\"Aggregate (simple)\",\"Read csv\",\"Whole workflow\"],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Mean Time (sec)\"},\"tickangle\":90},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"},\"automargin\":true},\"legend\":{\"title\":{\"text\":\"Package\"},\"tracegroupgap\":0},\"margin\":{\"t\":60},\"barmode\":\"group\",\"height\":700,\"width\":1000},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('d6f174cd-cd57-473d-8559-df0176d24f82');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nAnalyzing Speed Differences Between Pandas and Polars in Common Data Science Workflow Operations\n:::\n:::\n\n\nThroughout our exploration, Polars has consistently outperformed Pandas, showcasing speed differences ranging from 2x to up to a remarkable 100x. We intentionally focused on tasks that frequently arise in data analysis, encompassing file reading, column selection, filtering, and more. However, where Polars truly shines is in aggregation, capitalizing on its multiprocessing prowess. Take a glance at @fig-fig14, and you'll notice that reading files is the most time-consuming step for Polars. To address this (and reduce memory usage at the same time), we have the nifty `scan_csv` function that enables Polars to operate in a lazy mode, optimizing the entire data pipeline. It's clear that Polars packs a punch in the realm of data processing!\n\nShould you consider using Polars? Based on the findings of this experiment, it's evident that Polars can bring substantial benefits to every stage of your data processing. Its remarkable speed can make a significant impact. If you're open to investing time in understanding its API (which isn't drastically different from Pandas), I'm confident your projects will gain a significant speed boost. And don't forget, the [trajectory](https://www.crunchbase.com/funding_round/polars-seed--963c89d2) of the project seems promising, implying a bright future ahead.\n\n",
    "supporting": [
      "polars_speed_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.24.1.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}