{
  "hash": "71fddc5453046da74d27383db638c8e1",
  "result": {
    "markdown": "---\ntitle: 'The Ultimate Speed Test: Pandas vs Polars '\nauthor: Adam Cseresznye\ndate: '2023-08-13'\ncategories:\n  - Polars\n  - Pandas\ntoc: true\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n---\n\n\n![](hans-jurgen-mager-qQWV91TTBrE-unsplash.jpg){fig-align=\"center\" width=50%}\n\nOnce I shared my first article about [\"Getting Started with Polars\"](https://adamcseresznye.github.io/blog/posts/polars/Polars_revised.html) I started thinking about something exciting: comparing the speed of Polars and Pandas. This curiosity was sparked by all the buzz around the brand-new [Pandas 2.0 release](https://pandas.pydata.org/docs/dev/whatsnew/v2.0.0.html), promising lightning-fast performance. Pandas 2.0 was announced to come packed with cool features, including the addition of Apache Arrow (pyarrow) as its backing memory format. The big perk of Apache Arrow is that it makes operations speedier and more memory-friendly. Naturally, this got me wondering: how does Pandas 2.0 measure up against Polars? Let's dive in and find out!\n\n::: {.callout-warning}\n\nKeep in mind: occasionally, I refer to some performance difference figures. Even though I repeated these experiments 100 times each, because computations can have a bit of randomness, there might be slight variations in the exact numbers.\n\n:::\n\n# Setup\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport polars as pl\nimport polars.selectors as cs\n\nimport numpy as np\nimport timeit\nimport random\n\nimport plotly.io as pio\nimport plotly.express as px\n\npio.templates.default = \"presentation\"\n\nprint(pd.__version__)\nprint(pl.__version__)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.0.3\n0.18.11\n```\n:::\n:::\n\n\n::: {.callout-note}\n\nThroughout this article, we'll be working with the latest versions of the packages: Pandas 2.0.3 and Polars 0.18.11.\n\n:::\n\n# Generate the synthetic data\n\nFor the purpose of benchmarking, we're going to create our own dataset. To ensure simplicity and uniformity, we'll generate a dataframe containing columns like name, year of birth, and city of residence – pretty straightforward stuff. We're aiming for a dataset of 10,000 rows. While we could certainly run this benchmark on a dataframe with more than a million rows, our intention is to provide a realistic example. The code we'll provide allows you to effortlessly explore various scenarios according to your requirements. Feel free to use it or modify it if you want to perform your own test.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef create_sample_dataframe(n_rows: int, name: str, seed: int = 42) -> pl.DataFrame:\n    \"\"\"\n    Create a sample Polars DataFrame with the specified number of rows.\n\n    This function generates random data for several columns and creates a Polars\n    DataFrame with the specified number of rows. The generated data includes information\n    about names, birth years, cities, zip codes, incomes, marital status, number of children,\n    and car brands. The resulting DataFrame is written to CSV and Parquet files named\n    'sample.csv' and '{name}.parquet', respectively.\n\n    Parameters\n    ----------\n    n_rows : int\n        The number of rows to generate in the sample DataFrame.\n    name : str\n        The name to be used when writing the Parquet file.\n    seed : int, optional\n        The seed to use when generating random data. Default is 42.\n\n    Returns\n    -------\n    pl.DataFrame\n        The first 5 rows of the generated sample DataFrame.\n    \"\"\"\n    random.seed(seed)\n    np.random.seed(seed)\n\n    data = {\n        \"name\": np.random.choice([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eva\"], n_rows),\n        \"born\": np.random.randint(1950, 1990, size=n_rows),\n        \"city\": np.random.choice(\n            [\"Shanghai\", \"San Francisco\", \"London\", \"Munich\", \"Mumbai\"], n_rows\n        ),\n        \"zip_code\": np.random.randint(10000, 99999, size=n_rows),\n        \"income\": np.random.normal(50000, 10000, size=n_rows),\n        \"is_married\": np.random.choice([True, False], n_rows),\n        \"children\": np.random.randint(0, 5, size=n_rows),\n        \"car\": np.random.choice([\"Ford\", \"BMW\", \"Toyota\", \"Bentley\", \"Mini\"], n_rows),\n    }\n    temp_df = pl.DataFrame(data)\n    temp_df.write_csv(\"sample.csv\")\n    temp_df.write_parquet(f\"{name}.parquet\")\n    return temp_df.head()\n\n\ncreate_sample_dataframe(n_rows=10_000, name=\"sample\", seed=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (5, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>born</th><th>city</th><th>zip_code</th><th>income</th><th>is_married</th><th>children</th><th>car</th></tr><tr><td>str</td><td>i32</td><td>str</td><td>i32</td><td>f64</td><td>bool</td><td>i32</td><td>str</td></tr></thead><tbody><tr><td>&quot;David&quot;</td><td>1953</td><td>&quot;Shanghai&quot;</td><td>35716</td><td>69693.044244</td><td>false</td><td>4</td><td>&quot;Bentley&quot;</td></tr><tr><td>&quot;Eva&quot;</td><td>1984</td><td>&quot;London&quot;</td><td>30931</td><td>30547.027839</td><td>true</td><td>1</td><td>&quot;Toyota&quot;</td></tr><tr><td>&quot;Alice&quot;</td><td>1979</td><td>&quot;San Francisco&quot;</td><td>85967</td><td>63489.882712</td><td>false</td><td>1</td><td>&quot;Mini&quot;</td></tr><tr><td>&quot;Bob&quot;</td><td>1969</td><td>&quot;San Francisco&quot;</td><td>64527</td><td>56030.692112</td><td>false</td><td>1</td><td>&quot;Toyota&quot;</td></tr><tr><td>&quot;David&quot;</td><td>1979</td><td>&quot;Munich&quot;</td><td>53316</td><td>51118.005552</td><td>true</td><td>3</td><td>&quot;Ford&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n# Define helper class\n\nIn order to streamline our code, we'll create a convenient helper class featuring two essential methods: `get_time` and `get_figure`. The `get_time` method leverages the `timeit.repeat` function to accurately gauge the execution time of our code. In this context, we'll set the parameters `number = 1` and `repeat = 100`. This configuration runs the operations 100 times, allowing us to derive key statistics like the mean, median, and standard deviation. \n\nOn the other hand, the `get_figure` method takes these gathered results and generates a visually appealing image using Plotly. \n\nTo bring it all together and keep things simple, we've designed the `run_test` function. This function orchestrates the entire process, seamlessly merging the steps outlined above.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nclass Timeit:\n    \"\"\"\n    A class for measuring the execution time of multiple functions.\n    This class provides methods for measuring the execution time of\n    multiple functions using the `timeit` module. The functions to be\n    tested are passed to the constructor as a dictionary, where the\n    keys are the names of the functions and the values are the functions\n    themselves. The `number` and `repeat` parameters control how many times\n    each function is executed and how many times the timing is repeated,\n    respectively.\n\n    The `get_time` method measures the execution time of each function and\n    stores the results in a dictionary, where the keys are the names of\n    the functions and the values are lists of execution times. The `get_figure`\n    method generates a box plot of the execution times using the `plotly.express.box`\n    function.\n\n    Parameters\n    ----------\n    func_dict : dict\n        A dictionary of functions to test, where the keys are the names of the\n        functions and the values are the functions themselves.\n    number : int, optional\n        The number of times to execute each function in each timing run (default is 1).\n    repeat : int, optional\n        The number of times to repeat each timing run (default is 20).\n\n    Attributes\n    ----------\n    results : dict or None\n        A dictionary of execution times for each function, where the keys are the names\n        of the functions and the values are lists of execution times. This attribute is\n        `None` until `get_time` is called.\n\n    Methods\n    -------\n    get_time()\n        Measure the execution time of each function and store the results in the `results` attribute.\n    get_figure()\n        Generate a box plot of the execution times using `plotly.express.box`.\n    \"\"\"\n\n    def __init__(self, func_dict, number=1, repeat=100):\n        self.func_dict = func_dict\n        self.number = number\n        self.repeat = repeat\n        self.results = None\n\n    def get_time(self):\n        \"\"\"\n        Measure the execution time of each function and store the results.\n        This method uses the `timeit.repeat` function to measure the execution time of each function\n        in `func_dict`. The results are stored in a dictionary, where the keys are the names of\n        the functions and the values are lists of execution times. This dictionary is also stored\n        in the `results` attribute of the `Timeit` object.\n\n        Returns\n        -------\n        dict\n            A dictionary of execution times for each function.\n        \"\"\"\n        results = {}\n        for k, v in self.func_dict.items():\n            results[k] = timeit.repeat(v, number=self.number, repeat=self.repeat)\n        self.results = results\n        return results\n\n    def get_figure(self):\n        \"\"\"\n        Generate a box plot of the execution times.\n        This method uses `plotly.express.box` to generate a box plot of the execution times\n        stored in `results`.If `results` is `None`, this method raises a `ValueError`.\n\n        Returns\n        -------\n        plotly.graph_objs.Figure\n            A box plot figure object.\n\n        Raises\n        ------\n        ValueError\n            If no results are available (i.e., if `get_time` has not been called).\n        \"\"\"\n        if self.results is None:\n            raise ValueError(\"No results available. Please run get_time first.\")\n        df = pd.DataFrame(self.results)\n        mean_times = df.median() * 1000\n        title = f'Median Execution Times: <br><sup>{\", \".join([f\"{k}={v:.6f}ms\" for k,v in mean_times.items()])}</sup>'\n        return px.box(\n            df,\n            points=\"all\",\n            labels={\"value\": \"time (sec)\", \"variable\": \"\"},\n            title=title,\n            width=600,\n            height=500,\n        )\n\n\ndef run_test(test: dict, name: str):\n    \"\"\"\n    Run a timing test on a dictionary of functions using the Timeit class and\n    return the results as a DataFrame.\n\n    This function takes a dictionary of functions as input, where the keys are\n    the names of the functions and the values are the functions themselves. It creates\n    a Timeit object with this dictionary and uses it to measure the execution time of\n    each function. The results are then displayed as a box plot using the `get_figure`\n    method of the Timeit object and returned as a Pandas DataFrame with columns renamed\n    according to the `name` argument.\n\n    Parameters\n    ----------\n    test : dict\n        A dictionary of functions to test, where the keys are the names of the functions\n        and the values are the functions themselves.\n    name : str\n        A string used to rename the columns of the returned DataFrame.\n\n    Returns\n    -------\n    pd.DataFrame\n        A DataFrame containing the results of the timing test, with columns renamed\n        according to the `name` argument.\n    \"\"\"\n\n    # Create a Timeit object\n    t = Timeit(test)\n    # Measure the execution time of the functions\n    results = t.get_time()\n    # Generate a box plot of the execution times\n    fig = t.get_figure()\n    fig.show()\n\n    return pd.DataFrame(results).rename(\n        columns={\"Pandas\": f\"{name}_pandas\", \"Polars\": f\"{name}_polars\"}\n    )\n```\n:::\n\n\n# Reading in data From a CSV File and parquet\n\n## CSV\n\nReading CSV files from disk is a task that data scientists often find themselves doing. Now, let's see how these two libraries compare for this particular job. To maximize the blazing-fast data handling capabilities of PyArrow, we'll equip Pandas with the `engine=\"pyarrow\"` and `dtype_backend=\"pyarrow\"` arguments. Let's see how these choices shape the performance!\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: pd.read_csv(\n        \"sample.csv\", engine=\"pyarrow\", dtype_backend=\"pyarrow\"\n    ),\n    \"Polars\": lambda: pl.read_csv(\"sample.csv\"),\n}\nread_csv = run_test(test_dict, \"Read csv\")\n```\n\n::: {#fig-fig1 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"d61a0592-9cb4-437e-96a8-92fd227e823e\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"d61a0592-9cb4-437e-96a8-92fd227e823e\")) {                    Plotly.newPlot(                        \"d61a0592-9cb4-437e-96a8-92fd227e823e\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.04468919997452758,0.007992400001967326,0.009630000015022233,0.008083799999440089,0.008591299992986023,0.007584899984067306,0.007829100009985268,0.008113899995805696,0.007943400007206947,0.006689599977107719,0.005860600009327754,0.007646500016562641,0.00546559999929741,0.006028100004186854,0.0064424999873153865,0.006653599994024262,0.005986300006043166,0.007491500000469387,0.006703300023218617,0.007758799998555332,0.008773600013228133,0.009737499989569187,0.009021100006066263,0.008010799996554852,0.008520200004568323,0.006906299997353926,0.007915800000773743,0.009555900003761053,0.008613600017270073,0.006187399994814768,0.008721699996385723,0.009676900022896007,0.006366400019032881,0.007008899992797524,0.00904360000276938,0.007678499998291954,0.008054099977016449,0.008676900004502386,0.01102610002271831,0.010473000002093613,0.009009000001242384,0.009366899990709499,0.007215699995867908,0.007037500006845221,0.009213500015903264,0.00801989997853525,0.008914000005461276,0.008136399992508814,0.008059499989030883,0.00770139999804087,0.008462600002530962,0.008684400003403425,0.0063412000017706305,0.005777200014563277,0.006262599985348061,0.006991999980527908,0.0059025000082328916,0.006348399998387322,0.006706799991661683,0.005999899993184954,0.005404399998951703,0.0058932999963872135,0.009717399982037023,0.00864380001439713,0.009482499997830018,0.007842599996365607,0.011038700002245605,0.007776199985528365,0.0094824000261724,0.008541899995179847,0.010055199993075803,0.010886600008234382,0.011762100009946153,0.011011800001142547,0.012012200022581965,0.008199400006560609,0.008005000010598451,0.00973570000496693,0.010516599984839559,0.009247300011338666,0.009446499985642731,0.00862889998825267,0.007606700004544109,0.008953899989137426,0.007670599996345118,0.008527199999662116,0.007208099996205419,0.009664900018833578,0.008174800022970885,0.008780500007560477,0.006669099995633587,0.009252199990442023,0.008399899990763515,0.008356699981959537,0.00713550002546981,0.006436499999836087,0.006494300003396347,0.006536400003824383,0.009292200003983453,0.00616060002357699,0.00434700000914745,0.00347140000667423,0.0033875000081025064,0.003271499997936189,0.002929000009316951,0.002952600014396012,0.0026348000101279467,0.002973299997393042,0.00248759999522008,0.002512899984139949,0.002455299982102588,0.0025539000052958727,0.002676799980690703,0.0024982999893836677,0.002634600008605048,0.0024013000074774027,0.0033851000189315528,0.002778900001430884,0.00302689999807626,0.0032250999938696623,0.0032512000179849565,0.003776300000026822,0.0032740999886300415,0.003788000001804903,0.0032088999869301915,0.003067100013140589,0.003174800018314272,0.003556600015144795,0.0036976000119466335,0.003297200019005686,0.0029125000000931323,0.0033589999948162585,0.0035351999977137893,0.0036631000111810863,0.0034576000180095434,0.003292799985501915,0.003161000000545755,0.0033562000025995076,0.0034636000054888427,0.003386199998203665,0.003446400020038709,0.003607399994507432,0.002888699993491173,0.0033338999783154577,0.003081600007135421,0.0025424000050406903,0.0027709999994840473,0.003575399983674288,0.0030956999980844557,0.0031793999951332808,0.0032250999938696623,0.002937699988251552,0.003044300014153123,0.002630699978908524,0.0031458000012207776,0.00281649999669753,0.0027145000058226287,0.002901300002122298,0.0029921999957878143,0.0028359999996609986,0.002979299984872341,0.002946100023109466,0.00351290000253357,0.0027492000081110746,0.0032598999969195575,0.0030368999869097024,0.0033651999838184565,0.00274400002672337,0.002661600010469556,0.002965599996969104,0.003232099988963455,0.002898800012189895,0.0027295000036247075,0.0028703999996650964,0.003380300011485815,0.0033599000016693026,0.0031701999832876027,0.0026858999917749316,0.0027083000168204308,0.0028657999937422574,0.002627899986691773,0.002885900001274422,0.0032227000046987087,0.003050699975574389,0.0032344000064767897,0.002726800012169406,0.002607500005979091,0.0025796999980229884,0.002523000002838671,0.002688499982468784,0.0027433999930508435,0.0027592999977059662,0.0028074999863747507,0.0026397999899927527,0.0024021000135689974,0.0030414999928325415,0.00277360001928173,0.0025245000142604113,0.0025867999938782305,0.0026954000059049577],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=8.071650ms, Polars=2.976300ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('d61a0592-9cb4-437e-96a8-92fd227e823e');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nReading in data From a CSV File\n:::\n:::\n\n\nFor the sake of comparison, we'll also demonstrate the timeit function invoked using Jupyter cell magic. You'll notice that the numbers generated this way are quite closely aligned with ours.\n\n::: {.cell tags='[]' execution_count=5}\n``` {.python .cell-code}\n%%timeit\npd.read_csv(\"sample.csv\", engine=\"pyarrow\", dtype_backend=\"pyarrow\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10.8 ms ± 3.34 ms per loop (mean ± std. dev. of 7 runs, 100 loops each)\n```\n:::\n:::\n\n\n::: {.cell tags='[]' execution_count=6}\n``` {.python .cell-code}\n%%timeit\npl.read_csv(\"sample.csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3.96 ms ± 238 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n```\n:::\n:::\n\n\n## parquet\n\nNow, let's read the data in Parquet format.\n\n::: {.cell tags='[]' execution_count=7}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: pd.read_parquet(\n        \"sample.parquet\", engine=\"pyarrow\", dtype_backend=\"pyarrow\"\n    ),\n    \"Polars\": lambda: pl.read_parquet(\"sample.parquet\"),\n}\nread_parquet = run_test(test_dict, \"Read parquet\")\n```\n\n::: {#fig-fig2 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"324d0a41-c5a0-4d70-a3d5-41c17f78c5af\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"324d0a41-c5a0-4d70-a3d5-41c17f78c5af\")) {                    Plotly.newPlot(                        \"324d0a41-c5a0-4d70-a3d5-41c17f78c5af\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.06762539999908768,0.011620899982517585,0.009769900003448129,0.009350800013635308,0.009513900004094467,0.009058700001332909,0.009451899997657165,0.00926290001370944,0.009508000017376617,0.009300600009737536,0.009294899995438755,0.008684600004926324,0.009644500009017065,0.00887920000241138,0.009638899995479733,0.00874429999385029,0.009801300009712577,0.009101100004045293,0.009094400011235848,0.009001400001579896,0.008779700001468882,0.00983650001580827,0.01108700002077967,0.011262800020631403,0.01164680000510998,0.0093295999977272,0.00904090001131408,0.008830599981592968,0.00869699998293072,0.009010000008856878,0.008770899992669001,0.008770299988100305,0.008715500007383525,0.009530100011033937,0.009631499997340143,0.008993700001155958,0.009159800014458597,0.008983300009276718,0.009518000006210059,0.009993999992730096,0.009306399995693937,0.010686099994927645,0.009423699986655265,0.010968500020680949,0.009990999998990446,0.012131199997384101,0.01047340000513941,0.010240499977953732,0.0129624999826774,0.01255499999388121,0.0113402999995742,0.013582099985796958,0.013026900007389486,0.011758200009353459,0.01174170000012964,0.013396499998634681,0.017334000003756955,0.012786399980541319,0.013203799986513332,0.009670899977209046,0.010944500012556091,0.011595299991313368,0.010904099995968863,0.01223370002117008,0.010583700001006946,0.011044400016544387,0.010850799997569993,0.012924299982842058,0.010453499999130145,0.012194900016766042,0.01142180000897497,0.009375300025567412,0.009864799998467788,0.009737699991092086,0.009244699991540983,0.009745100018335506,0.011176100000739098,0.00958740001078695,0.009102100011659786,0.008490100008202717,0.009076900023501366,0.009319500008132309,0.009218699997290969,0.009182199981296435,0.0090970000019297,0.008627100003650412,0.010002099996199831,0.00928379999822937,0.010049200005596504,0.009634199988795444,0.009068300016224384,0.009776099992450327,0.008876600011717528,0.010040499997558072,0.009106099983910099,0.009585200023138896,0.009503699984634295,0.008974800002761185,0.009077099995920435,0.009116800007177517,0.005299000011291355,0.004358300007879734,0.004194699984509498,0.004356599994935095,0.0043157000036444515,0.004414499999256805,0.00438549998216331,0.004549400007817894,0.004199299990432337,0.0041455000173300505,0.0045717999746557325,0.004236200009472668,0.0043329999898560345,0.004733099980512634,0.004152800014708191,0.004366800014395267,0.004135400027735159,0.0039477999962400645,0.004876299994066358,0.004116900003282353,0.0040926999936345965,0.004039799998281524,0.0044997999793849885,0.004342700005508959,0.005103000003146008,0.004120999976294115,0.004006600007414818,0.004473399982089177,0.004168600018601865,0.004261699999915436,0.0038292999961413443,0.004120600002352148,0.004024299996672198,0.004029600007925183,0.004139199998462573,0.004492799984291196,0.004183899989584461,0.004132500005653128,0.004095299984328449,0.004071800009114668,0.004116299998713657,0.0038332999974954873,0.004076799988979474,0.004226199991535395,0.0040031000098679215,0.0038320000167004764,0.0037968999822624028,0.004617099999450147,0.0042284999799449,0.004103099985513836,0.004105700005311519,0.004120700003113598,0.00399140000808984,0.005485600006068125,0.004390299989609048,0.004222899995511398,0.004296099999919534,0.0041188999894075096,0.003991999983554706,0.004338800004916266,0.004211199993733317,0.004018600011477247,0.004217099980451167,0.0038175999943632632,0.004057100013596937,0.003940499998861924,0.004445900005521253,0.003980299981776625,0.004271200014045462,0.004063599975779653,0.004212500003632158,0.004230699996696785,0.004216300003463402,0.004043000022647902,0.00413070002105087,0.004008499992778525,0.00410849999752827,0.004200900002615526,0.004120700003113598,0.004550900019239634,0.004173199995420873,0.004219399997964501,0.004203099990263581,0.003940900001907721,0.003977699991082773,0.004196299996692687,0.004110500012757257,0.0040210000006482005,0.0038878000050317496,0.004043799999635667,0.004375499993329868,0.004400200006784871,0.004242999973939732,0.0038754999986849725,0.004362999985460192,0.004210100014461204,0.003819900011876598,0.004185099998721853,0.0041683999879751354,0.00469370000064373],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=9.609450ms, Polars=4.170900ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('324d0a41-c5a0-4d70-a3d5-41c17f78c5af');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nReading in data From a parquet File\n:::\n:::\n\n\n::: {.callout-note}\n\nPolars unquestionably wins this round, it can boast a speed advantage of 2 to 4 times over Pandas.\n:::\n\n# Selecting Columns\n\nAlright, let's spice things up a bit and select some columns to see which library races ahead in terms of speed!\n\n## Files awaiting in-memory reading\n\nA clever approach to conserve memory and enhance speed involves reading only the columns essential for operations. Consider a scenario where we're interested in displaying just the names from this dataset. The big question now: how do these libraries measure up in terms of speed? Let's find out!\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: pd.read_csv(\n        \"sample.csv\", engine=\"pyarrow\", dtype_backend=\"pyarrow\", usecols=[\"name\"]\n    ),\n    \"Polars\": lambda: pl.scan_csv(\"sample.csv\").select(pl.col(\"name\")).collect(),\n}\nselect_col_not_in_memory = run_test(test_dict, \"Select column (not in memory)\")\n```\n\n::: {#fig-fig3 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"540752f2-c30f-45a9-aba2-a4bf0040578e\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"540752f2-c30f-45a9-aba2-a4bf0040578e\")) {                    Plotly.newPlot(                        \"540752f2-c30f-45a9-aba2-a4bf0040578e\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.012926299998071045,0.011102199991000816,0.014116400008788332,0.01219080001465045,0.011590300011448562,0.011598599987337366,0.012704900000244379,0.011314599978504702,0.010903799993684515,0.011597400007303804,0.012545000005047768,0.01182759998482652,0.011422499985201284,0.011050500004785135,0.011319900018861517,0.011294600000837818,0.011385300022084266,0.011909299995750189,0.011406400008127093,0.011161400005221367,0.010766299994429573,0.011640199983958155,0.011071200016885996,0.010372999997343868,0.011561500024981797,0.011113900021882728,0.01150029999553226,0.011531500000273809,0.011744899995392188,0.01168260001577437,0.011868500005220994,0.01130770001327619,0.01166019999072887,0.010825500008650124,0.010866700002225116,0.01232239999808371,0.010728099994594231,0.011007599998265505,0.01116389999515377,0.011520200001541525,0.01108379999641329,0.011277800018433481,0.01152400000137277,0.011592599999858066,0.011022399994544685,0.010365699999965727,0.011093999986769632,0.010610800003632903,0.01058309999643825,0.011282100022071972,0.010897899977862835,0.01086019998183474,0.012489500019000843,0.012888200028100982,0.012216999981319532,0.01142460000119172,0.010965499997837469,0.011357400013366714,0.011626499996054918,0.010875200008740649,0.010480199998710304,0.0111388000077568,0.011539099999936298,0.011273299984168261,0.01145429999451153,0.0117995000036899,0.012835400004405528,0.012589599995408207,0.011771299992688,0.011855599994305521,0.012847599980887026,0.011489999975310639,0.01196240002172999,0.011840800027130172,0.01188400000683032,0.011675999994622543,0.011878399993292987,0.013434399996185675,0.012936599989188835,0.011880100006237626,0.010431100003188476,0.011829499999294057,0.011569999973289669,0.010885600000619888,0.011344300000928342,0.01078889999189414,0.01052229999913834,0.010700799990445375,0.012240500014740974,0.015333699993789196,0.012677899998379871,0.011817599995993078,0.01057280000532046,0.012491600005887449,0.011778200016124174,0.013528100011171773,0.013564500026404858,0.012849600025219843,0.011793699988629669,0.011390400002710521,0.0059012999990954995,0.004767500009620562,0.004074199998285621,0.004590299999108538,0.004557000007480383,0.004317900020396337,0.004507500008912757,0.0044639999978244305,0.004218399990350008,0.004265799972927198,0.004303699999582022,0.0038843000074848533,0.0041455000173300505,0.0038966999854892492,0.004077799996593967,0.00440780000644736,0.003690400015329942,0.003954799991333857,0.004243799980031326,0.004604700021445751,0.003969500015955418,0.004227400000672787,0.004275499988580123,0.004465400008484721,0.0038620999839622527,0.004145899991272017,0.004690300003858283,0.004457799979718402,0.0039028000028338283,0.003942699986509979,0.004761599993798882,0.004376999975647777,0.004266900010406971,0.0038078000070527196,0.004952599992975593,0.004199599992716685,0.004226799996104091,0.004073499992955476,0.004892500001005828,0.004558099986752495,0.004137599986279383,0.0045144000032451,0.004867400013608858,0.004949900001520291,0.004727299994556233,0.005704000010155141,0.0041600000113248825,0.004452100023627281,0.004955800017341971,0.004707500018412247,0.004390300018712878,0.0038704000180587173,0.005184800014831126,0.00496340001700446,0.004191800020635128,0.004454399982932955,0.0062479000189341605,0.0041412000136915594,0.004077099991263822,0.005634700006339699,0.004583300004014745,0.005118500004755333,0.0047876999888103455,0.004774900007760152,0.004082100000232458,0.004177700000582263,0.004736900009447709,0.004657199984649196,0.004232200008118525,0.00397359998896718,0.00565240002470091,0.003997000021627173,0.004685700027039275,0.004241000016918406,0.004898899991530925,0.004700999998021871,0.003910700004780665,0.005242500017629936,0.004666900000302121,0.004019699990749359,0.0040243999974336475,0.005162800021935254,0.00436930000432767,0.004145899991272017,0.004398299992317334,0.005415999999968335,0.004154700000071898,0.004777299996931106,0.0048411999887321144,0.0038218999980017543,0.004687499982537702,0.004197100002784282,0.005071399995358661,0.0052063000039197505,0.004317100014304742,0.005084199976408854,0.0049174999876413494,0.005567300016991794,0.0057426999846939,0.005826600012369454],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=11.527750ms, Polars=4.453250ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('540752f2-c30f-45a9-aba2-a4bf0040578e');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nSelecting Columns from a File Not Yet in Memory\n:::\n:::\n\n\n## File is in memory\n\nAs anticipated, Polars continues to showcase its swiftness. It's worth highlighting the usage of the `lazy` and `collect` methods in Polars. These nifty tools grant us access to the library's clever query optimization techniques, which play a pivotal role in significantly enhancing performance. OK, one step further: suppose our files are already loaded into memory. Would there still be a distinction in performance under this circumstance?\n\n::: {.cell tags='[]' execution_count=9}\n``` {.python .cell-code}\ndf_pandas = pd.read_csv(\"sample.csv\", engine=\"pyarrow\", dtype_backend=\"pyarrow\")\ndf_polars = pl.read_csv(\"sample.csv\")\n```\n:::\n\n\n::: {.cell tags='[]' execution_count=10}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: df_pandas.loc[:, \"name\"],\n    \"Polars\": lambda: df_polars.lazy().select(pl.col(\"name\")).collect(),\n}\nselect_col_in_memory = run_test(test_dict, \"Select column\")\n```\n\n::: {#fig-fig4 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"d08f24aa-df98-4a49-b202-d96b6e94d070\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"d08f24aa-df98-4a49-b202-d96b6e94d070\")) {                    Plotly.newPlot(                        \"d08f24aa-df98-4a49-b202-d96b6e94d070\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.0006195000023581088,0.00010119998478330672,7.539999205619097e-05,7.20999960321933e-05,7.129998994059861e-05,8.070000330917537e-05,6.819999543949962e-05,0.00010550001752562821,6.999998004175723e-05,6.740001845173538e-05,6.130000110715628e-05,6.309998570941389e-05,6.269998266361654e-05,6.10999995842576e-05,6.249998114071786e-05,6.590000702999532e-05,0.00011230001109652221,0.00012699997751042247,6.320001557469368e-05,0.00010979999206028879,6.850002682767808e-05,6.309998570941389e-05,6.189997657202184e-05,6.17999758105725e-05,6.019999273121357e-05,7.6299998909235e-05,5.8900011936202645e-05,5.8600009651854634e-05,5.9699988923966885e-05,5.679999594576657e-05,6.289998418651521e-05,5.609999061562121e-05,5.5800017435103655e-05,7.579999510198832e-05,5.910001345910132e-05,5.750000127591193e-05,5.7199998991563916e-05,5.570001667365432e-05,5.740000051446259e-05,5.660002352669835e-05,5.740000051446259e-05,5.599998985417187e-05,5.520001286640763e-05,5.5500015150755644e-05,5.549998604692519e-05,5.5199983762577176e-05,5.470000905916095e-05,5.440000677481294e-05,5.57999883312732e-05,5.560001591220498e-05,5.5899989092722535e-05,5.49999822396785e-05,5.5199983762577176e-05,5.600001895800233e-05,5.43000060133636e-05,5.4100004490464926e-05,5.4800009820610285e-05,5.4500007536262274e-05,5.319999763742089e-05,5.370000144466758e-05,5.390000296756625e-05,5.319999763742089e-05,5.299999611452222e-05,5.339999916031957e-05,5.569998756982386e-05,5.3800002206116915e-05,5.299999611452222e-05,6.799999391660094e-05,7.159999222494662e-05,0.00020879998919554055,9.670000872574747e-05,0.00012079998850822449,9.769998723641038e-05,6.230000872164965e-05,5.709999823011458e-05,5.4800009820610285e-05,5.5100012104958296e-05,5.4500007536262274e-05,5.570001667365432e-05,5.500001134350896e-05,5.470000905916095e-05,5.57999883312732e-05,5.570001667365432e-05,5.3800002206116915e-05,5.43000060133636e-05,5.190001684240997e-05,5.219999002292752e-05,5.169998621568084e-05,5.220001912675798e-05,5.199998850002885e-05,5.0799979362636805e-05,5.129998316988349e-05,5.139998393133283e-05,5.189998773857951e-05,5.119998240843415e-05,5.099998088553548e-05,4.990000161342323e-05,5.01000031363219e-05,5.120001151226461e-05,5.0700007705017924e-05,0.00038520002271980047,0.0001196000084746629,6.459999713115394e-05,6.180000491440296e-05,6.140000186860561e-05,5.949998740106821e-05,5.669999518431723e-05,6.359998951666057e-05,5.7199998991563916e-05,5.600001895800233e-05,5.520001286640763e-05,5.57999883312732e-05,5.440000677481294e-05,5.7100027333945036e-05,5.4899981478229165e-05,5.429997690953314e-05,5.43000060133636e-05,5.529998452402651e-05,5.399997462518513e-05,5.3800002206116915e-05,5.420000525191426e-05,5.329999839887023e-05,5.440000677481294e-05,5.299999611452222e-05,5.3499999921768904e-05,5.289999535307288e-05,5.329999839887023e-05,5.729999975301325e-05,5.4800009820610285e-05,5.329999839887023e-05,5.360000068321824e-05,5.360000068321824e-05,5.2499992307275534e-05,5.4100004490464926e-05,5.289999535307288e-05,5.339999916031957e-05,5.199998850002885e-05,5.299999611452222e-05,5.259999306872487e-05,5.2700022934004664e-05,5.259999306872487e-05,5.310002597980201e-05,5.269999383017421e-05,5.250002141110599e-05,5.370000144466758e-05,5.299999611452222e-05,9.9799974123016e-05,5.329999839887023e-05,5.23999915458262e-05,5.360000068321824e-05,6.0999998822808266e-05,5.4800009820610285e-05,5.5500015150755644e-05,5.390000296756625e-05,5.4100004490464926e-05,5.299999611452222e-05,6.269998266361654e-05,5.409997538663447e-05,5.639999289996922e-05,5.269999383017421e-05,5.289999535307288e-05,5.3800002206116915e-05,8.190001244656742e-05,5.2400020649656653e-05,5.440000677481294e-05,5.259999306872487e-05,5.2799994591623545e-05,5.190001684240997e-05,5.190001684240997e-05,5.2099989261478186e-05,5.23999915458262e-05,5.190001684240997e-05,5.1300012273713946e-05,5.2099989261478186e-05,5.2799994591623545e-05,6.680001388303936e-05,7.039998308755457e-05,6.990000838413835e-05,6.150000263005495e-05,9.390001650899649e-05,0.0016100000066217035,0.00023490001331083477,8.079997496679425e-05,6.909997318871319e-05,6.089999806135893e-05,7.069998537190259e-05,5.6500022765249014e-05,0.00010219999239780009,5.470000905916095e-05,5.780000356025994e-05,5.409997538663447e-05,5.509998300112784e-05,6.979997851885855e-05,5.390000296756625e-05,5.840000812895596e-05,5.2700022934004664e-05,5.1799986977130175e-05,5.23999915458262e-05,5.160001455806196e-05,5.180001608096063e-05],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=0.055850ms, Polars=0.054100ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('d08f24aa-df98-4a49-b202-d96b6e94d070');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nSelecting Columns from a File Already in Memory\n:::\n:::\n\n\n::: {.callout-note}\n\nWhile Polars showed a significant speed advantage for tasks involving pre-read files, both libraries perform similarly when the files are already in memory.\n:::\n\n# Filtering Rows\n\nNow, let's explore the scenario where we filter our dataset based on one or more column values \n\n## Based on one condition\n\nFor our simple scenario, we'll be narrowing down our focus to filter data based on individuals with the name \"David\".\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (df_pandas.query(\"name=='David'\")),\n    \"Polars\": lambda: (df_polars.lazy().filter((pl.col(\"name\") == \"David\")).collect()),\n}\nfilter_row_one_condition = run_test(test_dict, \"Filter (simple)\")\n```\n\n::: {#fig-fig5 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"c85e2906-88f4-4a62-9e5b-314b35d1807b\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"c85e2906-88f4-4a62-9e5b-314b35d1807b\")) {                    Plotly.newPlot(                        \"c85e2906-88f4-4a62-9e5b-314b35d1807b\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.008174499991582707,0.006911600008606911,0.003911000007065013,0.0029027999844402075,0.0047158999950625,0.005927399994106963,0.006357200007187203,0.006764200021279976,0.0057302000059280545,0.005630300001939759,0.006161700002849102,0.0065261999843642116,0.006910800002515316,0.006171599990921095,0.005582600017078221,0.006263700022827834,0.005700500012608245,0.005568299995502457,0.005997300002491102,0.005916699999943376,0.007437399995978922,0.006909100018674508,0.00590119999833405,0.005484199995407835,0.005539600009797141,0.005803600011859089,0.004831199999898672,0.006091999995987862,0.005659199989167973,0.005571299989242107,0.0063461000099778175,0.005775099998572841,0.004951300012180582,0.006075300014344975,0.005816299992147833,0.005244600004516542,0.0055401999852620065,0.005933999986154959,0.004865499999141321,0.0057963000144809484,0.005690699996193871,0.004935900011332706,0.005882400000700727,0.0056603999983053654,0.005700800014892593,0.00569969997741282,0.007411099999444559,0.006726599996909499,0.00551739998627454,0.008055300015257671,0.005814700009068474,0.004831799975363538,0.004324100009398535,0.005574399983743206,0.005946399993263185,0.005073700012871996,0.004809699981706217,0.00580789998639375,0.0056093999883159995,0.005571299989242107,0.005762999993748963,0.00564779998967424,0.005652499996358529,0.00568050000583753,0.00617240002611652,0.0057567000039853156,0.005437999992864206,0.006534399988595396,0.0057972000213339925,0.005505299981450662,0.00783909999881871,0.007411999977193773,0.00983930000802502,0.008300199988298118,0.008639399980893359,0.007244800013722852,0.006143399979919195,0.00557369997841306,0.005642900010570884,0.005781499989097938,0.005521200015209615,0.005407800024840981,0.005571999994572252,0.005593799985945225,0.005490000010468066,0.005628800019621849,0.005638399976305664,0.005587999999988824,0.005677300010574982,0.006262499984586611,0.005515900003956631,0.005334400018909946,0.005715800012694672,0.005240200000116602,0.006059300008928403,0.005608000006759539,0.005561500001931563,0.005714300001272932,0.005551699985517189,0.00523889999021776,0.003330400009872392,0.0016392999968957156,0.001340399991022423,0.0011697000009007752,0.0015378999814856797,0.001306400023167953,0.0011980999843217432,0.0017170000064652413,0.0012292999890632927,0.001073999999789521,0.0012516000133473426,0.0010122999956365675,0.0019407999934628606,0.0013119000068400055,0.0012431000068318099,0.0012620999768842012,0.001162699976703152,0.0010286000033374876,0.0013152000028640032,0.0015128999948501587,0.0015079000149853528,0.0011021000100299716,0.0016795999836176634,0.0014672999968752265,0.001493899995693937,0.0016792999813333154,0.0015091999957803637,0.0014401999942492694,0.0016412999830208719,0.0013066999963484704,0.0015309000154957175,0.0013485999952536076,0.0015410000050906092,0.0012170000118203461,0.0013821999891661108,0.0015608999819960445,0.0015459999849554151,0.0014615000109188259,0.0015360999968834221,0.001514800009317696,0.001360399997793138,0.0012379999971017241,0.0012033999955747277,0.0016956999897956848,0.0015056999982334673,0.0015883000160101801,0.0013117999769747257,0.0014538000104948878,0.0015554999990854412,0.0014297000016085804,0.0015010000206530094,0.0013761000009253621,0.001708600000711158,0.0011539999977685511,0.0014940999972168356,0.0014344000082928687,0.0013915000017732382,0.001820999983465299,0.001564300007885322,0.001240199984749779,0.0015401999989990145,0.0012313000042922795,0.0017362000071443617,0.0015412000066135079,0.0014965000154916197,0.001480600010836497,0.0017058999801520258,0.001594500005012378,0.001555399998323992,0.002084200008539483,0.0012709000147879124,0.0016712999786250293,0.0016109000134747475,0.0012080000014975667,0.0015033000090625137,0.0021915000106673688,0.001396900013787672,0.001861800003098324,0.0016325999749824405,0.001492900017183274,0.0017685999919194728,0.0015638000040780753,0.0016362000023946166,0.0017402000084985048,0.0015363000275101513,0.0011946000158786774,0.0012168999819550663,0.0013981999945826828,0.0017444000113755465,0.0012283999822102487,0.001741899992339313,0.0014358000189531595,0.0015476999979000539,0.0017634000105317682,0.0013199000095482916,0.0014350000128615648,0.0013208000164013356,0.0014387999835889786,0.0014626999909523875,0.0013608000008389354],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=5.700100ms, Polars=1.493400ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('c85e2906-88f4-4a62-9e5b-314b35d1807b');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nFiltering Rows Based on One Condition\n:::\n:::\n\n\n## Based on multiple conditions\n\nNow, for a more intricate challenge, we're going to dive into querying the data to extract individuals who meet specific criteria: those named David, born after 1980, residing in a city other than London, married, and with three children.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (\n        df_pandas.query(\n            \"name=='David' and born>1980 and city != 'London' or is_married == True and children >= 3\"\n        )\n    ),\n    \"Polars\": lambda: (\n        df_polars.lazy()\n        .filter(\n            (pl.col(\"name\") == \"David\")\n            & (pl.col(\"born\") > 1980)\n            & (pl.col(\"city\") != \"London\")\n            | (pl.col(\"is_married\") == True) & (pl.col(\"children\") >= 3)\n        )\n        .collect()\n    ),\n}\nfilter_row_multiple_condition = run_test(test_dict, \"Filter (complex)\")\n```\n\n::: {#fig-fig6 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"ff6ad106-c1f6-4b20-8edc-7ed67f42f4f8\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"ff6ad106-c1f6-4b20-8edc-7ed67f42f4f8\")) {                    Plotly.newPlot(                        \"ff6ad106-c1f6-4b20-8edc-7ed67f42f4f8\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.015174899977864698,0.013140800001565367,0.0129507000092417,0.011874200019519776,0.013337899988982826,0.012304200005019084,0.013022900006035343,0.012205900013213977,0.012581199989654124,0.012648099975194782,0.012465000007068738,0.011631399975158274,0.015339999983552843,0.013185099989641458,0.012088300019968301,0.013117199996486306,0.011933300003875047,0.01366920000873506,0.011860700004035607,0.012171899987151846,0.01531839999370277,0.011715499975252897,0.011744999996153638,0.012027199991280213,0.011635700007900596,0.01231960000586696,0.012121200008550659,0.01207360002445057,0.011704100004862994,0.011623800004599616,0.012162300001364201,0.011731200007488951,0.011726400000043213,0.011553899996215478,0.012084999994840473,0.011796000006143004,0.011611800000537187,0.011432900006184354,0.0112379000056535,0.011650000000372529,0.011991000006673858,0.011637799994787201,0.011472399986814708,0.011373999994248152,0.011654600006295368,0.011349799984600395,0.013564399996539578,0.011614999995799735,0.011427999997977167,0.012517900002421811,0.01157729999977164,0.011961400014115497,0.0121936000068672,0.011649399995803833,0.011598599987337366,0.011728699988452718,0.011592300026677549,0.012249699997482821,0.013260600011562929,0.011817099992185831,0.013826699985656887,0.012497799994889647,0.01265140000032261,0.012488999986089766,0.013045700005022809,0.012313000013818964,0.012736299977404997,0.013044399995123968,0.012816900009056553,0.01221440001972951,0.012005299999145791,0.01197439999668859,0.012133600015658885,0.012280700000701472,0.011971600004471838,0.011936700000660494,0.012707200017757714,0.012876299995696172,0.012132700008805841,0.01187350001418963,0.01246920000994578,0.011993299995083362,0.011864500003866851,0.012125200009904802,0.012133600015658885,0.01228550000814721,0.011576099990634248,0.0123015999852214,0.011930200009373948,0.011803800007328391,0.011899500008439645,0.01203070001793094,0.012082899978850037,0.011637299990979955,0.013673600013135001,0.012796800001524389,0.016279600007692352,0.01847260000067763,0.01738639999530278,0.016091199999209493,0.0028636000060942024,0.0018653000006452203,0.0023893000034149736,0.002225799980806187,0.0021031000069342554,0.0019961999787483364,0.0019952000002376735,0.0017804999952204525,0.0021932000236120075,0.001912999985506758,0.0016860000032465905,0.0017974000074900687,0.002338600024813786,0.0021229999838396907,0.0022713000071235,0.0020726000075228512,0.002122499980032444,0.0020671999955084175,0.0018005000019911677,0.002046300010988489,0.002184299984946847,0.0018988999945577234,0.0022551000001840293,0.0019617000070866197,0.0019312000076752156,0.001893200009362772,0.0018572999979369342,0.0020825999963562936,0.002283999987412244,0.0021484000026248395,0.0018897000118158758,0.0022317999973893166,0.0021146000071894377,0.0020607000042218715,0.0017746000085026026,0.00225060002412647,0.0020967000164091587,0.002281499997479841,0.0023705000057816505,0.002005299989832565,0.0022828000073786825,0.0017681999888736755,0.0021511999948415905,0.0019289999909233302,0.0023813000007066876,0.0015601999766658992,0.0019071999995503575,0.0022207000001799315,0.002076999982818961,0.0017792999860830605,0.00211569998646155,0.0019623999833129346,0.0028298000106588006,0.0020589999912772328,0.0017308999958913773,0.0024717999913264066,0.0019068999972660094,0.0018455999961588532,0.0018530999950598925,0.0018421999993734062,0.002143699995940551,0.001954499981366098,0.001938700006576255,0.0020382999791763723,0.0016867000085767359,0.0023012000019662082,0.0015991000109352171,0.0021065000037197024,0.0015684999816585332,0.002148500003386289,0.001812399976188317,0.0016574999899603426,0.00201349999406375,0.0018214999872725457,0.0017197999986819923,0.0014616000116802752,0.001952599996002391,0.0019715999951586127,0.0019850000098813325,0.0015993000124581158,0.0018705999827943742,0.0018069999932777137,0.0015994000132195652,0.001889200008008629,0.0015453000087291002,0.0021351999894250184,0.00221350000356324,0.0017511000041849911,0.0019040000042878091,0.0016165999986696988,0.0018555999849922955,0.001872299995739013,0.0017593000084161758,0.0016459999897051603,0.0019637000223156065,0.0017537999956402928,0.0019088999833911657,0.0017144999874290079,0.0016038999892771244,0.002217700006440282],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=12.104750ms, Polars=1.958100ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('ff6ad106-c1f6-4b20-8edc-7ed67f42f4f8');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nFiltering Rows Based on Multiple Condition\n:::\n:::\n\n\n::: {.callout-note}\n\nBoth libraries tackled this challenge quite well, yet Pandas struggled to keep pace with Polars. It's intriguing to observe that while Pandas required nearly twice the time for the more intricate task, Polars managed to complete it in almost the same amount of time. Parallelization in action.\n\n:::\n\n# Performing operations on columns\n\nNow, let's roll up our sleeves and dive into performing some operations on the columns.\n\n## Single operation\n\nAs a single operation, we'll simply calculate the century in which these individuals were born.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (df_pandas.assign(born=lambda df: df.born.div(100).round())),\n    \"Polars\": lambda: (\n        df_polars.lazy().with_columns((pl.col(\"born\") / 100).round()).collect()\n    ),\n}\noperate_one_column = run_test(test_dict, \"Operate (one column)\")\n```\n\n::: {#fig-fig7 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"505bf70b-f929-4015-8cdd-532019f6d68b\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"505bf70b-f929-4015-8cdd-532019f6d68b\")) {                    Plotly.newPlot(                        \"505bf70b-f929-4015-8cdd-532019f6d68b\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.003226800006814301,0.0027882000140380114,0.0022684999858029187,0.002315899997483939,0.0028577999910339713,0.0026002000086009502,0.002374600007897243,0.0020491000032052398,0.002077599987387657,0.0021610999829135835,0.0019302000000607222,0.001944899995578453,0.0021826000011060387,0.0019086000102106482,0.0018896999827120453,0.0016300999850500375,0.0019010000105481595,0.001993400015635416,0.001942100003361702,0.0021464000164996833,0.002212499995948747,0.0019617999787442386,0.001989899988984689,0.001834000024246052,0.00235719999182038,0.002148800005670637,0.001898199989227578,0.001884299999801442,0.0021659999911207706,0.0019927000103052706,0.001896300003863871,0.0018816000083461404,0.0017510999750811607,0.0023021000088192523,0.0018922000017482787,0.0019717999966815114,0.00357359999907203,0.0035183999862056226,0.004026500013424084,0.003993499994976446,0.0034502000198699534,0.0034642999817151576,0.003420099994400516,0.00398999999742955,0.003983300004620105,0.00358099999721162,0.003525200008880347,0.0035038999922107905,0.003673200000775978,0.003868200001306832,0.0034493000130169094,0.0034010999952442944,0.003931799990823492,0.003741199994692579,0.0034448000078555197,0.003320999996503815,0.0034657999931368977,0.003984099981607869,0.0037346999743022025,0.0035490999871399254,0.003266299987444654,0.0035137000086251646,0.003634699998656288,0.0035309999948367476,0.0034018000005744398,0.0033119999861810356,0.003936799999792129,0.0037367000186350197,0.003268600004957989,0.003640200011432171,0.0033186000073328614,0.0035229999921284616,0.003689800010761246,0.0033349000150337815,0.003470800002105534,0.0036829000164289027,0.0036829999880865216,0.0033990999800153077,0.0034058999735862017,0.003756899997824803,0.0038302000029943883,0.003910200000973418,0.003280900011304766,0.002068600006168708,0.0020944999996572733,0.0019762000010814518,0.0020938999950885773,0.002401400008238852,0.0019068999972660094,0.0018791999900713563,0.0019273999787401408,0.0022017000010237098,0.001866400009021163,0.0018653000006452203,0.0014602000010199845,0.001880299998447299,0.001985800015972927,0.0019228000019211322,0.0018807000014930964,0.0018930000078398734,0.0015131000254768878,0.000957000011112541,0.0010228999890387058,0.0007766000053379685,0.0007094999891705811,0.0005763999943155795,0.0007710000209044665,0.0008166999905370176,0.0009124000207521021,0.0011875999916810542,0.0010648000170476735,0.0010757000127341598,0.0010819000017363578,0.0010769999935291708,0.001090999983716756,0.0012332999904174358,0.0010445999796502292,0.0010442000057082623,0.001043500000378117,0.0010147999855689704,0.001038299989886582,0.0009381999843753874,0.0009834999800659716,0.0010978999780490994,0.0010000000183936208,0.0009710000013001263,0.0010559000074863434,0.0010540999937802553,0.0010698999976739287,0.0010491999855730683,0.0010235999943688512,0.0009612999856472015,0.00106229999801144,0.0010643000132404268,0.0010492000146768987,0.0010495000169612467,0.001081200025510043,0.0009569000103510916,0.0010842000192496926,0.0008856999920681119,0.0009777999948710203,0.0010218000097665936,0.0011086000013165176,0.0007313000096473843,0.0007545000116806477,0.0007055999885778874,0.0006901000160723925,0.0006833999941591173,0.0007583000115118921,0.0009301000100094825,0.00100299998302944,0.0010560999799054116,0.0010461999918334186,0.0010408000089228153,0.0010445999796502292,0.0009653999877627939,0.002570900018326938,0.001207799999974668,0.0012594999861903489,0.0009920000156853348,0.000891200004843995,0.0011033000191673636,0.0012430000060703605,0.0009242999949492514,0.0010488000116311014,0.0010998000216204673,0.0011322999780531973,0.001068499987013638,0.000982600002316758,0.0010423999920021743,0.0008665999921504408,0.0009184000082314014,0.000953600014327094,0.0009655999892856926,0.0009450000070501119,0.0009151000122074038,0.0010362000029999763,0.0010098000057041645,0.0011443000112194568,0.0011150999926030636,0.001125699986005202,0.0010624999995343387,0.0010808999941218644,0.0012780000106431544,0.0011024000123143196,0.0010813999979291111,0.0010934000019915402,0.0009743999980855733,0.0011283000058028847,0.001057999994372949,0.0011054999777115881,0.0012310999736655504,0.0011359000054653734,0.001023400021949783,0.0012222999939695,0.0010165000276174396,0.001039499999023974,0.0010127999994438142,0.0010887999960687011,0.0011070000182371587],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=2.694200ms, Polars=1.044400ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('505bf70b-f929-4015-8cdd-532019f6d68b');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nPerforming a Singme Operation on a Column\n:::\n:::\n\n\n## Multiple operations\n\nLet's also explore what happens when performing multiple operations on the columns. We'll mix things up with some string operations, mapping, and math calculations to see how these libraries handle it!\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (\n        df_pandas.assign(\n            born=lambda df: df.born.div(100).round(),\n            name=lambda df: df.name.str.lower(),\n            city=lambda df: df.city.str.upper(),\n            zip_code=lambda df: df.zip_code.mul(2),\n            income=lambda df: df.income.div(10).astype(\"str\"),\n            is_married=lambda df: df.is_married.map({False: 0, True: 1}),\n            children=lambda df: df.children.astype(\"bool\"),\n            car=lambda df: df.car.str[0],\n        )\n    ),\n    \"Polars\": lambda: (\n        df_polars.lazy()\n        .with_columns(\n            [\n                (pl.col(\"born\") / 100).round(),\n                pl.col(\"name\").str.to_lowercase(),\n                pl.col(\"city\").str.to_uppercase(),\n                pl.col(\"zip_code\") * 2,\n                (pl.col(\"income\") / 10).cast(pl.Utf8),\n                pl.col(\"is_married\").map_dict({False: 0, True: 1}),\n                pl.col(\"children\").cast(pl.Boolean),\n                pl.col(\"car\").str.slice(0, length=1),\n            ]\n        )\n        .collect()\n    ),\n}\noperate_multiple_column = run_test(test_dict, \"Operate (more columns)\")\n```\n\n::: {#fig-fig8 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"6badb66e-6cab-4e20-bde6-7d13c705a114\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"6badb66e-6cab-4e20-bde6-7d13c705a114\")) {                    Plotly.newPlot(                        \"6badb66e-6cab-4e20-bde6-7d13c705a114\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.04490599999553524,0.04033230000641197,0.038815900014014915,0.03698840001015924,0.04159860001527704,0.03997670000535436,0.036076600023079664,0.03605789999710396,0.03683070000261068,0.0360054999764543,0.03861650000908412,0.038704800012055784,0.03715249997912906,0.03817310000886209,0.03712439999799244,0.03734780001104809,0.036045299988472834,0.03553480000118725,0.03640559999621473,0.03527849999954924,0.037766800000099465,0.036946200008969754,0.0370610999816563,0.037460199993802235,0.041355399996973574,0.03796190000139177,0.03626870000152849,0.03685469998163171,0.036537200008751824,0.035892799991415814,0.03879730001790449,0.0387985999986995,0.03742520001833327,0.037750499992398545,0.03811379999388009,0.036663000006228685,0.03648559999419376,0.035986100003356114,0.03571250001550652,0.035285199992358685,0.03571009999723174,0.03516170001239516,0.0368130000133533,0.036526800016872585,0.03542999998899177,0.03515209999750368,0.03631159997894429,0.03588489998946898,0.03523540002061054,0.03569200000492856,0.03498060000129044,0.03488399999332614,0.034791600017342716,0.035705899994354695,0.034896900004241616,0.030028200009837747,0.03721169999334961,0.0364871000056155,0.039608399994904175,0.03631120000500232,0.037459999992279336,0.03811309998854995,0.03481520002242178,0.037009899999247864,0.03702869999688119,0.0365892999980133,0.0358295000041835,0.035904499993193895,0.035083599999779835,0.034834799997042865,0.04006989998742938,0.03505639999639243,0.03538919999846257,0.03628010000102222,0.03517730001476593,0.03598200000124052,0.0355658000044059,0.034772599989082664,0.03499230000306852,0.035173999989638105,0.035132399993017316,0.03479099998367019,0.03515859998879023,0.02988259997800924,0.03546849999111146,0.03788419999182224,0.03896760000498034,0.03532870000344701,0.03500540001550689,0.03516450000461191,0.03451440000208095,0.03544169999076985,0.03509019999182783,0.03562680000322871,0.03501479999977164,0.03278149999096058,0.03187949999119155,0.03521950001595542,0.03487850000965409,0.03531750000547618,0.005587899999227375,0.0029440999787766486,0.002965500025311485,0.003174599987687543,0.002817400003550574,0.002605799993034452,0.003170200012391433,0.002668200002517551,0.0027322999958414584,0.003706400020746514,0.0029396000027190894,0.003066500008571893,0.0029510999738704413,0.0029280000017024577,0.002857300016330555,0.0032341000041924417,0.0035404000082053244,0.0030981999880168587,0.0028879000165034086,0.0035133000055793673,0.0048217000148724765,0.002869200019631535,0.002858599997125566,0.0030756999913137406,0.0030229000258259475,0.002801399998134002,0.003196000005118549,0.003194199991412461,0.0031138999911490828,0.002949399990029633,0.0032890000147745013,0.002865000016754493,0.002635500015458092,0.003200000006472692,0.002674699993804097,0.0029282000032253563,0.0029326000076252967,0.002953200018964708,0.002966500003822148,0.002844100003130734,0.002385100000537932,0.0029821000061929226,0.002902200008975342,0.0029002999945078045,0.002935899974545464,0.0028999999922234565,0.0027648000104818493,0.0036253999860491604,0.00264759999117814,0.0030029999907128513,0.002684199978830293,0.0027453999791759998,0.0028165999974589795,0.0025300999986939132,0.002724199992371723,0.0026526000001467764,0.0033091999939642847,0.002513000014005229,0.002606799971545115,0.0026572999777272344,0.0025674999924376607,0.0030063000158406794,0.0025371000228915364,0.0032691000087652355,0.002519500005291775,0.0030006000015418977,0.0024056999827735126,0.002952499984530732,0.002881899999920279,0.0026698000147007406,0.0026919000083580613,0.002610900002764538,0.003456000005826354,0.002764499979093671,0.0029346999945119023,0.0029233999957796186,0.002676799980690703,0.003187099995557219,0.00295580000965856,0.0029724000196438283,0.002900199993746355,0.002848700009053573,0.0025033999991137534,0.003026299993507564,0.0029026000120211393,0.002622099971631542,0.002660199999809265,0.0026510999887250364,0.0024902999866753817,0.002654800016898662,0.002720799995586276,0.003006500017363578,0.0027202999917790294,0.002723899990087375,0.002709699998376891,0.004649799986509606,0.0033173999981954694,0.0027741999947465956,0.0024802999978419393,0.0022715000086463988],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=35.995800ms, Polars=2.900100ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('6badb66e-6cab-4e20-bde6-7d13c705a114');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nPerfrming a Multiple Operation on Columns\n:::\n:::\n\n\n::: {.callout-note}\n\nOnce again, Polars takes the lead. While both libraries required more time for the task involving multiple operations, Polars demonstrated superior scalability in this scenario.\n\n:::\n\n# Concatenating Data\n\nNow, let's turn our attention to concatenating two datasets. Let the merging begin!\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndf_pandas2 = df_pandas.copy(deep=True)\ndf_polars2 = df_polars.clone()\n```\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: pd.concat([df_pandas, df_pandas2], axis=0),\n    \"Polars\": lambda: pl.concat([df_polars, df_polars2], how=\"vertical\"),\n}\nconcatenate = run_test(test_dict, \"Concatenate\")\n```\n\n::: {#fig-fig9 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"ba422e8a-49c5-4b27-81ec-93c9ed8c64d2\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"ba422e8a-49c5-4b27-81ec-93c9ed8c64d2\")) {                    Plotly.newPlot(                        \"ba422e8a-49c5-4b27-81ec-93c9ed8c64d2\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.004171699983999133,0.003925199998775497,0.0037643999967258424,0.0030675999878440052,0.0030556000128854066,0.002939899975899607,0.0030758999928366393,0.0029912000172771513,0.002893299999414012,0.002890200004912913,0.00288759998511523,0.0029858000052627176,0.0028587999986484647,0.0029291000100784004,0.0028426999924704432,0.002852499979780987,0.0028514000005088747,0.0029405000095721334,0.002893700002459809,0.002815599989844486,0.002827899996191263,0.0028368000057525933,0.0029035000188741833,0.0029609999910462648,0.0028586999978870153,0.002836400002706796,0.002826800016919151,0.0029968000017106533,0.002947500004665926,0.0028389999934006482,0.0028390999941620976,0.0028707000019494444,0.002838399988831952,0.00329359999159351,0.0030549000075552613,0.0030120000010356307,0.0029885999974794686,0.002961500023957342,0.0032900999940466136,0.003020400006789714,0.0029316000000108033,0.002962200000183657,0.0028990999853704125,0.003516799974022433,0.003012400004081428,0.002927199995610863,0.002922500018030405,0.002879299980122596,0.0030078999989200383,0.0028603000100702047,0.0028430999955162406,0.0028291000053286552,0.002896799996960908,0.0028658999945037067,0.002892399992560968,0.0028319999983068556,0.002830200013704598,0.0028300000121816993,0.002892499993322417,0.0031300999980885535,0.002862299996195361,0.002840899978764355,0.0028258999809622765,0.002832499973010272,0.0030821999826002866,0.0029565000149887055,0.0028800999862141907,0.0028454999846871942,0.002840799978002906,0.00285210000583902,0.003699699998833239,0.0030187999946065247,0.0029141999839339405,0.002870600001187995,0.002858299994841218,0.0030781000095885247,0.002883400011342019,0.0028580000216607004,0.002848400006769225,0.002839799999492243,0.0033389000163879246,0.0032107000006362796,0.0029286000062711537,0.0028600999794434756,0.0028454999846871942,0.0028148999845143408,0.00304920002236031,0.0029390999989118427,0.002819700021063909,0.002811700018355623,0.0027974999975413084,0.0028080999909434468,0.003101300011621788,0.002811299986205995,0.002813099999912083,0.0028184000111650676,0.002809400000842288,0.0028039999888278544,0.002879800013033673,0.0028110000130254775,0.0022282000281848013,0.0008479999960400164,0.0006545000069309026,0.0007982999959494919,0.0005861999816261232,0.0006556999869644642,0.000582000007852912,0.0005842999962624162,0.0006203000084497035,0.0005818000063300133,0.000627999979769811,0.0006521999894175678,0.000835299986647442,0.0005802999949082732,0.0005666999786626548,0.0005708999815396965,0.0005437999789137393,0.0005368000129237771,0.0005270999972708523,0.0005385999975260347,0.0005221999890636653,0.0005336000176612288,0.000526099989656359,0.0005348999984562397,0.0005107999895699322,0.0005356000037863851,0.0005243000050541013,0.000528500007931143,0.0005270999972708523,0.000527299998793751,0.0005255999858491123,0.0005267999949865043,0.0005221000174060464,0.0005196999991312623,0.0005246000073384494,0.0005237000004854053,0.0005173000099603087,0.0005352000007405877,0.0005149999924469739,0.0005262999911792576,0.0008513999928254634,0.0007141000241972506,0.0006853000086266547,0.0006393000076059252,0.0006477000133600086,0.0007245000160764903,0.0005739000043831766,0.0005434000049717724,0.000538399996003136,0.0005368000129237771,0.0005357000045478344,0.0005467000009957701,0.0005282999773044139,0.0005392000020947307,0.000529799988726154,0.0005323000077623874,0.0005323000077623874,0.0005308999971020967,0.0005172999808564782,0.0005356000037863851,0.0005299999902490526,0.000538399996003136,0.0005289000109769404,0.0005320000054780394,0.000526699994225055,0.0005327999824658036,0.0005262999911792576,0.000598000013269484,0.0005573999951593578,0.000538399996003136,0.0005318000039551407,0.0005318000039551407,0.000526999996509403,0.0005984999879729003,0.0005363000091165304,0.0005375999899115413,0.0005239999736659229,0.0005390000005718321,0.0005259999888949096,0.000532599980942905,0.0005317000031936914,0.0005466000002343208,0.0005296999879647046,0.0005324999801814556,0.0005226000212132931,0.0005324999801814556,0.0005234999989625067,0.0005317000031936914,0.0005213000113144517,0.000534699996933341,0.000523299997439608,0.0005266000225674361,0.000525799987372011,0.0005372999876271933,0.0005208999791648239,0.0005310999986249954,0.0007259999983943999,0.0007181999972090125,0.0005572999943979084,0.0005466000002343208],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=2.885500ms, Polars=0.534800ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('ba422e8a-49c5-4b27-81ec-93c9ed8c64d2');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nConcatenating Dataframes\n:::\n:::\n\n\n::: {.callout-note}\n\nOnce more, Polars shines with a remarkable speed advantage.\n    \n:::\n\n# Aggregation\n\n## Simple \n\nTime to shift our attention to aggregation. First up, a simple task: let's calculate the mean income based on names. Then, for a bit more complexity, we'll dive into computing statistics involving the income, children, and car columns. Things are about to get interesting!\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (df_pandas.groupby(\"name\").income.mean()),\n    \"Polars\": lambda: (df_polars.lazy().groupby(\"name\").mean().collect()),\n}\naggregate_simple = run_test(test_dict, \"Aggregate (simple)\")\n```\n\n::: {#fig-fig10 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"b56c644d-8f4e-4a74-9174-0ba85d97b3b2\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"b56c644d-8f4e-4a74-9174-0ba85d97b3b2\")) {                    Plotly.newPlot(                        \"b56c644d-8f4e-4a74-9174-0ba85d97b3b2\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.007182599976658821,0.0055093000119086355,0.004895399993984029,0.005262299993773922,0.004916900012176484,0.00487900001462549,0.004727300023660064,0.005049800005508587,0.005364599986933172,0.004767200007336214,0.004773099994054064,0.004857299994910136,0.004618300008587539,0.004620399995474145,0.004585199989378452,0.004779600014444441,0.004660799982957542,0.004685899999458343,0.005094099993584678,0.004602500004693866,0.004620100022293627,0.0050338999717496336,0.004602899978635833,0.004644600005121902,0.005017399991629645,0.004926200024783611,0.004648500005714595,0.004531399987172335,0.004731599998194724,0.004619299987098202,0.0045461000117938966,0.004804199998034164,0.004590099997585639,0.004586499999277294,0.0046833000087644905,0.004690200003096834,0.004529700003331527,0.0045409000013023615,0.004882500012172386,0.0045559999998658895,0.004511299979640171,0.005062800017185509,0.0046326000010594726,0.004567299998598173,0.004646999994292855,0.00458109998726286,0.004558200016617775,0.004512699990300462,0.0048322000075131655,0.004625999979907647,0.00456780000240542,0.004719899996416643,0.004534500010777265,0.004539800022030249,0.004599599982611835,0.004863300011493266,0.004622500011464581,0.004538899986073375,0.00481959999888204,0.004666299995733425,0.00479890001588501,0.004965300002368167,0.005025099992053583,0.005105299991555512,0.005023799982154742,0.005009899992728606,0.004983799997717142,0.005039500014390796,0.004938500002026558,0.005154799990123138,0.0050506999832578,0.00502119999146089,0.005085000011604279,0.0049273000040557235,0.005195700010517612,0.004982699989341199,0.004973600007360801,0.005262999999104068,0.005013600020902231,0.004927500005578622,0.005084600008558482,0.004976600001100451,0.004975799995008856,0.005417799984570593,0.005233400006545708,0.0051509999902918935,0.005494199984241277,0.005086000019218773,0.0047701000003144145,0.004630300012649968,0.004816900007426739,0.0047085999976843596,0.0048442000115755945,0.004802299983566627,0.004704699997091666,0.004884299996774644,0.004869399999734014,0.004762800002936274,0.004730700020445511,0.005012400011764839,0.0032380999764427543,0.002190100000007078,0.0023769000254105777,0.001664000010350719,0.0020194000098854303,0.0022880999895278364,0.0019409999949857593,0.002538799977628514,0.0018478999845683575,0.0024307999992743134,0.0019075000018347055,0.001981700013857335,0.0017148000188171864,0.0022247000015340745,0.0024249000125564635,0.003252700000302866,0.0022607999853789806,0.002977799973450601,0.0021831000049132854,0.0019114000024273992,0.002060600003460422,0.0018059999856632203,0.0020604999735951424,0.0022601000091526657,0.0018331000173930079,0.0022538000193890184,0.0023166000028140843,0.0026981999981217086,0.0025403000181540847,0.0020942999981343746,0.004104799998458475,0.0019539000059012324,0.0020955999789293855,0.0019332999945618212,0.0017571000207681209,0.0017720000178087503,0.002209400001447648,0.002328800008399412,0.0024181000189855695,0.0016999999934341758,0.0019834999984595925,0.0017175999819301069,0.0023087000008672476,0.0020086000149603933,0.002252800011774525,0.0024886000028345734,0.0021769999875687063,0.0017712000117171556,0.0019675999938044697,0.0020832000009249896,0.0025357000122312456,0.00205650000134483,0.0026101999974343926,0.001724900008412078,0.0019730000058189034,0.0020726000075228512,0.0017629000067245215,0.0018567999941296875,0.0017339000187348574,0.0022554000024683774,0.00152009999146685,0.0024028999905567616,0.002718999981880188,0.0021265999821480364,0.0019050000119023025,0.002456299989717081,0.0020001000084448606,0.0024643999931868166,0.0022157999919727445,0.002438099996652454,0.002444499987177551,0.001823400001740083,0.0022265000152401626,0.001743700006045401,0.0019354000105522573,0.001803000021027401,0.0017712999833747745,0.0018256999901495874,0.002431800006888807,0.0016484000079799443,0.0016431999974884093,0.0017306999943684787,0.0015662999940104783,0.001713500008918345,0.0018271000008098781,0.0022425999923143536,0.0017631000082474202,0.002177700022002682,0.0017632999806664884,0.002291200013132766,0.002312500000698492,0.0020623999880626798,0.0020846000115852803,0.002087000000756234,0.0022461000189650804,0.001973599981283769,0.0021838999819010496,0.002345199987757951,0.0014777999895159155,0.0017220999870914966],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=4.810550ms, Polars=2.077900ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('b56c644d-8f4e-4a74-9174-0ba85d97b3b2');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nPerforming a simple aggregation\n:::\n:::\n\n\n## More complex\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (\n        df_pandas.groupby([\"name\", \"car\", \"is_married\"]).agg(\n            born_min=(\"born\", min),\n            born_max=(\"born\", max),\n            income_mean=(\"income\", np.mean),\n            income_median=(\"income\", np.median),\n            children_mean=(\"children\", np.mean),\n            car_count=(\"car\", \"count\"),\n        )\n    ),\n    \"Polars\": lambda: (\n        df_polars.lazy()\n        .groupby([\"name\", \"car\", \"is_married\"])\n        .agg(\n            [\n                pl.col(\"born\").min().alias(\"born_min\"),\n                pl.col(\"born\").max().alias(\"born_max\"),\n                pl.col(\"income\").mean().alias(\"income_mean\"),\n                pl.col(\"income\").median().alias(\"income_median\"),\n                pl.col(\"children\").mean().alias(\"children_mean\"),\n                pl.col(\"car\").count().alias(\"car_count\"),\n            ]\n        )\n        .collect()\n    ),\n}\naggregate_complex = run_test(test_dict, \"Aggregate (complex)\")\n```\n\n::: {#fig-fig11 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"f6b424f0-fd49-448f-9194-b3c64d3f0768\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f6b424f0-fd49-448f-9194-b3c64d3f0768\")) {                    Plotly.newPlot(                        \"f6b424f0-fd49-448f-9194-b3c64d3f0768\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.08742959998198785,0.06799060001503676,0.08018680001259781,0.07978810000349768,0.07933769997907802,0.07829360000323504,0.07879590001539327,0.07843059999868274,0.07848329999251291,0.07909260000451468,0.08630699999048375,0.08134880001307465,0.08768550000968389,0.08625220000976697,0.08057839999673888,0.07968230001279153,0.08173659999738447,0.08007260001613759,0.0790774000051897,0.07833799999207258,0.07870700000785291,0.07981190001009963,0.08064719999674708,0.08512630002223887,0.08232089999364689,0.07953509999788366,0.07927980000386015,0.0831051999994088,0.0801478999783285,0.08204749997821636,0.08324829998309724,0.08496569999260828,0.0837933000002522,0.08056820000638254,0.08031660001142882,0.08120030001737177,0.08075409999582916,0.08011040001292713,0.08109289998537861,0.0798091999895405,0.09438719999161549,0.09406200001831166,0.08393059999798425,0.07983899998362176,0.08029129999340512,0.08484039999893866,0.0869300999911502,0.0966072000155691,0.08904289998463355,0.08370920000015758,0.07929430002695881,0.07882230001268908,0.07880809999187477,0.07941119998577051,0.08524149999720976,0.0879854999948293,0.08560709998710081,0.08085619998746552,0.07901800001855008,0.08084730000700802,0.08041370002320036,0.081944100005785,0.08226090000243858,0.08070020002196543,0.08031040002242662,0.07968580001033843,0.07918610001797788,0.07884469997952692,0.1145853000052739,0.08654440002283081,0.08348810000461526,0.08331290000933222,0.0858668000146281,0.09133680001832545,0.08972560000256635,0.08967089999350719,0.0888039999990724,0.0830957000143826,0.09557810000842437,0.1364235000219196,0.10381030000280589,0.09317560002091341,0.0792203999881167,0.07869819999905303,0.07854900002712384,0.07810810001683421,0.07785109998076223,0.07852050001383759,0.08497509997687303,0.08234619998256676,0.08271980000426993,0.08079499998711981,0.0789589999767486,0.07882089997292496,0.08004760000039823,0.08107810001820326,0.07870179999736138,0.07876289999694563,0.07889949998934753,0.07831630000146106,0.0026129999896511436,0.0019610000017564744,0.002359600010095164,0.002159600000595674,0.0017348999972455204,0.0025720999983604997,0.002377700002398342,0.0020369999983813614,0.001806400017812848,0.0022179000079631805,0.0016158000216819346,0.002664800005732104,0.0024489999923389405,0.002777399990009144,0.0019204999844077975,0.002387299988185987,0.0018355000065639615,0.0019554999889805913,0.0020622000156436116,0.0023170999775175005,0.0025197999784722924,0.001923900010297075,0.0020647000055760145,0.002248800010420382,0.0022521999781019986,0.002411599998595193,0.0018837999959941953,0.0022813999967183918,0.0022502999927382916,0.0031037000007927418,0.003133299993351102,0.0020582999859470874,0.0018659000052139163,0.001621099974727258,0.0019622999825514853,0.0015336000069510192,0.0017260999884456396,0.0024173999845515937,0.0025637999933678657,0.0016216000076383352,0.001850700005888939,0.002287200011778623,0.002202600007876754,0.001497599994763732,0.002512100007152185,0.0018924000032711774,0.0020343000069260597,0.0018151999975088984,0.002383699989877641,0.001816099975258112,0.0019582000095397234,0.0018917999987024814,0.001498500001616776,0.0018731000018306077,0.0015813999925740063,0.0018453999946359545,0.0020730000105686486,0.001938400004291907,0.0017097999807447195,0.0018318000074941665,0.0016124999965541065,0.001801899983547628,0.0016007999947760254,0.00202829999034293,0.0016270999913103878,0.0016351999947801232,0.0016210000030696392,0.001597900001797825,0.0016722000145819038,0.0016099000058602542,0.0014931000187061727,0.00172309999470599,0.00181200000224635,0.0015718999784439802,0.0017072999908123165,0.0018466000037733465,0.0018457999976817518,0.0017462999967392534,0.0014375000027939677,0.0015316000208258629,0.001684500020928681,0.0017810999997891486,0.0015928999928291887,0.001698700012639165,0.002031399984844029,0.001404300011927262,0.001820999983465299,0.0015577999874949455,0.0016354999970644712,0.0013670000189449638,0.001821599988033995,0.0016128999995999038,0.0017591000068932772,0.0014928999880794436,0.0019423000048846006,0.0016596000059507787,0.0015503000176977366,0.001796900003682822,0.001593900000443682,0.001409899996360764],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=80.727150ms, Polars=1.840450ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('f6b424f0-fd49-448f-9194-b3c64d3f0768');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nPerforming a complex aggregation\n:::\n:::\n\n\n::: {.callout-note}\n\nWhile Pandas showcased noteworthy speed for the simple aggregation, the more intricate task exposed significant disparities between the two libraries. Polars took a commanding lead in this scenario, presenting a considerably faster performance compared to Pandas.\n:::\n\n# Whole workflow\n\nWe're going to tackle this in two versions. First, we'll use `pl.read_csv` for Polars, assessing the time it takes to complete the entire workflow on a DataFrame already in memory. Then, for the second version, we'll employ `pl.scan_csv` for Polars. This nifty function lets us lazily read data from a CSV file or multiple files using glob patterns.\n\nThe cool part? With `pl.scan_csv`, the query optimizer can push down predicates and projections to the scan level. This nifty move has the potential to cut down on memory overhead. Let's dive into both versions and see how they stack up!\n\n## Using `pl.read_csv`\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (\n        df_pandas.loc[:, lambda df: ~df.columns.isin([\"is_married\"])]\n        .query(\"name=='David' and born>1980 and city != 'London' and children >= 3\")\n        .assign(\n            born=lambda df: df.born.div(100).round(),\n            name=lambda df: df.name.str.lower(),\n            city=lambda df: df.city.str.upper(),\n            zip_code=lambda df: df.zip_code.mul(2),\n            income=lambda df: df.income.div(10),\n            children=lambda df: df.children.astype(\"bool\"),\n            car=lambda df: df.car.str[0],\n        )\n        .groupby(\n            [\n                \"name\",\n                \"car\",\n            ]\n        )\n        .agg(\n            born_min=(\"born\", min),\n            born_max=(\"born\", max),\n            income_mean=(\"income\", np.mean),\n            income_median=(\"income\", np.median),\n            children_mean=(\"children\", np.mean),\n            car_count=(\"car\", \"count\"),\n        )\n    ),\n    \"Polars\": lambda: (\n        df_polars.lazy()\n        .select(cs.all() - cs.ends_with(\"married\"))\n        .filter(\n            (pl.col(\"name\") == \"David\")\n            & (pl.col(\"born\") > 1980)\n            & (pl.col(\"city\") != \"London\")\n            & (pl.col(\"children\") >= 3)\n        )\n        .with_columns(\n            [\n                (pl.col(\"born\") / 100).round(),\n                pl.col(\"name\").str.to_lowercase(),\n                pl.col(\"city\").str.to_uppercase(),\n                pl.col(\"zip_code\") * 2,\n                (pl.col(\"income\") / 10),\n                pl.col(\"children\").cast(pl.Boolean),\n                pl.col(\"car\").str.slice(0, length=1),\n            ]\n        )\n        .groupby(\n            [\n                \"name\",\n                \"car\",\n            ]\n        )\n        .agg(\n            [\n                pl.col(\"born\").min().alias(\"born_min\"),\n                pl.col(\"born\").max().alias(\"born_max\"),\n                pl.col(\"income\").mean().alias(\"income_mean\"),\n                pl.col(\"income\").median().alias(\"income_median\"),\n                pl.col(\"children\").mean().alias(\"children_mean\"),\n                pl.col(\"car\").count().alias(\"car_count\"),\n            ]\n        )\n        .collect()\n    ),\n}\nwhole_workflow_read_csv = run_test(test_dict, \"Whole workflow\")\n```\n\n::: {#fig-fig12 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"d0da6cae-e840-4dae-96d4-8ac8da0e2b38\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"d0da6cae-e840-4dae-96d4-8ac8da0e2b38\")) {                    Plotly.newPlot(                        \"d0da6cae-e840-4dae-96d4-8ac8da0e2b38\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.039089900004910305,0.03657200001180172,0.03637830002116971,0.03551519999746233,0.03589659999124706,0.036946200008969754,0.037489600013941526,0.03701040000305511,0.0361585000064224,0.03626269998494536,0.03585960000054911,0.03725910000503063,0.03583090001484379,0.035815399984130636,0.036344599997391924,0.03513180001755245,0.0355719999934081,0.035858399991411716,0.03580280000460334,0.035298600007081404,0.0354351999994833,0.036279299994930625,0.03515089998836629,0.03534380000201054,0.035652499995194376,0.035193199990317225,0.03593680000631139,0.03612500001327135,0.03563299999223091,0.03581069997744635,0.03523959999438375,0.035477600002195686,0.0358352999901399,0.03830409998772666,0.03568169998470694,0.035186000022804365,0.035707200004253536,0.035144299996318296,0.03494710000813939,0.035208099987357855,0.03535160000319593,0.034910499991383404,0.03520579999894835,0.03489059998537414,0.03510519998962991,0.03531239999574609,0.03540910000447184,0.036488300014752895,0.0352423999866005,0.03555160001269542,0.035455700010061264,0.0356372999958694,0.0359343999880366,0.03545450000092387,0.036380200006533414,0.03542919998290017,0.03769060000195168,0.03643580002244562,0.03522040002280846,0.0351937000232283,0.03570249999756925,0.03827680001268163,0.03594110000994988,0.036164999997708946,0.03560770000331104,0.0352491999801714,0.035417000006418675,0.03554270000313409,0.035234600014518946,0.03595999997924082,0.035739899991312996,0.03499300000839867,0.035009699990041554,0.035168100002920255,0.03505919998860918,0.0359634000051301,0.0354698000010103,0.03595749998930842,0.034962000005180016,0.03657359999488108,0.03728010001941584,0.036136900016572326,0.03529450000496581,0.02096749999327585,0.011224399990169331,0.010828400001628324,0.010884899995289743,0.01091939999605529,0.010849899990716949,0.010846000019228086,0.01118909998331219,0.010671800002455711,0.01104079998913221,0.011365499987732619,0.0105831999971997,0.010910699988016859,0.010789199994178489,0.010681300016585737,0.010666199988918379,0.011613200011197478,0.003184100001817569,0.0014631999947596341,0.0021865000016987324,0.0015856999962124974,0.003337500005727634,0.0030112999957054853,0.0028756000101566315,0.002274900005431846,0.002687200001673773,0.0025569999997969717,0.002905699977418408,0.0031407000205945224,0.003210499999113381,0.0032377000025007874,0.0027125999913550913,0.0034638000070117414,0.0023942999832797796,0.0027916999824810773,0.0030898000113666058,0.0026900999946519732,0.002319899998838082,0.003479199978755787,0.0026726999785751104,0.002723899990087375,0.0032525999995414168,0.003200499981176108,0.0037139999913051724,0.003232000017305836,0.0035312999971210957,0.0031916000007186085,0.003044999990379438,0.003093900013482198,0.003037399990716949,0.0027316999912727624,0.0032207000185735524,0.003072999999858439,0.00420029999804683,0.002483899996150285,0.002710000000661239,0.002667599997948855,0.0027039000124204904,0.002714000002015382,0.002708499989239499,0.0028253999771550298,0.0020619000133592635,0.002559599990490824,0.0027200999902561307,0.0022915999870747328,0.0027395000215619802,0.002521999995224178,0.0025870999961625785,0.002628199988976121,0.0020832000009249896,0.0026766000082716346,0.0026323000201955438,0.0021655000164173543,0.002546600007917732,0.002778299996862188,0.002761300012934953,0.0034127999970223755,0.0029949999880045652,0.0025387000059708953,0.0028599000070244074,0.003324099991004914,0.0026532000047154725,0.002214100008131936,0.003232999995816499,0.002698600001167506,0.0027731000154744834,0.002596700011054054,0.002722000004723668,0.0027945000038016587,0.002617699996335432,0.0034456000139471143,0.0030248000111896545,0.0031629000150132924,0.0028568000125233084,0.002928700007032603,0.003246700012823567,0.003064099990297109,0.003208999987691641,0.002499299996998161,0.0030958999996073544,0.0026357999886386096,0.0033916999818757176,0.002531899983296171,0.002723500016145408,0.002739799994742498,0.00265060001402162,0.0028006999928038567,0.002825300005497411,0.0030197000014595687,0.0031447999936062843,0.002837099978933111,0.0023591000062879175,0.0026707999932114035,0.0022304000158328563,0.0026654000103008,0.0025519999908283353,0.0030541000014636666],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=35.462750ms, Polars=2.750550ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('d0da6cae-e840-4dae-96d4-8ac8da0e2b38');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nPerforming a representative workflow\n:::\n:::\n\n\n## Using `pl.scan_csv`\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ntest_dict = {\n    \"Pandas\": lambda: (\n        df_pandas.loc[:, lambda df: ~df.columns.isin([\"is_married\"])]\n        .query(\"name=='David' and born>1980 and city != 'London' and children >= 3\")\n        .assign(\n            born=lambda df: df.born.div(100).round(),\n            name=lambda df: df.name.str.lower(),\n            city=lambda df: df.city.str.upper(),\n            zip_code=lambda df: df.zip_code.mul(2),\n            income=lambda df: df.income.div(10),\n            children=lambda df: df.children.astype(\"bool\"),\n            car=lambda df: df.car.str[0],\n        )\n        .groupby(\n            [\n                \"name\",\n                \"car\",\n            ]\n        )\n        .agg(\n            born_min=(\"born\", min),\n            born_max=(\"born\", max),\n            income_mean=(\"income\", np.mean),\n            income_median=(\"income\", np.median),\n            children_mean=(\"children\", np.mean),\n            car_count=(\"car\", \"count\"),\n        )\n    ),\n    \"Polars\": lambda: (\n        pl.scan_csv(\"sample.csv\")\n        .select(cs.all() - cs.ends_with(\"married\"))\n        .filter(\n            (pl.col(\"name\") == \"David\")\n            & (pl.col(\"born\") > 1980)\n            & (pl.col(\"city\") != \"London\")\n            & (pl.col(\"children\") >= 3)\n        )\n        .with_columns(\n            [\n                (pl.col(\"born\") / 100).round(),\n                pl.col(\"name\").str.to_lowercase(),\n                pl.col(\"city\").str.to_uppercase(),\n                pl.col(\"zip_code\") * 2,\n                (pl.col(\"income\") / 10),\n                pl.col(\"children\").cast(pl.Boolean),\n                pl.col(\"car\").str.slice(0, length=1),\n            ]\n        )\n        .groupby(\n            [\n                \"name\",\n                \"car\",\n            ]\n        )\n        .agg(\n            [\n                pl.col(\"born\").min().alias(\"born_min\"),\n                pl.col(\"born\").max().alias(\"born_max\"),\n                pl.col(\"income\").mean().alias(\"income_mean\"),\n                pl.col(\"income\").median().alias(\"income_median\"),\n                pl.col(\"children\").mean().alias(\"children_mean\"),\n                pl.col(\"car\").count().alias(\"car_count\"),\n            ]\n        )\n        .collect()\n    ),\n}\nwhole_workflow_scan_csv = run_test(test_dict, \"Whole workflow (scan_csv)\")\n```\n\n::: {#fig-fig13 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"176a14cb-b818-48ad-9a80-2d12d09e5aba\" class=\"plotly-graph-div\" style=\"height:500px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"176a14cb-b818-48ad-9a80-2d12d09e5aba\")) {                    Plotly.newPlot(                        \"176a14cb-b818-48ad-9a80-2d12d09e5aba\",                        [{\"alignmentgroup\":\"True\",\"boxpoints\":\"all\",\"hovertemplate\":\"=%{x}\\u003cbr\\u003etime (sec)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#1F77B4\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Pandas\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\",\"Polars\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.023370200011413544,0.01234919999842532,0.011530599993420765,0.013682399992831051,0.020458899991353974,0.017322300001978874,0.018638100009411573,0.024057799979345873,0.016670300014084205,0.011114399996586144,0.011231399985263124,0.010697400022763759,0.0108126999984961,0.011039800010621548,0.011132500017993152,0.010918499989202246,0.011136700020870194,0.01133879998815246,0.011293699993984774,0.010773499991046265,0.011018400022294372,0.010740400000941008,0.010710400005336851,0.01114600000437349,0.010834099986823276,0.01092390000121668,0.011191300000064075,0.010925799986580387,0.011270899994997308,0.010690299997804686,0.010910899989539757,0.010847400000784546,0.010769499989692122,0.01093129999935627,0.010945599991828203,0.010723100014729425,0.010775300004752353,0.011340400000335649,0.011024100007489324,0.01062020001700148,0.011059699987526983,0.010795299982419237,0.010600200010230765,0.011514200014062226,0.01134749999619089,0.010690399998566136,0.010941100015770644,0.011043300008168444,0.011149600002681836,0.010637300001690164,0.010826600017026067,0.010828600003151223,0.01059640001039952,0.010917500010691583,0.011214800004381686,0.010721800004830584,0.011076299997512251,0.011932199995499104,0.011886100022820756,0.011640799988526851,0.011974799999734387,0.012646099989069626,0.012858700007200241,0.01128679999965243,0.010838399990461767,0.010892100021010265,0.01103490000241436,0.010638500010827556,0.011041699995985255,0.011025900021195412,0.01080389998969622,0.010832700005266815,0.010923599998932332,0.010640699998475611,0.010862700000870973,0.010788799991132692,0.010832600004505366,0.010748799977591261,0.011123699980089441,0.010807499988004565,0.010733500006608665,0.010803400014992803,0.010759900003904477,0.010652199998730794,0.010865499993087724,0.010669900017092004,0.010663699998985976,0.010930100019322708,0.011028300010366365,0.01086170002236031,0.010746999992989004,0.01078149999375455,0.010819500021170825,0.01059789999271743,0.010756900010164827,0.010794300003908575,0.01071210001828149,0.010790000000270084,0.011017600016202778,0.01073869998799637,0.007333599991397932,0.005560099991271272,0.004704699997091666,0.004448399995453656,0.0046842000156175345,0.0057551999925635755,0.006234700005734339,0.00627159999567084,0.006698999990476295,0.006608800002140924,0.0055299999949056655,0.005497399979503825,0.005608100007520989,0.005419200024334714,0.005360200011637062,0.004783200012752786,0.005981100024655461,0.005789000017102808,0.004928200010908768,0.005570699984673411,0.006613299978198484,0.006398199999239296,0.0059803999902214855,0.0046520999749191105,0.0053493000159505755,0.0058293000038247555,0.005063799995696172,0.005582499987212941,0.006172100023832172,0.005747700022766367,0.005010599998058751,0.005031800013966858,0.0057502999843563884,0.004737500014016405,0.004942300001857802,0.004469799983780831,0.0039539999852422625,0.0038945000269450247,0.0033712000004015863,0.006118399993283674,0.003420900000492111,0.004099299985682592,0.005427500000223517,0.003846700012218207,0.004473800014238805,0.00423439999576658,0.004169799998635426,0.0038376000011339784,0.0034869000082835555,0.004216900008032098,0.0036767999990843236,0.0033943000016734004,0.0034657999931368977,0.003987800009781495,0.003167499991832301,0.004092799994396046,0.003581199998734519,0.00502559999586083,0.004099999991012737,0.0045624999911524355,0.005048799997894093,0.004138299991609529,0.004664200008846819,0.004538300010608509,0.005523100000573322,0.005238300014752895,0.005101399990962818,0.0052866000041831285,0.0052927999931853265,0.004905399982817471,0.005245100008323789,0.005116099986480549,0.006080599996494129,0.005111400008900091,0.005293599999276921,0.004464399971766397,0.006403699982911348,0.005341899988707155,0.006228099984582514,0.005456100014271215,0.005025899998145178,0.005709499993827194,0.005968099983874708,0.005562300008023158,0.0067712000163737684,0.004949499998474494,0.005583699996350333,0.005133899976499379,0.00625979999313131,0.005869400018127635,0.006044599984306842,0.005708900018362328,0.005842500017024577,0.005666299985023215,0.005167200026335195,0.005959500005701557,0.005768600007286295,0.005906400008825585,0.006689700006972998,0.005270800000289455],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"time (sec)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Median Execution Times: \\u003cbr\\u003e\\u003csup\\u003ePandas=10.918000ms, Polars=5.278700ms\\u003c\\u002fsup\\u003e\"},\"boxmode\":\"group\",\"height\":500,\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('176a14cb-b818-48ad-9a80-2d12d09e5aba');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nPerforming a representative workflow (using `pl_scan_csv` for Polars)\n:::\n:::\n\n\nAs evident, the utilization of `scan_csv` increased the required time by about 3-4 times. However, even with this increase, Polars still manages to maintain a substantial advantage of around 5 times faster than the entire workflow executed using Pandas.\n\n::: {.callout-note}\n\nWhen we consider the entirety of the data processing pipeline, irrespective of the file reading approach, Polars emerges as the victor. It consistently exhibits a considerable speed advantage compared to Pandas.\n\n:::\n\n# Putting it all together\n\nTime to bring together all the things we've explored! Let's sum up what we've learned.\n\n::: {.cell .column-page execution_count=21}\n``` {.python .cell-code}\nsummary = pd.concat(\n    [\n        read_csv,\n        read_parquet,\n        # select_col_not_in_memory,\n        select_col_in_memory,\n        filter_row_one_condition,\n        filter_row_multiple_condition,\n        operate_one_column,\n        operate_multiple_column,\n        concatenate,\n        aggregate_simple,\n        aggregate_complex,\n        whole_workflow_read_csv,\n        # whole_workflow_scan_csv\n    ],\n    axis=1,\n)\n\nfig = (\n    summary.melt(var_name=\"experiment\", value_name=\"time_sec\")\n    .assign(\n        package=lambda df: df.experiment.str[-6:],\n        experiment=lambda df: df.experiment.str[:-7],\n    )\n    .groupby([\"experiment\", \"package\"])\n    .time_sec.mean()\n    .mul(1000)\n    .reset_index()\n    .pivot(columns=\"package\", values=\"time_sec\", index=\"experiment\")\n    .sort_values(\n        by=\"polars\",\n    )\n    .reset_index()\n    .pipe(\n        lambda df: px.bar(\n            df,\n            y=\"experiment\",\n            x=[\"pandas\", \"polars\"],\n            barmode=\"group\",\n            text_auto='.2s',\n            orientation=\"h\",\n            labels={\"value\": \"Average execution Time (msec)\", \"experiment\": \"\"},\n            title= f'<b>Speed Showdown in Data Workflow Operations</b> <br><sup><i>Pandas {pd.__version__} vs. Polars {pl.__version__}</i></sup>',\n            width=1000,\n            height=700,\n        )\n    )\n)\nfig.update_xaxes(tickangle=90)\nfig.update_layout(yaxis=dict(automargin=True), legend_title_text=\"Library\")\nfig.update_traces(textposition='outside')\n```\n\n::: {#fig-fig14 .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"d66aef5f-27ec-4585-a673-ffd0dd02bb63\" class=\"plotly-graph-div\" style=\"height:700px; width:1000px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"d66aef5f-27ec-4585-a673-ffd0dd02bb63\")) {                    Plotly.newPlot(                        \"d66aef5f-27ec-4585-a673-ffd0dd02bb63\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=pandas\\u003cbr\\u003eAverage execution Time (msec)=%{x}\\u003cbr\\u003e=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"pandas\",\"marker\":{\"color\":\"#1F77B4\",\"pattern\":{\"shape\":\"\"}},\"name\":\"pandas\",\"offsetgroup\":\"pandas\",\"orientation\":\"h\",\"showlegend\":true,\"textposition\":\"outside\",\"texttemplate\":\"%{x:.2s}\",\"x\":[0.06919999897945672,2.9615819989703596,2.787558999261819,5.903255999728572,83.29160200170008,12.465692000696436,4.860617000376806,31.70419100002619,36.355940000212286,8.479547000897583,10.706049001601059],\"xaxis\":\"x\",\"y\":[\"Select column\",\"Concatenate\",\"Operate (one column)\",\"Filter (simple)\",\"Aggregate (complex)\",\"Filter (complex)\",\"Aggregate (simple)\",\"Whole workflow\",\"Operate (more columns)\",\"Read csv\",\"Read parquet\"],\"yaxis\":\"y\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=polars\\u003cbr\\u003eAverage execution Time (msec)=%{x}\\u003cbr\\u003e=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"polars\",\"marker\":{\"color\":\"#FF7F0E\",\"pattern\":{\"shape\":\"\"}},\"name\":\"polars\",\"offsetgroup\":\"polars\",\"orientation\":\"h\",\"showlegend\":true,\"textposition\":\"outside\",\"texttemplate\":\"%{x:.2s}\",\"x\":[0.07868899992899969,0.5822199981776066,1.034117000817787,1.4873820001957938,1.9249679989297874,1.9800569984363392,2.1202760003507137,2.818865999870468,2.944839999836404,3.0229170006350614,4.2176679987460375],\"xaxis\":\"x\",\"y\":[\"Select column\",\"Concatenate\",\"Operate (one column)\",\"Filter (simple)\",\"Aggregate (complex)\",\"Filter (complex)\",\"Aggregate (simple)\",\"Whole workflow\",\"Operate (more columns)\",\"Read csv\",\"Read parquet\"],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"scatter\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter\"}],\"scattergl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergl\"}],\"scatter3d\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatter3d\"}],\"scatterpolar\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scatterternary\"}],\"scattergeo\":[{\"line\":{\"width\":3},\"marker\":{\"size\":9},\"type\":\"scattergeo\"}],\"table\":[{\"cells\":{\"height\":30},\"header\":{\"height\":36},\"type\":\"table\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"xaxis\":{\"title\":{\"standoff\":15}},\"yaxis\":{\"title\":{\"standoff\":15}},\"font\":{\"size\":18}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Average execution Time (msec)\"},\"tickangle\":90},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"},\"automargin\":true},\"legend\":{\"title\":{\"text\":\"Library\"},\"tracegroupgap\":0},\"title\":{\"text\":\"\\u003cb\\u003eSpeed Showdown in Data Workflow Operations\\u003c\\u002fb\\u003e \\u003cbr\\u003e\\u003csup\\u003e\\u003ci\\u003ePandas 2.0.3 vs. Polars 0.18.11\\u003c\\u002fi\\u003e\\u003c\\u002fsup\\u003e\"},\"barmode\":\"group\",\"height\":700,\"width\":1000},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('d66aef5f-27ec-4585-a673-ffd0dd02bb63');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nAnalyzing Speed Differences Between Pandas and Polars in Common Data Science Workflow Operations\n:::\n:::\n\n\nThroughout our exploration, Polars has consistently outperformed Pandas. We intentionally focused on tasks that frequently arise in data analysis, encompassing file reading, column selection, filtering, and more. However, where Polars truly shines is in aggregation, capitalizing on its multiprocessing prowess. Take a glance at @fig-fig14, and you'll notice that reading files is the most time-consuming step for Polars. To address this (and reduce memory usage at the same time), we have the nifty `scan_csv` function that enables Polars to operate in a lazy mode, optimizing the entire data pipeline. It's clear that Polars packs a punch in the realm of data processing!\n\nShould you consider using Polars? Based on the findings of this experiment, it's evident that Polars can bring substantial benefits to every stage of your data processing. Its remarkable speed can make a significant impact. If you're open to investing time in understanding its API (which isn't drastically different from Pandas), I'm confident your projects will gain a significant speed boost. And don't forget, the [trajectory](https://www.crunchbase.com/funding_round/polars-seed--963c89d2) of the project seems promising, implying a bright future ahead.\n\nWhatever path you choose, ensure you become well-acquainted with your selected library and stay current with emerging technologies. And above all, relish the journey. Happy coding, and until next time! 🐼🐍🤓💻\n\n",
    "supporting": [
      "polars_speed_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.24.1.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}